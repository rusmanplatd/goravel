{
  "openapi": "3.0.3",
  "info": {
    "title": "Goravel API",
    "description": "Multi-tenant API with role-based access control and activity logging",
    "version": "1.0.0",
    "contact": {
      "name": "Goravel Team",
      "email": "support@goravel.com",
      "url": "https://goravel.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://api.goravel.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/.well-known/oauth-authorization-server": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 Authorization Server Metadata",
        "description": "Provides OAuth2/OIDC discovery information with Google-like features",
        "operationId": "get.Well-KnownOauth-Authorization-Server",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get all activity logs",
        "description": "Retrieve a list of all activity logs for the current tenant with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getActivity-Logs",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search in description and properties",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-event_timestamp"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): causer_user,subject_user,tenant",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Create a new activity log",
        "description": "Create a new activity log entry for a tenant",
        "operationId": "postActivity-Logs",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs/causer": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get activities for causer",
        "description": "Retrieve activities caused by a specific user with cursor-based pagination",
        "operationId": "getActivity-LogsCauser",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "causer_type",
            "in": "query",
            "description": "Causer type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs/date-range": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get activities in date range",
        "description": "Retrieve activities within a date range with cursor-based pagination",
        "operationId": "getActivity-LogsDate-Range",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs/log-name": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get activities by log name",
        "description": "Retrieve activities by log name with cursor-based pagination",
        "operationId": "getActivity-LogsLog-Name",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "log_name",
            "in": "query",
            "description": "Log name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs/subject": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get activities for subject",
        "description": "Retrieve activities for a specific subject with cursor-based pagination",
        "operationId": "getActivity-LogsSubject",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "subject_type",
            "in": "query",
            "description": "Subject type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs/{id}": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get activity log by ID",
        "description": "Retrieve a specific activity log by its ID",
        "operationId": "getActivity-LogsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Activity Log ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/docs": {
      "get": {
        "tags": null,
        "summary": "getApiDocs",
        "description": "API endpoint",
        "operationId": "getApiDocs",
        "responses": null
      }
    },
    "/api/docs/openapi.html": {
      "get": {
        "tags": null,
        "summary": "getApiDocsOpenapi.Html",
        "description": "API endpoint",
        "operationId": "getApiDocsOpenapi.Html",
        "responses": null
      }
    },
    "/api/docs/openapi.json": {
      "get": {
        "tags": null,
        "summary": "getApiDocsOpenapi.Json",
        "description": "API endpoint",
        "operationId": "getApiDocsOpenapi.Json",
        "responses": null
      }
    },
    "/api/docs/openapi.yaml": {
      "get": {
        "tags": null,
        "summary": "getApiDocsOpenapi.Yaml",
        "description": "API endpoint",
        "operationId": "getApiDocsOpenapi.Yaml",
        "responses": null
      }
    },
    "/api/v1/auth/change-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthChange-Password",
        "description": "API endpoint",
        "operationId": "postApiV1AuthChange-Password",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/forgot-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthForgot-Password",
        "description": "API endpoint",
        "operationId": "postApiV1AuthForgot-Password",
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthLogin",
        "description": "API endpoint",
        "operationId": "postApiV1AuthLogin",
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthLogout",
        "description": "API endpoint",
        "operationId": "postApiV1AuthLogout",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/mfa/backup-codes/regenerate": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthMfaBackup-CodesRegenerate",
        "description": "API endpoint",
        "operationId": "postApiV1AuthMfaBackup-CodesRegenerate",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/mfa/disable": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthMfaDisable",
        "description": "API endpoint",
        "operationId": "postApiV1AuthMfaDisable",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/mfa/enable": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthMfaEnable",
        "description": "API endpoint",
        "operationId": "postApiV1AuthMfaEnable",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/mfa/setup": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "getApiV1AuthMfaSetup",
        "description": "API endpoint",
        "operationId": "getApiV1AuthMfaSetup",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/mfa/verify": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthMfaVerify",
        "description": "API endpoint",
        "operationId": "postApiV1AuthMfaVerify",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/profile": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "getApiV1AuthProfile",
        "description": "API endpoint",
        "operationId": "getApiV1AuthProfile",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthRefresh",
        "description": "API endpoint",
        "operationId": "postApiV1AuthRefresh",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthRegister",
        "description": "API endpoint",
        "operationId": "postApiV1AuthRegister",
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/v1/auth/reset-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthReset-Password",
        "description": "API endpoint",
        "operationId": "postApiV1AuthReset-Password",
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/v1/auth/webauthn/authenticate": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthWebauthnAuthenticate",
        "description": "API endpoint",
        "operationId": "postApiV1AuthWebauthnAuthenticate",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/v1/auth/webauthn/begin-authentication": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "getApiV1AuthWebauthnBegin-Authentication",
        "description": "API endpoint",
        "operationId": "getApiV1AuthWebauthnBegin-Authentication",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/webauthn/begin-registration": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "getApiV1AuthWebauthnBegin-Registration",
        "description": "API endpoint",
        "operationId": "getApiV1AuthWebauthnBegin-Registration",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/webauthn/credentials": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "getApiV1AuthWebauthnCredentials",
        "description": "API endpoint",
        "operationId": "getApiV1AuthWebauthnCredentials",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/webauthn/credentials/{id}": {
      "delete": {
        "tags": [
          "auth"
        ],
        "summary": "deleteApiV1AuthWebauthnCredentialsbyId",
        "description": "API endpoint",
        "operationId": "deleteApiV1AuthWebauthnCredentialsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/auth/webauthn/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "postApiV1AuthWebauthnRegister",
        "description": "API endpoint",
        "operationId": "postApiV1AuthWebauthnRegister",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/v1/drive/analytics": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get storage analytics",
        "description": "Get detailed storage usage analytics",
        "operationId": "getApiV1DriveAnalytics",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/bulk": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Bulk file operations",
        "description": "Perform bulk operations on multiple files",
        "operationId": "postApiV1DriveBulk",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/cleanup": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Cleanup trash",
        "description": "Permanently delete old trashed files",
        "operationId": "postApiV1DriveCleanup",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "description": "Delete files older than X days",
            "required": false,
            "schema": {
              "type": "int",
              "default": "30"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/comments/{id}": {
      "put": {
        "tags": [
          "Drive"
        ],
        "summary": "Update file comment",
        "description": "Update a file comment",
        "operationId": "putApiV1DriveCommentsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Drive"
        ],
        "summary": "Delete file comment",
        "description": "Delete a file comment",
        "operationId": "deleteApiV1DriveCommentsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/duplicates": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Find duplicate files",
        "description": "Find duplicate files based on content hash",
        "operationId": "getApiV1DriveDuplicates",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/duplicates/resolve": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Resolve duplicates",
        "description": "Resolve duplicate files by keeping one and removing others",
        "operationId": "postApiV1DriveDuplicatesResolve",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/duplicates/stats": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get duplicate statistics",
        "description": "Get statistics about duplicate files",
        "operationId": "getApiV1DriveDuplicatesStats",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/duplicates/suggestions": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get duplicate management suggestions",
        "description": "Get suggestions for managing duplicate and similar files",
        "operationId": "getApiV1DriveDuplicatesSuggestions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get files",
        "description": "Get files in a folder",
        "operationId": "getApiV1DriveFiles",
        "parameters": [
          {
            "name": "folder_id",
            "in": "query",
            "description": "Folder ID",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Upload a file",
        "description": "Upload a file to the drive",
        "operationId": "postApiV1DriveFiles",
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "File to upload",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/activity": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get file activity",
        "description": "Get activity history for a file",
        "operationId": "getApiV1DriveFilesbyIdActivity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/comments": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get file comments",
        "description": "Get comments for a file",
        "operationId": "getApiV1DriveFilesbyIdComments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Add file comment",
        "description": "Add a comment to a file",
        "operationId": "postApiV1DriveFilesbyIdComments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/download": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Download file",
        "description": "Download a file",
        "operationId": "getApiV1DriveFilesbyIdDownload",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/move": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Move file",
        "description": "Move a file to a different folder",
        "operationId": "postApiV1DriveFilesbyIdMove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/preview": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get file preview",
        "description": "Get a preview of a file (resized for images)",
        "operationId": "getApiV1DriveFilesbyIdPreview",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/restore": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Restore file",
        "description": "Restore a file from trash",
        "operationId": "postApiV1DriveFilesbyIdRestore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/share": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Share file",
        "description": "Share a file with others",
        "operationId": "postApiV1DriveFilesbyIdShare",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/star": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Toggle file star",
        "description": "Star or unstar a file",
        "operationId": "postApiV1DriveFilesbyIdStar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/tags": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Tag file",
        "description": "Add tags to a file",
        "operationId": "postApiV1DriveFilesbyIdTags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Drive"
        ],
        "summary": "Remove tags from file",
        "description": "Remove specific tags from a file",
        "operationId": "deleteApiV1DriveFilesbyIdTags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/thumbnail": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get file thumbnail",
        "description": "Get a thumbnail of a file",
        "operationId": "getApiV1DriveFilesbyIdThumbnail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/trash": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Trash file",
        "description": "Move a file to trash",
        "operationId": "postApiV1DriveFilesbyIdTrash",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/files/{id}/versions": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Create file version",
        "description": "Create a new version of a file",
        "operationId": "postApiV1DriveFilesbyIdVersions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "formData",
            "description": "Version comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/folders": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get folders",
        "description": "Get folders in a parent folder",
        "operationId": "getApiV1DriveFolders",
        "parameters": [
          {
            "name": "parent_id",
            "in": "query",
            "description": "Parent folder ID",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Create folder",
        "description": "Create a new folder",
        "operationId": "postApiV1DriveFolders",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/folders/{id}/contents": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get folder contents",
        "description": "Get files and subfolders in a folder",
        "operationId": "getApiV1DriveFoldersbyIdContents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID (empty for root)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/folders/{id}/restore": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Restore folder from trash",
        "description": "Restore a folder and its contents from trash",
        "operationId": "postApiV1DriveFoldersbyIdRestore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/folders/{id}/share": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Share folder",
        "description": "Share a folder with others",
        "operationId": "postApiV1DriveFoldersbyIdShare",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/folders/{id}/trash": {
      "post": {
        "tags": [
          "Drive"
        ],
        "summary": "Move folder to trash",
        "description": "Move a folder and its contents to trash",
        "operationId": "postApiV1DriveFoldersbyIdTrash",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/frequent": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get frequently accessed files",
        "description": "Get files that are accessed frequently by the user",
        "operationId": "getApiV1DriveFrequent",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of files to return",
            "required": false,
            "schema": {
              "type": "int",
              "default": "10"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/insights/activity": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get user activity insights",
        "description": "Get detailed insights about user activity patterns",
        "operationId": "getApiV1DriveInsightsActivity",
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "description": "Time period",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "week",
                "month",
                "quarter"
              ],
              "default": "week"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/insights/workspace": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get workspace insights",
        "description": "Get insights about workspace organization and usage",
        "operationId": "getApiV1DriveInsightsWorkspace",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/organize/tags": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Organize files by tags",
        "description": "Get files organized hierarchically by tags",
        "operationId": "getApiV1DriveOrganizeTags",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/quota": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get storage quota",
        "description": "Get storage quota and usage information",
        "operationId": "getApiV1DriveQuota",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/recent": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get recent files",
        "description": "Get recently accessed files",
        "operationId": "getApiV1DriveRecent",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of files to return",
            "required": false,
            "schema": {
              "type": "int",
              "default": "10"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/recommendations": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get smart recommendations",
        "description": "Get AI-powered recommendations for file management",
        "operationId": "getApiV1DriveRecommendations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/recommended": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get recommended files",
        "description": "Get AI-recommended files based on user activity patterns",
        "operationId": "getApiV1DriveRecommended",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of files to return",
            "required": false,
            "schema": {
              "type": "int",
              "default": "10"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/search": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Advanced file search",
        "description": "Search files with advanced filters",
        "operationId": "getApiV1DriveSearch",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "min_size",
            "in": "query",
            "description": "Minimum file size in bytes",
            "required": false,
            "schema": {
              "type": "int"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "Date from (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_starred",
            "in": "query",
            "description": "Filter by starred status",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                "name",
                "size",
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/shared/folders": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get shared folders",
        "description": "Get folders shared with the current user",
        "operationId": "getApiV1DriveSharedFolders",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/similar": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Find similar files",
        "description": "Find files with similar names or content",
        "operationId": "getApiV1DriveSimilar",
        "parameters": [
          {
            "name": "threshold",
            "in": "query",
            "description": "Similarity threshold (0.0-1.0)",
            "required": false,
            "schema": {
              "type": "float64",
              "default": "0.8"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/starred": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get starred files",
        "description": "Get starred/favorited files",
        "operationId": "getApiV1DriveStarred",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/tags": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get all user tags",
        "description": "Get all unique tags used by the current user",
        "operationId": "getApiV1DriveTags",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/tags/files": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get files by tags",
        "description": "Get files that have specific tags",
        "operationId": "getApiV1DriveTagsFiles",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated tags",
            "required": true,
            "schema": {
              "type": "string",
              "default": "false"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/tags/stats": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get tag usage statistics",
        "description": "Get detailed statistics about tag usage",
        "operationId": "getApiV1DriveTagsStats",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/tags/suggest": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Suggest tags",
        "description": "Get tag suggestions based on filename and existing tags",
        "operationId": "getApiV1DriveTagsSuggest",
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "description": "Filename to suggest tags for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/trash": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get trashed items",
        "description": "Get files and folders in trash",
        "operationId": "getApiV1DriveTrash",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/drive/types/{type}": {
      "get": {
        "tags": [
          "Drive"
        ],
        "summary": "Get files by type",
        "description": "Get files filtered by type category",
        "operationId": "getApiV1DriveTypesbyType",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "File type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "images",
                "videos",
                "audio",
                "documents",
                "archives"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "20"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/analytics/organizational": {
      "get": {
        "tags": [
          "meeting-analytics"
        ],
        "summary": "Get organizational analytics",
        "description": "Get organization-wide meeting analytics and trends",
        "operationId": "getApiV1MeetingsAnalyticsOrganizational",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "description": "Organization ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/breakout-rooms": {
      "post": {
        "tags": [
          "meetings"
        ],
        "summary": "postApiV1MeetingsbyIdBreakout-Rooms",
        "description": "API endpoint",
        "operationId": "postApiV1MeetingsbyIdBreakout-Rooms",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/breakout-rooms/assign": {
      "post": {
        "tags": [
          "meetings"
        ],
        "summary": "postApiV1MeetingsbyIdBreakout-RoomsAssign",
        "description": "API endpoint",
        "operationId": "postApiV1MeetingsbyIdBreakout-RoomsAssign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/chat": {
      "get": {
        "tags": [
          "meetings"
        ],
        "summary": "getApiV1MeetingsbyIdChat",
        "description": "API endpoint",
        "operationId": "getApiV1MeetingsbyIdChat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "meetings"
        ],
        "summary": "postApiV1MeetingsbyIdChat",
        "description": "API endpoint",
        "operationId": "postApiV1MeetingsbyIdChat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/end": {
      "post": {
        "tags": [
          "meetings"
        ],
        "summary": "postApiV1MeetingsbyIdEnd",
        "description": "API endpoint",
        "operationId": "postApiV1MeetingsbyIdEnd",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/join": {
      "post": {
        "tags": [
          "meetings"
        ],
        "summary": "postApiV1MeetingsbyIdJoin",
        "description": "API endpoint",
        "operationId": "postApiV1MeetingsbyIdJoin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/leave": {
      "post": {
        "tags": [
          "meetings"
        ],
        "summary": "postApiV1MeetingsbyIdLeave",
        "description": "API endpoint",
        "operationId": "postApiV1MeetingsbyIdLeave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/participants": {
      "get": {
        "tags": [
          "meetings"
        ],
        "summary": "getApiV1MeetingsbyIdParticipants",
        "description": "API endpoint",
        "operationId": "getApiV1MeetingsbyIdParticipants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/participants/status": {
      "put": {
        "tags": [
          "meetings"
        ],
        "summary": "putApiV1MeetingsbyIdParticipantsStatus",
        "description": "API endpoint",
        "operationId": "putApiV1MeetingsbyIdParticipantsStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/start": {
      "post": {
        "tags": [
          "meetings"
        ],
        "summary": "postApiV1MeetingsbyIdStart",
        "description": "API endpoint",
        "operationId": "postApiV1MeetingsbyIdStart",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/status": {
      "get": {
        "tags": [
          "meetings"
        ],
        "summary": "getApiV1MeetingsbyIdStatus",
        "description": "API endpoint",
        "operationId": "getApiV1MeetingsbyIdStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/token": {
      "post": {
        "tags": [
          "meetings"
        ],
        "summary": "postApiV1MeetingsbyIdToken",
        "description": "API endpoint",
        "operationId": "postApiV1MeetingsbyIdToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{id}/ws": {
      "get": {
        "tags": [
          "meetings"
        ],
        "summary": "Connect to meeting WebSocket",
        "description": "Establish WebSocket connection for real-time meeting features",
        "operationId": "getApiV1MeetingsbyIdWs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/analytics/attendance": {
      "get": {
        "tags": [
          "meeting-analytics"
        ],
        "summary": "Get attendance report",
        "description": "Get detailed attendance analytics with join/leave patterns",
        "operationId": "getApiV1MeetingsbyMeeting_idAnalyticsAttendance",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/analytics/engagement": {
      "get": {
        "tags": [
          "meeting-analytics"
        ],
        "summary": "Get engagement metrics",
        "description": "Get engagement metrics including chat activity, poll participation, etc.",
        "operationId": "getApiV1MeetingsbyMeeting_idAnalyticsEngagement",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/analytics/export": {
      "post": {
        "tags": [
          "meeting-analytics"
        ],
        "summary": "Export meeting report",
        "description": "Export a comprehensive meeting report in various formats",
        "operationId": "postApiV1MeetingsbyMeeting_idAnalyticsExport",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "pdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/analytics/participation": {
      "get": {
        "tags": [
          "meeting-analytics"
        ],
        "summary": "Get participation report",
        "description": "Get detailed participation report for a meeting",
        "operationId": "getApiV1MeetingsbyMeeting_idAnalyticsParticipation",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/analytics/realtime": {
      "get": {
        "tags": [
          "meeting-analytics"
        ],
        "summary": "Get real-time metrics",
        "description": "Get real-time meeting metrics for active meetings",
        "operationId": "getApiV1MeetingsbyMeeting_idAnalyticsRealtime",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/analytics/stats": {
      "get": {
        "tags": [
          "meeting-analytics"
        ],
        "summary": "Get meeting statistics",
        "description": "Get comprehensive meeting statistics for a specific meeting",
        "operationId": "getApiV1MeetingsbyMeeting_idAnalyticsStats",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/disable-camera": {
      "post": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Disable participant camera",
        "description": "Disable or enable a participant's camera",
        "operationId": "postApiV1MeetingsbyMeeting_idSecurityDisable-Camera",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Host User ID",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/events": {
      "get": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Get security events",
        "description": "Get security events and alerts for a meeting",
        "operationId": "getApiV1MeetingsbyMeeting_idSecurityEvents",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/lock": {
      "post": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Lock meeting",
        "description": "Lock or unlock a meeting to prevent new participants from joining",
        "operationId": "postApiV1MeetingsbyMeeting_idSecurityLock",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Whether to lock (true) or unlock (false)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bool"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/monitor": {
      "get": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Monitor meeting security",
        "description": "Monitor ongoing security threats and suspicious activities",
        "operationId": "getApiV1MeetingsbyMeeting_idSecurityMonitor",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/mute-participant": {
      "post": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Mute participant",
        "description": "Mute or unmute a participant",
        "operationId": "postApiV1MeetingsbyMeeting_idSecurityMute-Participant",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Host User ID",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/policy": {
      "post": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Apply security policy",
        "description": "Apply security policies to a meeting (host only)",
        "operationId": "postApiV1MeetingsbyMeeting_idSecurityPolicy",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/remove-participant": {
      "post": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Remove participant",
        "description": "Remove a participant from the meeting (kick/ban)",
        "operationId": "postApiV1MeetingsbyMeeting_idSecurityRemove-Participant",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Host User ID",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/validate-access": {
      "post": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Validate meeting access",
        "description": "Validate if a user can access a meeting based on security policies",
        "operationId": "postApiV1MeetingsbyMeeting_idSecurityValidate-Access",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Device information",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/waiting-room": {
      "get": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Get waiting room participants",
        "description": "Get list of participants waiting for approval (host only)",
        "operationId": "getApiV1MeetingsbyMeeting_idSecurityWaiting-Room",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/waiting-room/approve": {
      "post": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Approve waiting room participant",
        "description": "Approve a participant from the waiting room (host only)",
        "operationId": "postApiV1MeetingsbyMeeting_idSecurityWaiting-RoomApprove",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Host User ID",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/meetings/{meeting_id}/security/waiting-room/deny": {
      "post": {
        "tags": [
          "meeting-security"
        ],
        "summary": "Deny waiting room participant",
        "description": "Deny a participant from the waiting room (host only)",
        "operationId": "postApiV1MeetingsbyMeeting_idSecurityWaiting-RoomDeny",
        "parameters": [
          {
            "name": "meeting_id",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Host User ID",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/password-reset": {
      "post": {
        "tags": [
          "notifications"
        ],
        "summary": "Send a password reset notification",
        "description": "Sends a password reset notification to a user by their email.",
        "operationId": "postApiV1NotificationsPassword-Reset",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "User Email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/read-all/{user_id}": {
      "put": {
        "tags": [
          "notifications"
        ],
        "summary": "Mark all notifications for a user as read",
        "description": "Marks all unread notifications for a user as read.",
        "operationId": "putApiV1NotificationsRead-AllbyUser_id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/welcome/{user_id}": {
      "post": {
        "tags": [
          "notifications"
        ],
        "summary": "Send a welcome notification to a user",
        "description": "Sends a welcome notification to a user by their ID.",
        "operationId": "postApiV1NotificationsWelcomebyUser_id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/{notification_id}": {
      "delete": {
        "tags": [
          "notifications"
        ],
        "summary": "Delete a notification",
        "description": "Deletes a notification by its ID.",
        "operationId": "deleteApiV1NotificationsbyNotification_id",
        "parameters": [
          {
            "name": "notification_id",
            "in": "path",
            "description": "Notification ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/{notification_id}/read": {
      "put": {
        "tags": [
          "notifications"
        ],
        "summary": "Mark a notification as read",
        "description": "Marks a notification as read by its ID.",
        "operationId": "putApiV1NotificationsbyNotification_idRead",
        "parameters": [
          {
            "name": "notification_id",
            "in": "path",
            "description": "Notification ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/{user_id}": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "Get notifications for a user",
        "description": "Retrieves notifications for a user by their ID.",
        "operationId": "getApiV1NotificationsbyUser_id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/oauth/jwt-token": {
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "postApiV1OauthJwt-Token",
        "description": "API endpoint",
        "operationId": "postApiV1OauthJwt-Token",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/oauth/security-report": {
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "postApiV1OauthSecurity-Report",
        "description": "API endpoint",
        "operationId": "postApiV1OauthSecurity-Report",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/oauth/test": {
      "get": {
        "tags": null,
        "summary": "getApiV1OauthTest",
        "description": "API endpoint",
        "operationId": "getApiV1OauthTest",
        "responses": null,
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/vault/cache/clear": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Clear Vault key cache",
        "description": "Clears all cached encryption keys from memory",
        "operationId": "postApiV1VaultCacheClear",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/vault/health": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Get Vault health status",
        "description": "Returns the current health status of the HashiCorp Vault connection",
        "operationId": "getApiV1VaultHealth",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/vault/keys/{user_id}/history": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Get key version history",
        "description": "Returns the complete version history for an encryption key",
        "operationId": "getApiV1VaultKeysbyUser_idHistory",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/vault/keys/{user_id}/rollback": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Rollback key version",
        "description": "Rolls back an encryption key to a previous version",
        "operationId": "postApiV1VaultKeysbyUser_idRollback",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/vault/keys/{user_id}/versions": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "List key versions",
        "description": "Returns all versions of an encryption key with metadata",
        "operationId": "getApiV1VaultKeysbyUser_idVersions",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Create new key version",
        "description": "Creates a new version of an encryption key with description and audit trail",
        "operationId": "postApiV1VaultKeysbyUser_idVersions",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/vault/keys/{user_id}/versions/{version}": {
      "delete": {
        "tags": [
          "vault"
        ],
        "summary": "Delete key version",
        "description": "Soft-deletes a specific version of an encryption key",
        "operationId": "deleteApiV1VaultKeysbyUser_idVersionsbyVersion",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/vault/metrics": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Get Vault performance metrics",
        "description": "Returns performance metrics for the Vault connection including request counts and response times",
        "operationId": "getApiV1VaultMetrics",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/vault/status": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Get Vault integration status",
        "description": "Returns comprehensive status information about the Vault integration",
        "operationId": "getApiV1VaultStatus",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/vault/token/renew": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Renew Vault token",
        "description": "Renews the current Vault authentication token if renewable",
        "operationId": "postApiV1VaultTokenRenew",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/broadcast": {
      "post": {
        "tags": [
          "websocket"
        ],
        "summary": "postApiV1WebsocketBroadcast",
        "description": "API endpoint",
        "operationId": "postApiV1WebsocketBroadcast",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/chat/rooms/{room_id}/broadcast": {
      "post": {
        "tags": [
          "websocket"
        ],
        "summary": "postApiV1WebsocketChatRoomsbyRoom_idBroadcast",
        "description": "API endpoint",
        "operationId": "postApiV1WebsocketChatRoomsbyRoom_idBroadcast",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/chat/rooms/{room_id}/connections": {
      "get": {
        "tags": [
          "websocket"
        ],
        "summary": "getApiV1WebsocketChatRoomsbyRoom_idConnections",
        "description": "API endpoint",
        "operationId": "getApiV1WebsocketChatRoomsbyRoom_idConnections",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "websocket"
        ],
        "summary": "deleteApiV1WebsocketChatRoomsbyRoom_idConnections",
        "description": "API endpoint",
        "operationId": "deleteApiV1WebsocketChatRoomsbyRoom_idConnections",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/connections/{connection_id}": {
      "delete": {
        "tags": [
          "websocket"
        ],
        "summary": "deleteApiV1WebsocketConnectionsbyConnection_id",
        "description": "API endpoint",
        "operationId": "deleteApiV1WebsocketConnectionsbyConnection_id",
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "connection_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/health": {
      "get": {
        "tags": [
          "websocket"
        ],
        "summary": "getApiV1WebsocketHealth",
        "description": "API endpoint",
        "operationId": "getApiV1WebsocketHealth",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/stats": {
      "get": {
        "tags": [
          "websocket"
        ],
        "summary": "getApiV1WebsocketStats",
        "description": "API endpoint",
        "operationId": "getApiV1WebsocketStats",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/test": {
      "post": {
        "tags": [
          "websocket"
        ],
        "summary": "postApiV1WebsocketTest",
        "description": "API endpoint",
        "operationId": "postApiV1WebsocketTest",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/users/{user_id}/connections": {
      "delete": {
        "tags": [
          "websocket"
        ],
        "summary": "deleteApiV1WebsocketUsersbyUser_idConnections",
        "description": "API endpoint",
        "operationId": "deleteApiV1WebsocketUsersbyUser_idConnections",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "user_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/ws": {
      "get": {
        "tags": [
          "ws"
        ],
        "summary": "getApiV1Ws",
        "description": "API endpoint",
        "operationId": "getApiV1Ws",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/ws/chat/presence": {
      "get": {
        "tags": [
          "ws"
        ],
        "summary": "getApiV1WsChatPresence",
        "description": "API endpoint",
        "operationId": "getApiV1WsChatPresence",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/ws/chat/rooms/{room_id}": {
      "get": {
        "tags": [
          "ws"
        ],
        "summary": "getApiV1WsChatRoomsbyRoom_id",
        "description": "API endpoint",
        "operationId": "getApiV1WsChatRoomsbyRoom_id",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/ws/chat/typing/{room_id}": {
      "get": {
        "tags": [
          "ws"
        ],
        "summary": "getApiV1WsChatTypingbyRoom_id",
        "description": "API endpoint",
        "operationId": "getApiV1WsChatTypingbyRoom_id",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-analytics/meeting-effectiveness": {
      "get": {
        "tags": [
          "calendar-analytics"
        ],
        "summary": "Get meeting effectiveness report",
        "description": "Get detailed meeting effectiveness metrics for analysis",
        "operationId": "getCalendar-AnalyticsMeeting-Effectiveness",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "User ID for user-specific report",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "30 days ago"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "today"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-analytics/productivity-insights": {
      "get": {
        "tags": [
          "calendar-analytics"
        ],
        "summary": "Get productivity insights",
        "description": "Get productivity insights and recommendations based on calendar patterns",
        "operationId": "getCalendar-AnalyticsProductivity-Insights",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "30 days ago"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "today"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-analytics/reports": {
      "get": {
        "tags": [
          "calendar-analytics"
        ],
        "summary": "Generate calendar report",
        "description": "Generate a detailed calendar report for users or tenants",
        "operationId": "getCalendar-AnalyticsReports",
        "parameters": [
          {
            "name": "report_type",
            "in": "query",
            "description": "Report type: user or tenant",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "tenant"
              ]
            }
          },
          {
            "name": "target_id",
            "in": "query",
            "description": "Target ID (user ID or tenant ID)",
            "required": true,
            "schema": {
              "type": "string",
              "default": "30 days ago"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "today"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Report format: json or pdf",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "pdf"
              ],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-analytics/tenants/{tenant_id}": {
      "get": {
        "tags": [
          "calendar-analytics"
        ],
        "summary": "Get tenant calendar analytics",
        "description": "Retrieve comprehensive analytics for a tenant's calendar usage",
        "operationId": "getCalendar-AnalyticsTenantsbyTenant_id",
        "parameters": [
          {
            "name": "tenant_id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "30 days ago"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "today"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-analytics/users/{user_id}": {
      "get": {
        "tags": [
          "calendar-analytics"
        ],
        "summary": "Get user calendar analytics",
        "description": "Retrieve comprehensive analytics for a user's calendar usage",
        "operationId": "getCalendar-AnalyticsUsersbyUser_id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "30 days ago"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "today"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-delegation/accept/{delegation_id}": {
      "post": {
        "tags": [
          "calendar-delegation"
        ],
        "summary": "Accept delegation invitation",
        "description": "Accept an invitation to manage someone's calendar as a delegate",
        "operationId": "postCalendar-DelegationAcceptbyDelegation_id",
        "parameters": [
          {
            "name": "delegation_id",
            "in": "path",
            "description": "Delegation ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-delegation/activities": {
      "get": {
        "tags": [
          "calendar-delegation"
        ],
        "summary": "Get delegation activities",
        "description": "Get activity logs for delegations where user is principal or delegate",
        "operationId": "getCalendar-DelegationActivities",
        "parameters": [
          {
            "name": "delegation_id",
            "in": "query",
            "description": "Specific delegation ID to filter by",
            "required": false,
            "schema": {
              "type": "string",
              "default": "50"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of activities to skip",
            "required": false,
            "schema": {
              "type": "int",
              "default": "0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-delegation/create/{delegate_id}": {
      "post": {
        "tags": [
          "calendar-delegation"
        ],
        "summary": "Create calendar delegation",
        "description": "Create a delegation allowing another user to manage your calendar",
        "operationId": "postCalendar-DelegationCreatebyDelegate_id",
        "parameters": [
          {
            "name": "delegate_id",
            "in": "path",
            "description": "User ID to delegate to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-delegation/revoke/{delegation_id}": {
      "delete": {
        "tags": [
          "calendar-delegation"
        ],
        "summary": "Revoke delegation",
        "description": "Revoke a calendar delegation",
        "operationId": "deleteCalendar-DelegationRevokebyDelegation_id",
        "parameters": [
          {
            "name": "delegation_id",
            "in": "path",
            "description": "Delegation ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get all calendar events",
        "description": "Retrieve a list of all calendar events with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getCalendar-Events",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): creator,tenant,participants,meeting",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Create calendar event",
        "description": "Create a new calendar event with optional participants and meeting details",
        "operationId": "postCalendar-Events",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/availability": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get user availability",
        "description": "Get availability information for one or more users within a time range",
        "operationId": "getCalendar-EventsAvailability",
        "parameters": [
          {
            "name": "user_ids",
            "in": "query",
            "description": "Comma-separated user IDs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "End time (ISO 8601)",
            "required": true,
            "schema": {
              "type": "string",
              "default": "UTC"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "Time granularity: 15min, 30min, 1hour",
            "required": false,
            "schema": {
              "type": "string",
              "default": "30min"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/bulk-delete": {
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Bulk delete calendar events",
        "description": "Delete multiple calendar events at once",
        "operationId": "postCalendar-EventsBulk-Delete",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/bulk-reschedule": {
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Bulk reschedule calendar events",
        "description": "Reschedule multiple calendar events with conflict detection",
        "operationId": "postCalendar-EventsBulk-Reschedule",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/bulk-update": {
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Bulk update calendar events",
        "description": "Update multiple calendar events at once",
        "operationId": "postCalendar-EventsBulk-Update",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/check-conflicts": {
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Check scheduling conflicts",
        "description": "Check for scheduling conflicts with existing events",
        "operationId": "postCalendar-EventsCheck-Conflicts",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/export": {
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Export calendar to iCal",
        "description": "Export calendar events to iCal format",
        "operationId": "postCalendar-EventsExport",
        "responses": {
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/my": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get my events",
        "description": "Retrieve calendar events for the authenticated user",
        "operationId": "getCalendar-EventsMy",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date filter (ISO 8601)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/suggestions": {
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get event scheduling suggestions",
        "description": "Get AI-powered scheduling suggestions based on participant availability",
        "operationId": "postCalendar-EventsSuggestions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/view": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get calendar view",
        "description": "Retrieve calendar events in daily, weekly, or monthly view format",
        "operationId": "getCalendar-EventsView",
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "description": "View type: day, week, month",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month"
              ]
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Reference date (ISO 8601) - defaults to today",
            "required": false,
            "schema": {
              "type": "string",
              "default": "UTC"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter events for specific user",
            "required": false,
            "schema": {
              "type": "string",
              "default": "true"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get calendar event by ID",
        "description": "Retrieve a specific calendar event by its ID",
        "operationId": "getCalendar-EventsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Update calendar event",
        "description": "Update an existing calendar event",
        "operationId": "putCalendar-EventsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Delete calendar event",
        "description": "Delete a calendar event and all its participants",
        "operationId": "deleteCalendar-EventsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}/participants": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get event participants",
        "description": "Retrieve all participants for a specific calendar event",
        "operationId": "getCalendar-EventsbyIdParticipants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Add participant to event",
        "description": "Add a new participant to a calendar event",
        "operationId": "postCalendar-EventsbyIdParticipants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}/participants/{user_id}": {
      "delete": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Remove participant from event",
        "description": "Remove a participant from a calendar event",
        "operationId": "deleteCalendar-EventsbyIdParticipantsbyUser_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}/participants/{user_id}/response": {
      "put": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Update participant response",
        "description": "Update a participant's response status for an event",
        "operationId": "putCalendar-EventsbyIdParticipantsbyUser_idResponse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}/reminders": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get event reminders",
        "description": "Retrieve all reminders for a specific calendar event",
        "operationId": "getCalendar-EventsbyIdReminders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Create event reminder",
        "description": "Create a reminder for a calendar event",
        "operationId": "postCalendar-EventsbyIdReminders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-permissions/check": {
      "get": {
        "tags": [
          "calendar-permissions"
        ],
        "summary": "Check calendar permission",
        "description": "Check if the current user has a specific permission for a calendar resource",
        "operationId": "getCalendar-PermissionsCheck",
        "parameters": [
          {
            "name": "resource_type",
            "in": "query",
            "description": "Resource type (calendar, event, template)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "Permission to check (view, create, edit, delete, share, delegate)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-sharing/accept/{share_id}": {
      "post": {
        "tags": [
          "calendar-sharing"
        ],
        "summary": "Accept calendar share invitation",
        "description": "Accept an invitation to access someone's shared calendar",
        "operationId": "postCalendar-SharingAcceptbyShare_id",
        "parameters": [
          {
            "name": "share_id",
            "in": "path",
            "description": "Calendar share ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-sharing/revoke/{share_id}": {
      "delete": {
        "tags": [
          "calendar-sharing"
        ],
        "summary": "Revoke calendar share",
        "description": "Revoke access to a shared calendar",
        "operationId": "deleteCalendar-SharingRevokebyShare_id",
        "parameters": [
          {
            "name": "share_id",
            "in": "path",
            "description": "Calendar share ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-sharing/share/{shared_with_id}": {
      "post": {
        "tags": [
          "calendar-sharing"
        ],
        "summary": "Share calendar with another user",
        "description": "Share your calendar with another user with specified permissions",
        "operationId": "postCalendar-SharingSharebyShared_with_id",
        "parameters": [
          {
            "name": "shared_with_id",
            "in": "path",
            "description": "User ID to share calendar with",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-sharing/shared-calendars": {
      "get": {
        "tags": [
          "calendar-sharing"
        ],
        "summary": "Get shared calendars",
        "description": "Get a comprehensive view of all calendars shared with or by the user",
        "operationId": "getCalendar-SharingShared-Calendars",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/keys": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get user keys",
        "description": "Retrieve all encryption keys for the current user",
        "operationId": "getChatKeys",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Generate encryption keys",
        "description": "Generate new encryption keys for the current user",
        "operationId": "postChatKeys",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/notifications/global": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get global notification settings",
        "description": "Retrieve global notification settings for the current user",
        "operationId": "getChatNotificationsGlobal",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "chat"
        ],
        "summary": "Update global notification settings",
        "description": "Update global notification settings for the current user",
        "operationId": "putChatNotificationsGlobal",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get user's chat rooms",
        "description": "Retrieve all chat rooms where the current user is a member",
        "operationId": "getChatRooms",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Create a new chat room",
        "description": "Create a new chat room with specified members",
        "operationId": "postChatRooms",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get chat room by ID",
        "description": "Retrieve a specific chat room by its ID",
        "operationId": "getChatRoomsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "chat"
        ],
        "summary": "Update chat room",
        "description": "Update a chat room's information (admin only)",
        "operationId": "putChatRoomsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "chat"
        ],
        "summary": "Delete chat room",
        "description": "Delete a chat room (admin only)",
        "operationId": "deleteChatRoomsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/members": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get room members",
        "description": "Retrieve all members of a chat room",
        "operationId": "getChatRoomsbyIdMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Add member to room",
        "description": "Add a new member to a chat room (admin only)",
        "operationId": "postChatRoomsbyIdMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/members/{user_id}": {
      "delete": {
        "tags": [
          "chat"
        ],
        "summary": "Remove member from room",
        "description": "Remove a member from a chat room (admin only)",
        "operationId": "deleteChatRoomsbyIdMembersbyUser_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/messages": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get messages",
        "description": "Retrieve messages from a chat room with pagination",
        "operationId": "getChatRoomsbyIdMessages",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Send message",
        "description": "Send a message to a chat room",
        "operationId": "postChatRoomsbyIdMessages",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/messages/{message_id}": {
      "put": {
        "tags": [
          "chat"
        ],
        "summary": "Edit message",
        "description": "Edit a message (only sender can edit within 15 minutes)",
        "operationId": "putChatRoomsbyIdMessagesbyMessage_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "chat"
        ],
        "summary": "Delete message",
        "description": "Delete a message (sender or admin only)",
        "operationId": "deleteChatRoomsbyIdMessagesbyMessage_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/messages/{message_id}/reactions": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get message reactions",
        "description": "Retrieve all reactions for a specific message",
        "operationId": "getChatRoomsbyIdMessagesbyMessage_idReactions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Add message reaction",
        "description": "Add an emoji reaction to a message",
        "operationId": "postChatRoomsbyIdMessagesbyMessage_idReactions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "chat"
        ],
        "summary": "Remove message reaction",
        "description": "Remove an emoji reaction from a message",
        "operationId": "deleteChatRoomsbyIdMessagesbyMessage_idReactions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/messages/{message_id}/reactions/summary": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get reaction summary",
        "description": "Get a summary of reactions grouped by emoji",
        "operationId": "getChatRoomsbyIdMessagesbyMessage_idReactionsSummary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/messages/{message_id}/threads": {
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Create thread",
        "description": "Create a new message thread from a root message",
        "operationId": "postChatRoomsbyIdMessagesbyMessage_idThreads",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/notifications": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get notification settings",
        "description": "Retrieve notification settings for the current user in a specific room",
        "operationId": "getChatRoomsbyIdNotifications",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "chat"
        ],
        "summary": "Update notification settings",
        "description": "Update notification settings for the current user in a specific room",
        "operationId": "putChatRoomsbyIdNotifications",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/read": {
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Mark room as read",
        "description": "Mark all messages in a chat room as read by the current user",
        "operationId": "postChatRoomsbyIdRead",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/rotate-key": {
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Rotate room key",
        "description": "Rotate the encryption key for a chat room (admin only)",
        "operationId": "postChatRoomsbyIdRotate-Key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/threads": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get room threads",
        "description": "Retrieve all threads in a chat room",
        "operationId": "getChatRoomsbyIdThreads",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "20"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/threads/{thread_id}": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get thread",
        "description": "Retrieve a thread with all its messages",
        "operationId": "getChatThreadsbyThread_id",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "Thread ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/threads/{thread_id}/resolve": {
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Resolve thread",
        "description": "Mark a thread as resolved",
        "operationId": "postChatThreadsbyThread_idResolve",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "Thread ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/cities": {
      "get": {
        "tags": [
          "cities"
        ],
        "summary": "Get all cities",
        "description": "Retrieve a list of all cities with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getCities",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): province,districts",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "cities"
        ],
        "summary": "Create a new city",
        "description": "Create a new city with the provided information",
        "operationId": "postCities",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/cities/{id}": {
      "get": {
        "tags": [
          "cities"
        ],
        "summary": "Get city by ID",
        "description": "Retrieve a specific city by their ID",
        "operationId": "getCitiesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "City ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "cities"
        ],
        "summary": "Update a city",
        "description": "Update an existing city with the provided information",
        "operationId": "putCitiesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "City ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "cities"
        ],
        "summary": "Delete a city",
        "description": "Remove a city from the system",
        "operationId": "deleteCitiesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "City ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/cities/{id}/districts": {
      "get": {
        "tags": [
          "cities"
        ],
        "summary": "Get districts by city",
        "description": "Retrieve all districts for a specific city",
        "operationId": "getCitiesbyIdDistricts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "City ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/countries": {
      "get": {
        "tags": [
          "countries"
        ],
        "summary": "Get all countries",
        "description": "Retrieve a list of all countries with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getCountries",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): provinces,provinces.cities",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "countries"
        ],
        "summary": "Create a new country",
        "description": "Create a new country with the provided information",
        "operationId": "postCountries",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/countries/bulk-delete": {
      "post": {
        "tags": [
          "countries"
        ],
        "summary": "Delete multiple countries",
        "description": "Remove multiple countries from the system",
        "operationId": "postCountriesBulk-Delete",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/countries/{id}": {
      "get": {
        "tags": [
          "countries"
        ],
        "summary": "Get country by ID",
        "description": "Retrieve a specific country by their ID",
        "operationId": "getCountriesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "countries"
        ],
        "summary": "Update a country",
        "description": "Update an existing country with the provided information",
        "operationId": "putCountriesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "countries"
        ],
        "summary": "Delete a country",
        "description": "Remove a country from the system",
        "operationId": "deleteCountriesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/countries/{id}/provinces": {
      "get": {
        "tags": [
          "countries"
        ],
        "summary": "Get provinces by country",
        "description": "Retrieve all provinces for a specific country",
        "operationId": "getCountriesbyIdProvinces",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/countries/{id}/toggle-active": {
      "patch": {
        "tags": [
          "countries"
        ],
        "summary": "Toggle country active status",
        "description": "Toggle the active status of a country",
        "operationId": "patchCountriesbyIdToggle-Active",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/districts": {
      "get": {
        "tags": [
          "districts"
        ],
        "summary": "Get all districts",
        "description": "Retrieve a list of all districts with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getDistricts",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): city,city.province,city.province.country",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "districts"
        ],
        "summary": "Create a new district",
        "description": "Create a new district with the provided information",
        "operationId": "postDistricts",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/districts/{id}": {
      "get": {
        "tags": [
          "districts"
        ],
        "summary": "Get district by ID",
        "description": "Retrieve a specific district by their ID",
        "operationId": "getDistrictsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "District ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "districts"
        ],
        "summary": "Update a district",
        "description": "Update an existing district with the provided information",
        "operationId": "putDistrictsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "District ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "districts"
        ],
        "summary": "Delete a district",
        "description": "Remove a district from the system",
        "operationId": "deleteDistrictsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "District ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/event-templates": {
      "get": {
        "tags": [
          "event-templates"
        ],
        "summary": "Get all event templates",
        "description": "Retrieve a list of all event templates with filtering and pagination",
        "operationId": "getEvent-Templates",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "event-templates"
        ],
        "summary": "Create event template",
        "description": "Create a new event template",
        "operationId": "postEvent-Templates",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/event-templates/{id}": {
      "get": {
        "tags": [
          "event-templates"
        ],
        "summary": "Get event template by ID",
        "description": "Retrieve a specific event template by its ID",
        "operationId": "getEvent-TemplatesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "event-templates"
        ],
        "summary": "Update event template",
        "description": "Update an existing event template",
        "operationId": "putEvent-TemplatesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "event-templates"
        ],
        "summary": "Delete event template",
        "description": "Delete an event template (soft delete)",
        "operationId": "deleteEvent-TemplatesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/event-templates/{id}/create-event": {
      "post": {
        "tags": [
          "event-templates"
        ],
        "summary": "Create event from template",
        "description": "Create a new calendar event using an existing template",
        "operationId": "postEvent-TemplatesbyIdCreate-Event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/event-templates/{id}/usage": {
      "get": {
        "tags": [
          "event-templates"
        ],
        "summary": "Get template usage statistics",
        "description": "Get detailed usage statistics for an event template",
        "operationId": "getEvent-TemplatesbyIdUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/job-levels": {
      "get": {
        "tags": [
          "job-levels"
        ],
        "summary": "Get all job levels",
        "description": "Retrieve a list of all job levels with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getJob-Levels",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "job-levels"
        ],
        "summary": "Create a new job level",
        "description": "Create a new job level with the provided information",
        "operationId": "postJob-Levels",
        "requestBody": {
          "description": "Job level information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobLevelRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/job-levels/{id}": {
      "get": {
        "tags": [
          "job-levels"
        ],
        "summary": "Get job level by ID",
        "description": "Retrieve a specific job level by its ID",
        "operationId": "getJob-LevelsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job Level ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "job-levels"
        ],
        "summary": "Update a job level",
        "description": "Update an existing job level's information",
        "operationId": "putJob-LevelsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job Level ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "job-levels"
        ],
        "summary": "Delete a job level",
        "description": "Delete a job level by its ID (soft delete)",
        "operationId": "deleteJob-LevelsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job Level ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/job-positions": {
      "get": {
        "tags": [
          "job-positions"
        ],
        "summary": "Get all job positions",
        "description": "Retrieve a list of all job positions with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getJob-Positions",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): job_level,department,organization,reports_to_position",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "job-positions"
        ],
        "summary": "Create a new job position",
        "description": "Create a new job position with the provided information",
        "operationId": "postJob-Positions",
        "requestBody": {
          "description": "Job position information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobPositionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/job-positions/{id}": {
      "get": {
        "tags": [
          "job-positions"
        ],
        "summary": "Get job position by ID",
        "description": "Retrieve a specific job position by its ID",
        "operationId": "getJob-PositionsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job Position ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "job-positions"
        ],
        "summary": "Update a job position",
        "description": "Update an existing job position's information",
        "operationId": "putJob-PositionsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job Position ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "job-positions"
        ],
        "summary": "Delete a job position",
        "description": "Delete a job position by its ID (soft delete)",
        "operationId": "deleteJob-PositionsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job Position ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/analytics": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get OAuth2 analytics",
        "description": "Get comprehensive OAuth2 analytics and metrics",
        "operationId": "getOauthAnalytics",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Analytics type (token, client, user, system)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "token"
            }
          },
          {
            "name": "range",
            "in": "query",
            "description": "Time range (1h, 24h, 7d, 30d, 90d)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "24h"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Specific ID for client or user analytics",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/authorize": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 authorization endpoint",
        "description": "Handle OAuth2 authorization requests",
        "operationId": "postOauthAuthorize",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/authorize/resources": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Process resource authorization",
        "description": "Process OAuth2 authorization request with resource indicators (RFC 8707)",
        "operationId": "postOauthAuthorizeResources",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/check_session": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 Check Session endpoint",
        "description": "Check session status for iframe",
        "operationId": "getOauthCheck_session",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/clients": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get OAuth2 clients",
        "description": "Get all OAuth2 clients for the authenticated user",
        "operationId": "getOauthClients",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      },
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Create OAuth2 client",
        "description": "Create a new OAuth2 client",
        "operationId": "postOauthClients",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/clients/{id}": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get OAuth2 client",
        "description": "Get a specific OAuth2 client by ID",
        "operationId": "getOauthClientsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      },
      "put": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Update OAuth2 client",
        "description": "Update an OAuth2 client",
        "operationId": "putOauthClientsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      },
      "delete": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Delete OAuth2 client",
        "description": "Delete an OAuth2 client",
        "operationId": "deleteOauthClientsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/consent/prepare": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Prepare OAuth2 consent screen",
        "description": "Prepare consent screen with detailed scope information",
        "operationId": "getOauthConsentPrepare",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "Redirect URI",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nonce",
            "in": "query",
            "description": "Nonce parameter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/consent/process": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Process OAuth2 consent response",
        "description": "Process user's consent decision for OAuth2 authorization",
        "operationId": "postOauthConsentProcess",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/consents": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get user OAuth2 consents",
        "description": "Get all OAuth2 consents for the authenticated user",
        "operationId": "getOauthConsents",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/consents/{client_id}": {
      "delete": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Revoke OAuth2 consent",
        "description": "Revoke user's consent for a specific OAuth2 client",
        "operationId": "deleteOauthConsentsbyClient_id",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/device": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 device authorization endpoint",
        "description": "Handle OAuth2 device authorization requests",
        "operationId": "postOauthDevice",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/device/complete": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Complete device authorization",
        "description": "Complete device authorization by providing user credentials",
        "operationId": "postOauthDeviceComplete",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/device/token": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 device token endpoint",
        "description": "Handle OAuth2 device token requests",
        "operationId": "postOauthDeviceToken",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/introspect": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 token introspection",
        "description": "Introspect an OAuth2 token with detailed metadata",
        "operationId": "postOauthIntrospect",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/jwks": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "JSON Web Key Set endpoint",
        "description": "Get public keys for token verification",
        "operationId": "getOauthJwks",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/logout": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 Logout endpoint",
        "description": "Revoke access token and perform logout",
        "operationId": "postOauthLogout",
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "Token to revoke",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/par": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Pushed Authorization Request endpoint",
        "description": "Handle Pushed Authorization Requests according to RFC 9126",
        "operationId": "postOauthPar",
        "parameters": [
          {
            "name": "client_id",
            "in": "formData",
            "description": "OAuth client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "formData",
            "description": "OAuth response type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "formData",
            "description": "Requested scopes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge",
            "in": "formData",
            "description": "PKCE code challenge",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/personal-access-tokens": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get personal access tokens",
        "description": "Get all personal access tokens for the authenticated user",
        "operationId": "getOauthPersonal-Access-Tokens",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      },
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Create personal access token",
        "description": "Create a personal access token for the authenticated user",
        "operationId": "postOauthPersonal-Access-Tokens",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/personal-access-tokens/{id}": {
      "delete": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Revoke personal access token",
        "description": "Revoke a personal access token",
        "operationId": "deleteOauthPersonal-Access-TokensbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Token ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/resources": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get registered resource servers",
        "description": "Returns list of registered OAuth2 resource servers for Resource Indicators",
        "operationId": "getOauthResources",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Register OAuth2 resource server",
        "description": "Register a new OAuth2 resource server for Resource Indicators",
        "operationId": "postOauthResources",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/revoke": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 token revocation",
        "description": "Revoke an OAuth2 token",
        "operationId": "postOauthRevoke",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/token": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 token endpoint",
        "description": "Handle OAuth2 token requests for various grant types",
        "operationId": "postOauthToken",
        "parameters": [
          {
            "name": "grant_type",
            "in": "formData",
            "description": "Grant type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "formData",
            "description": "Client secret",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_assertion_type",
            "in": "formData",
            "description": "Client assertion type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/token-binding/info": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get token binding information",
        "description": "Extract token binding information from HTTP request",
        "operationId": "getOauthToken-BindingInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/token-binding/validate": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Validate token binding",
        "description": "Validate token binding according to RFC 8473",
        "operationId": "postOauthToken-BindingValidate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/token/exchange": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 token exchange endpoint",
        "description": "Handle OAuth2 token exchange requests",
        "operationId": "postOauthTokenExchange",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/tokeninfo": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 Token Info endpoint",
        "description": "Get information about an access token",
        "operationId": "getOauthTokeninfo",
        "parameters": [
          {
            "name": "access_token",
            "in": "query",
            "description": "Access token to inspect",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/userinfo": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OpenID Connect UserInfo endpoint",
        "description": "Get user information using access token with Google-like claim handling",
        "operationId": "getOauthUserinfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Get all organizations",
        "description": "Retrieve a list of all organizations with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getOrganizations",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): tenant,parent,children,users,departments,teams,projects",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Create organization",
        "description": "Create a new organization",
        "operationId": "postOrganizations",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/job-analytics": {
      "get": {
        "tags": [
          "user-job-management"
        ],
        "summary": "Get job analytics",
        "description": "Get comprehensive job analytics and reporting for an organization",
        "operationId": "getOrganizationsJob-Analytics",
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "distribution"
            }
          },
          {
            "name": "time_range",
            "in": "query",
            "description": "Time range in days for time-based reports",
            "required": false,
            "schema": {
              "type": "int",
              "default": "365"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Get organization by ID",
        "description": "Retrieve a specific organization by its ID",
        "operationId": "getOrganizationsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "organizations"
        ],
        "summary": "Update organization",
        "description": "Update an existing organization",
        "operationId": "putOrganizationsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "organizations"
        ],
        "summary": "Delete organization",
        "description": "Delete an organization",
        "operationId": "deleteOrganizationsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/hierarchy": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Get organization hierarchy",
        "description": "Retrieve the organization hierarchy (parents and subsidiaries)",
        "operationId": "getOrganizationsbyIdHierarchy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/projects/{project_id}/milestones": {
      "get": {
        "tags": [
          "milestones"
        ],
        "summary": "Get all milestones",
        "description": "Retrieve a list of all milestones in a project",
        "operationId": "getOrganizationsbyIdProjectsbyProject_idMilestones",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "milestones"
        ],
        "summary": "Create a new milestone",
        "description": "Create a new milestone in a project",
        "operationId": "postOrganizationsbyIdProjectsbyProject_idMilestones",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/projects/{project_id}/task-boards": {
      "get": {
        "tags": [
          "task-boards"
        ],
        "summary": "Get all task boards",
        "description": "Retrieve a list of all task boards in a project",
        "operationId": "getOrganizationsbyIdProjectsbyProject_idTask-Boards",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "task-boards"
        ],
        "summary": "Create a new task board",
        "description": "Create a new task board in a project",
        "operationId": "postOrganizationsbyIdProjectsbyProject_idTask-Boards",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/projects/{project_id}/task-labels": {
      "get": {
        "tags": [
          "task-labels"
        ],
        "summary": "Get all task labels",
        "description": "Retrieve a list of all task labels in a project",
        "operationId": "getOrganizationsbyIdProjectsbyProject_idTask-Labels",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "task-labels"
        ],
        "summary": "Create a new task label",
        "description": "Create a new task label in a project",
        "operationId": "postOrganizationsbyIdProjectsbyProject_idTask-Labels",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/projects/{project_id}/tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get all tasks",
        "description": "Retrieve a list of all tasks in a project with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getOrganizationsbyIdProjectsbyProject_idTasks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): assignee,creator,project,organization,milestone,labels,comments,activities",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Create a new task",
        "description": "Create a new task in a project",
        "operationId": "postOrganizationsbyIdProjectsbyProject_idTasks",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/projects/{project_id}/tasks/{task_id}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get a specific task by ID",
        "description": "Retrieve a specific task by its ID",
        "operationId": "getOrganizationsbyIdProjectsbyProject_idTasksbyTask_id",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Update a task",
        "description": "Update an existing task",
        "operationId": "putOrganizationsbyIdProjectsbyProject_idTasksbyTask_id",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete a task",
        "description": "Delete an existing task",
        "operationId": "deleteOrganizationsbyIdProjectsbyProject_idTasksbyTask_id",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/stats": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Get organization statistics",
        "description": "Retrieve statistics for an organization",
        "operationId": "getOrganizationsbyIdStats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/users": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Get organization users",
        "description": "Retrieve users in an organization",
        "operationId": "getOrganizationsbyIdUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "10"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filter by user role",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status",
            "required": false,
            "schema": {
              "type": "bool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Add user to organization",
        "description": "Add a user to an organization",
        "operationId": "postOrganizationsbyIdUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "organizations"
        ],
        "summary": "Remove user from organization",
        "description": "Remove a user from an organization",
        "operationId": "deleteOrganizationsbyIdUsersbyUser_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/verify": {
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Verify organization",
        "description": "Mark an organization as verified",
        "operationId": "postOrganizationsbyIdVerify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/departments": {
      "get": {
        "tags": [
          "departments"
        ],
        "summary": "Get all departments",
        "description": "Retrieve a list of all departments in an organization with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getOrganizationsbyOrganization_idDepartments",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): organization,parent,children,users,teams",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "departments"
        ],
        "summary": "Create a new department",
        "description": "Create a new department in an organization",
        "operationId": "postOrganizationsbyOrganization_idDepartments",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/departments/{id}": {
      "get": {
        "tags": [
          "departments"
        ],
        "summary": "Get a specific department by ID",
        "description": "Retrieve a specific department by its ID",
        "operationId": "getOrganizationsbyOrganization_idDepartmentsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "departments"
        ],
        "summary": "Update a department",
        "description": "Update an existing department",
        "operationId": "putOrganizationsbyOrganization_idDepartmentsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "departments"
        ],
        "summary": "Delete a department",
        "description": "Delete an existing department",
        "operationId": "deleteOrganizationsbyOrganization_idDepartmentsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/departments/{id}/users": {
      "get": {
        "tags": [
          "departments"
        ],
        "summary": "Get department users",
        "description": "Retrieve users in a specific department",
        "operationId": "getOrganizationsbyOrganization_idDepartmentsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by name or email",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "departments"
        ],
        "summary": "Add user to department",
        "description": "Add a user to a specific department",
        "operationId": "postOrganizationsbyOrganization_idDepartmentsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/departments/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "departments"
        ],
        "summary": "Remove user from department",
        "description": "Remove a user from a specific department",
        "operationId": "deleteOrganizationsbyOrganization_idDepartmentsbyIdUsersbyUser_id",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get all projects",
        "description": "Retrieve a list of all projects in an organization with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getOrganizationsbyOrganization_idProjects",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): organization,teams,users,tasks,milestones",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new project",
        "description": "Create a new project in an organization",
        "operationId": "postOrganizationsbyOrganization_idProjects",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific project by ID",
        "description": "Retrieve a specific project by its ID",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update a project",
        "description": "Update an existing project",
        "operationId": "putOrganizationsbyOrganization_idProjectsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a project",
        "description": "Delete an existing project",
        "operationId": "deleteOrganizationsbyOrganization_idProjectsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{id}/teams": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get project teams",
        "description": "Retrieve teams in a specific project",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyIdTeams",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by name or description",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Add team to project",
        "description": "Add a team to a specific project",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyIdTeams",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{id}/teams/{team_id}": {
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Remove team from project",
        "description": "Remove a team from a specific project",
        "operationId": "deleteOrganizationsbyOrganization_idProjectsbyIdTeamsbyTeam_id",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{id}/users": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get project users",
        "description": "Retrieve users in a specific project",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by name or email",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Add user to project",
        "description": "Add a user to a specific project",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Remove user from project",
        "description": "Remove a user from a specific project",
        "operationId": "deleteOrganizationsbyOrganization_idProjectsbyIdUsersbyUser_id",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/custom-fields": {
      "get": {
        "tags": [
          "project-custom-fields"
        ],
        "summary": "Get all project custom fields",
        "description": "Retrieve a list of all custom fields for a project",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyProject_idCustom-Fields",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by field type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "project-custom-fields"
        ],
        "summary": "Create a new custom field",
        "description": "Create a new custom field for a project",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyProject_idCustom-Fields",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Field data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/custom-fields/reorder": {
      "post": {
        "tags": [
          "project-custom-fields"
        ],
        "summary": "Reorder custom fields",
        "description": "Update the position of multiple custom fields",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyProject_idCustom-FieldsReorder",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Field positions map",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/custom-fields/{id}": {
      "get": {
        "tags": [
          "project-custom-fields"
        ],
        "summary": "Get a specific custom field by ID",
        "description": "Retrieve a specific custom field by its ID",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyProject_idCustom-FieldsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Field ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "project-custom-fields"
        ],
        "summary": "Update a custom field",
        "description": "Update an existing custom field",
        "operationId": "putOrganizationsbyOrganization_idProjectsbyProject_idCustom-FieldsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Field ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project-custom-fields"
        ],
        "summary": "Delete a custom field",
        "description": "Delete an existing custom field",
        "operationId": "deleteOrganizationsbyOrganization_idProjectsbyProject_idCustom-FieldsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Field ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/insights": {
      "get": {
        "tags": [
          "project-insights"
        ],
        "summary": "Get project insights",
        "description": "Retrieve insights and analytics for a project",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyProject_idInsights",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by insight type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date filter (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/insights/burndown": {
      "get": {
        "tags": [
          "project-insights"
        ],
        "summary": "Get burndown insights",
        "description": "Get burndown chart data for a project",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyProject_idInsightsBurndown",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Period (daily, weekly, monthly, quarterly)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "weekly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/insights/distribution": {
      "get": {
        "tags": [
          "project-insights"
        ],
        "summary": "Get task distribution insights",
        "description": "Get task distribution analytics for a project",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyProject_idInsightsDistribution",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Period (daily, weekly, monthly, quarterly)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "weekly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/insights/generate": {
      "post": {
        "tags": [
          "project-insights"
        ],
        "summary": "Generate project insights",
        "description": "Generate new insights and analytics for a project",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyProject_idInsightsGenerate",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Generation parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/insights/summary": {
      "get": {
        "tags": [
          "project-insights"
        ],
        "summary": "Get project summary",
        "description": "Get a summary of key project metrics and statistics",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyProject_idInsightsSummary",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/insights/velocity": {
      "get": {
        "tags": [
          "project-insights"
        ],
        "summary": "Get velocity insights",
        "description": "Get velocity insights for a project",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyProject_idInsightsVelocity",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Period (daily, weekly, monthly, quarterly)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "weekly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/tasks/{task_id}/fields": {
      "get": {
        "tags": [
          "project-custom-fields"
        ],
        "summary": "Get task field values",
        "description": "Get all custom field values for a task",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyProject_idTasksbyTask_idFields",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/tasks/{task_id}/fields/{field_id}": {
      "post": {
        "tags": [
          "project-custom-fields"
        ],
        "summary": "Set task field value",
        "description": "Set a custom field value for a task",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyProject_idTasksbyTask_idFieldsbyField_id",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Field value",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/views": {
      "get": {
        "tags": [
          "project-views"
        ],
        "summary": "Get all project views",
        "description": "Retrieve a list of all views for a project",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyProject_idViews",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by view type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "project-views"
        ],
        "summary": "Create a new project view",
        "description": "Create a new view for a project",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyProject_idViews",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "View data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/views/{id}": {
      "get": {
        "tags": [
          "project-views"
        ],
        "summary": "Get a specific project view by ID",
        "description": "Retrieve a specific project view by its ID",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyProject_idViewsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "project-views"
        ],
        "summary": "Update a project view",
        "description": "Update an existing project view",
        "operationId": "putOrganizationsbyOrganization_idProjectsbyProject_idViewsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project-views"
        ],
        "summary": "Delete a project view",
        "description": "Delete an existing project view",
        "operationId": "deleteOrganizationsbyOrganization_idProjectsbyProject_idViewsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/views/{id}/duplicate": {
      "post": {
        "tags": [
          "project-views"
        ],
        "summary": "Duplicate a project view",
        "description": "Create a copy of an existing project view",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyProject_idViewsbyIdDuplicate",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{project_id}/views/{id}/set-default": {
      "post": {
        "tags": [
          "project-views"
        ],
        "summary": "Set default project view",
        "description": "Set a view as the default for a project",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyProject_idViewsbyIdSet-Default",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "View ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/teams": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Get all teams",
        "description": "Retrieve a list of all teams in an organization with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getOrganizationsbyOrganization_idTeams",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): organization,department,users,projects",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "teams"
        ],
        "summary": "Create a new team",
        "description": "Create a new team in an organization",
        "operationId": "postOrganizationsbyOrganization_idTeams",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/teams/{id}": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Get a specific team by ID",
        "description": "Retrieve a specific team by its ID",
        "operationId": "getOrganizationsbyOrganization_idTeamsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "teams"
        ],
        "summary": "Update a team",
        "description": "Update an existing team",
        "operationId": "putOrganizationsbyOrganization_idTeamsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "teams"
        ],
        "summary": "Delete a team",
        "description": "Delete an existing team",
        "operationId": "deleteOrganizationsbyOrganization_idTeamsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/teams/{id}/users": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Get team users",
        "description": "Retrieve users in a specific team",
        "operationId": "getOrganizationsbyOrganization_idTeamsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by name or email",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "teams"
        ],
        "summary": "Add user to team",
        "description": "Add a user to a specific team",
        "operationId": "postOrganizationsbyOrganization_idTeamsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/teams/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "teams"
        ],
        "summary": "Remove user from team",
        "description": "Remove a user from a specific team",
        "operationId": "deleteOrganizationsbyOrganization_idTeamsbyIdUsersbyUser_id",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/permissions": {
      "get": {
        "tags": [
          "permissions"
        ],
        "summary": "Get all permissions",
        "description": "Retrieve a list of all permissions for the current tenant with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getPermissions",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): roles,users,tenant",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "permissions"
        ],
        "summary": "Create a new permission",
        "description": "Create a new permission for a tenant",
        "operationId": "postPermissions",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/permissions/{id}": {
      "get": {
        "tags": [
          "permissions"
        ],
        "summary": "Get a specific permission",
        "description": "Retrieve a single permission by its ID",
        "operationId": "getPermissionsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Permission ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "permissions"
        ],
        "summary": "Update an existing permission",
        "description": "Update a permission by its ID",
        "operationId": "putPermissionsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Permission ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "permissions"
        ],
        "summary": "Delete a permission",
        "description": "Delete a permission by its ID",
        "operationId": "deletePermissionsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Permission ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/provinces": {
      "get": {
        "tags": [
          "provinces"
        ],
        "summary": "Get all provinces",
        "description": "Retrieve a list of all provinces with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getProvinces",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): country,cities,cities.districts",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "provinces"
        ],
        "summary": "Create a new province",
        "description": "Create a new province with the provided information",
        "operationId": "postProvinces",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/provinces/{id}": {
      "get": {
        "tags": [
          "provinces"
        ],
        "summary": "Get province by ID",
        "description": "Retrieve a specific province by their ID",
        "operationId": "getProvincesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Province ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "provinces"
        ],
        "summary": "Update a province",
        "description": "Update an existing province with the provided information",
        "operationId": "putProvincesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Province ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "provinces"
        ],
        "summary": "Delete a province",
        "description": "Remove a province from the system",
        "operationId": "deleteProvincesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Province ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/provinces/{id}/cities": {
      "get": {
        "tags": [
          "provinces"
        ],
        "summary": "Get cities by province",
        "description": "Retrieve all cities for a specific province",
        "operationId": "getProvincesbyIdCities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Province ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get all roles",
        "description": "Retrieve a list of all roles for the current tenant with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getRoles",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): permissions,users,tenant",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Create a new role",
        "description": "Create a new role for a tenant",
        "operationId": "postRoles",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get a specific role by ID",
        "description": "Retrieve a single role by its ID",
        "operationId": "getRolesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "roles"
        ],
        "summary": "Update a role by ID",
        "description": "Update an existing role by its ID",
        "operationId": "putRolesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Delete a role by ID",
        "description": "Delete a role by its ID",
        "operationId": "deleteRolesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/roles/{id}/permissions": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get all permissions for a role",
        "description": "Retrieve all permissions associated with a specific role",
        "operationId": "getRolesbyIdPermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Assign a permission to a role",
        "description": "Assign a permission to a specific role",
        "operationId": "postRolesbyIdPermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/roles/{id}/permissions/{permission_id}": {
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Revoke a permission from a role",
        "description": "Revoke a permission from a specific role",
        "operationId": "deleteRolesbyIdPermissionsbyPermission_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/templates": {
      "get": {
        "tags": [
          "project-templates"
        ],
        "summary": "Get all project templates",
        "description": "Retrieve a list of all project templates with filtering",
        "operationId": "getTemplates",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Filter by template category",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_featured",
            "in": "query",
            "description": "Filter by featured status",
            "required": false,
            "schema": {
              "type": "bool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "project-templates"
        ],
        "summary": "Create a new project template",
        "description": "Create a new project template",
        "operationId": "postTemplates",
        "requestBody": {
          "description": "Template data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/templates/category/{category}": {
      "get": {
        "tags": [
          "project-templates"
        ],
        "summary": "Get templates by category",
        "description": "Retrieve templates filtered by category",
        "operationId": "getTemplatesCategorybyCategory",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "description": "Template category",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/templates/featured": {
      "get": {
        "tags": [
          "project-templates"
        ],
        "summary": "Get featured templates",
        "description": "Retrieve a list of featured project templates",
        "operationId": "getTemplatesFeatured",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/templates/{id}": {
      "get": {
        "tags": [
          "project-templates"
        ],
        "summary": "Get a specific template by ID",
        "description": "Retrieve a specific project template by its ID",
        "operationId": "getTemplatesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "project-templates"
        ],
        "summary": "Update a project template",
        "description": "Update an existing project template",
        "operationId": "putTemplatesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project-templates"
        ],
        "summary": "Delete a project template",
        "description": "Delete an existing project template",
        "operationId": "deleteTemplatesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/templates/{id}/use": {
      "post": {
        "tags": [
          "project-templates"
        ],
        "summary": "Create project from template",
        "description": "Create a new project using an existing template",
        "operationId": "postTemplatesbyIdUse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/tenants": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get all tenants",
        "description": "Retrieve a list of all tenants with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getTenants",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): users,roles",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Create a new tenant",
        "description": "Create a new tenant with the provided data",
        "operationId": "postTenants",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/tenants/{id}": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get a specific tenant by ID",
        "description": "Retrieve a single tenant by its unique identifier",
        "operationId": "getTenantsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "tenants"
        ],
        "summary": "Update an existing tenant",
        "description": "Update an existing tenant by its unique identifier",
        "operationId": "putTenantsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tenants"
        ],
        "summary": "Delete a tenant",
        "description": "Delete a tenant by its unique identifier",
        "operationId": "deleteTenantsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/tenants/{id}/users": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get all users for a specific tenant",
        "description": "Retrieve a list of all users associated with a tenant",
        "operationId": "getTenantsbyIdUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Add a user to a tenant",
        "description": "Add a user to a tenant by their unique identifier",
        "operationId": "postTenantsbyIdUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/tenants/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "tenants"
        ],
        "summary": "Remove a user from a tenant",
        "description": "Remove a user from a tenant by their unique identifier",
        "operationId": "deleteTenantsbyIdUsersbyUser_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all users",
        "description": "Retrieve a list of all users with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): roles,permissions,tenant",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a new user",
        "description": "Create a new user with the provided information",
        "operationId": "postUsers",
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID",
        "operationId": "getUsersbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update a user",
        "description": "Update an existing user's information",
        "operationId": "putUsersbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a user",
        "description": "Delete a user by their ID",
        "operationId": "deleteUsersbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}/roles": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user's roles",
        "description": "Retrieve all roles associated with a user in a specific tenant",
        "operationId": "getUsersbyIdRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Assign role to user",
        "description": "Assign a specific role to a user in a tenant",
        "operationId": "postUsersbyIdRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}/roles/{role_id}": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Revoke role from user",
        "description": "Remove a specific role from a user in a tenant",
        "operationId": "deleteUsersbyIdRolesbyRole_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant_id",
            "in": "query",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}/tenants": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user's tenants",
        "description": "Retrieve all tenants associated with a user",
        "operationId": "getUsersbyIdTenants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{user_id}/career-progression": {
      "get": {
        "tags": [
          "user-job-management"
        ],
        "summary": "Get user career progression",
        "description": "Get detailed career progression information for a user",
        "operationId": "getUsersbyUser_idCareer-Progression",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{user_id}/job-assignment": {
      "post": {
        "tags": [
          "user-job-management"
        ],
        "summary": "Assign user to job position",
        "description": "Assign a user to a specific job position within an organization",
        "operationId": "postUsersbyUser_idJob-Assignment",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{user_id}/promote": {
      "post": {
        "tags": [
          "user-job-management"
        ],
        "summary": "Promote user",
        "description": "Promote a user to a higher job level or position",
        "operationId": "postUsersbyUser_idPromote",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "APIResponse": {
        "type": "object",
        "description": "APIResponse model",
        "properties": {
          "Data": {
            "type": "string"
          },
          "Error": {
            "type": "string"
          },
          "Message": {
            "type": "string",
            "example": "Operation completed successfully"
          },
          "Status": {
            "type": "string",
            "example": "success"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "ActivityLog": {
        "type": "object",
        "description": "ActivityLog model",
        "properties": {
          "Category": {
            "type": "string",
            "example": "authentication"
          },
          "CauserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "CauserType": {
            "type": "string",
            "example": "User"
          },
          "CauserUser": {
            "type": "string",
            "description": "User who performed the action (if causer is a user)",
            "nullable": true
          },
          "ComplianceFlags": {
            "type": "string",
            "example": "{\"gdpr\": true, \"hipaa\": false}"
          },
          "Description": {
            "type": "string",
            "example": "User logged in successfully"
          },
          "DeviceInfo": {
            "type": "string",
            "example": "{\"type\": \"desktop\", \"os\": \"Windows\"}"
          },
          "Duration": {
            "type": "integer",
            "example": "150"
          },
          "EventTimestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "GeoLocation": {
            "type": "string",
            "example": "{\"country\": \"US\", \"city\": \"New York\"}"
          },
          "IPAddress": {
            "type": "string",
            "example": "192.168.1.1"
          },
          "LogName": {
            "type": "string",
            "example": "user_login"
          },
          "Properties": {
            "type": "string",
            "example": "{\"previous_value\":\"old\",\"new_value\":\"new\"}"
          },
          "RequestID": {
            "type": "string",
            "example": "req_abc123"
          },
          "RequestMethod": {
            "type": "string",
            "example": "POST"
          },
          "RequestPath": {
            "type": "string",
            "example": "/api/v1/users"
          },
          "RiskScore": {
            "type": "integer",
            "example": "25"
          },
          "SessionID": {
            "type": "string",
            "example": "session_abc123"
          },
          "Severity": {
            "type": "string",
            "example": "medium"
          },
          "Status": {
            "type": "string",
            "example": "success"
          },
          "StatusCode": {
            "type": "integer",
            "example": "200"
          },
          "SubjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "SubjectType": {
            "type": "string",
            "example": "User"
          },
          "SubjectUser": {
            "type": "string",
            "description": "User who is the subject of the action (if subject is a user)",
            "nullable": true
          },
          "Tags": {
            "type": "string",
            "example": "[\"login\", \"success\", \"mobile\"]"
          },
          "Tenant": {
            "type": "string",
            "description": "Tenant this activity belongs to",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ThreatLevel": {
            "type": "string",
            "example": "low"
          },
          "UserAgent": {
            "type": "string",
            "example": "Mozilla/5.0..."
          }
        }
      },
      "ActivityLogger": {
        "type": "object",
        "description": "ActivityLogger model"
      },
      "AddMemberRequest": {
        "type": "object",
        "description": "AddMemberRequest model",
        "properties": {
          "Role": {
            "type": "string"
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "AddParticipantRequest": {
        "type": "object",
        "description": "AddParticipantRequest model",
        "properties": {
          "IsRequired": {
            "type": "boolean",
            "example": "true"
          },
          "Role": {
            "type": "string",
            "example": "attendee"
          },
          "SendReminder": {
            "type": "boolean",
            "example": "true"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        },
        "required": [
          "UserID"
        ]
      },
      "AddReactionRequest": {
        "type": "object",
        "description": "AddReactionRequest model",
        "properties": {
          "Emoji": {
            "type": "string",
            "example": "👍"
          }
        }
      },
      "AppPassword": {
        "type": "object",
        "description": "AppPassword model",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresAt": {
            "type": "string",
            "nullable": true
          },
          "ID": {
            "type": "string"
          },
          "LastUsedAt": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "ApproveParticipantRequest": {
        "type": "object",
        "description": "ApproveParticipantRequest model",
        "properties": {
          "Message": {
            "type": "string"
          },
          "ParticipantID": {
            "type": "string"
          }
        }
      },
      "AssignPermissionRequest": {
        "type": "object",
        "description": "AssignPermissionRequest model",
        "properties": {
          "PermissionIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "PermissionIDs"
        ]
      },
      "AssignRoleRequest": {
        "type": "object",
        "description": "AssignRoleRequest model",
        "properties": {
          "RoleID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        },
        "required": [
          "RoleID",
          "TenantID"
        ]
      },
      "AttachmentDownload": {
        "type": "object",
        "description": "AttachmentDownload model",
        "properties": {
          "Attachment": {
            "type": "string",
            "description": "Associated attachment",
            "nullable": true
          },
          "AttachmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "DownloadMethod": {
            "type": "string",
            "example": "\"direct\""
          },
          "DownloadSuccessful": {
            "type": "boolean",
            "example": "true"
          },
          "DownloadedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "FileSizeAtDownload": {
            "type": "integer",
            "example": "1048576"
          },
          "IPAddress": {
            "type": "string",
            "example": "\"192.168.1.100\""
          },
          "User": {
            "type": "string",
            "description": "User who downloaded",
            "nullable": true
          },
          "UserAgent": {
            "type": "string",
            "example": "\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\""
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "AttachmentPermission": {
        "type": "object",
        "description": "AttachmentPermission model",
        "properties": {
          "Attachment": {
            "type": "string",
            "description": "Associated attachment",
            "nullable": true
          },
          "AttachmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "IsGranted": {
            "type": "boolean",
            "example": "true"
          },
          "Permission": {
            "type": "string",
            "example": "\"download\""
          },
          "Source": {
            "type": "string",
            "example": "\"inherited\""
          },
          "User": {
            "type": "string",
            "description": "User with permission",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "AttachmentSummary": {
        "type": "object",
        "description": "AttachmentSummary model",
        "properties": {
          "ActiveShareLinks": {
            "type": "integer"
          },
          "AttachmentsByType": {
            "type": "string"
          },
          "EventID": {
            "type": "string"
          },
          "MostDownloaded": {
            "type": "string",
            "nullable": true
          },
          "RecentUploads": {
            "type": "integer"
          },
          "TotalAttachments": {
            "type": "integer"
          },
          "TotalSize": {
            "type": "integer"
          }
        }
      },
      "BaseModel": {
        "type": "object",
        "description": "BaseModel model",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "CreatedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Creator": {
            "type": "string",
            "description": "Event creator",
            "nullable": true
          },
          "DeletedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "DeletedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Deleter": {
            "type": "string",
            "nullable": true
          },
          "ID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "UpdatedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Updater": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BreakoutRoomParticipant": {
        "type": "object",
        "description": "BreakoutRoomParticipant model",
        "properties": {
          "AssignmentType": {
            "type": "string",
            "example": "manual"
          },
          "BreakoutRoom": {
            "type": "string",
            "description": "Associated breakout room",
            "nullable": true
          },
          "BreakoutRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "DurationSeconds": {
            "type": "integer",
            "example": "1680"
          },
          "JoinedAt": {
            "type": "string",
            "example": "2024-01-15T10:31:00Z",
            "nullable": true
          },
          "LeftAt": {
            "type": "string",
            "example": "2024-01-15T10:59:00Z",
            "nullable": true
          },
          "MeetingParticipant": {
            "type": "string",
            "description": "Associated meeting participant",
            "nullable": true
          },
          "MeetingParticipantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Status": {
            "type": "string",
            "example": "joined"
          }
        }
      },
      "BulkDeleteEventsRequest": {
        "type": "object",
        "description": "BulkDeleteEventsRequest model",
        "properties": {
          "DeleteSeries": {
            "type": "boolean",
            "example": "false"
          },
          "EventIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          },
          "Reason": {
            "type": "string",
            "example": "Meeting cancelled due to schedule conflicts"
          }
        },
        "required": [
          "EventIDs"
        ]
      },
      "BulkOperationRequest": {
        "type": "object",
        "description": "BulkOperationRequest model",
        "properties": {
          "MeetingIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Operation": {
            "type": "string"
          },
          "Parameters": {
            "type": "string"
          }
        }
      },
      "BulkRescheduleEventsRequest": {
        "type": "object",
        "description": "BulkRescheduleEventsRequest model",
        "properties": {
          "AllowConflicts": {
            "type": "boolean",
            "example": "false"
          },
          "CheckConflicts": {
            "type": "boolean",
            "example": "true"
          },
          "EventIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          },
          "NewEndTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T15:00:00Z"
          },
          "NewStartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T14:00:00Z"
          },
          "Reason": {
            "type": "string",
            "example": "Moved due to room availability"
          },
          "RescheduleSeries": {
            "type": "boolean",
            "example": "false"
          },
          "RescheduleType": {
            "type": "string",
            "example": "offset"
          },
          "TimeOffset": {
            "type": "string",
            "example": "2h"
          }
        },
        "required": [
          "EventIDs",
          "RescheduleType"
        ]
      },
      "BulkUpdateEventsRequest": {
        "type": "object",
        "description": "BulkUpdateEventsRequest model",
        "properties": {
          "EventIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          },
          "TimeAdjustment": {
            "type": "string",
            "nullable": true
          },
          "Updates": {
            "type": "string"
          }
        },
        "required": [
          "EventIDs"
        ]
      },
      "CalendarDelegate": {
        "type": "object",
        "description": "CalendarDelegate model",
        "properties": {
          "AcceptedAt": {
            "type": "string",
            "example": "2024-01-15T10:00:00Z",
            "nullable": true
          },
          "Activities": {
            "type": "array",
            "description": "Delegation activities log",
            "items": {
              "type": "string"
            }
          },
          "AllowedActions": {
            "type": "string",
            "example": "[\"create_events\", \"modify_events\", \"delete_events\", \"respond_to_invitations\"]"
          },
          "CanActOnBehalf": {
            "type": "boolean",
            "example": "true"
          },
          "CanSeePrivateEvents": {
            "type": "boolean",
            "example": "false"
          },
          "Delegate": {
            "type": "string",
            "description": "Delegate user",
            "nullable": true
          },
          "DelegateID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJL"
          },
          "Description": {
            "type": "string",
            "example": "Full calendar management delegation for executive assistant"
          },
          "EndDate": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "NotificationSettings": {
            "type": "string",
            "example": "{\"notify_on_changes\": true, \"daily_summary\": true}"
          },
          "Permission": {
            "type": "string",
            "example": "manage"
          },
          "Principal": {
            "type": "string",
            "description": "Principal user (calendar owner)",
            "nullable": true
          },
          "PrincipalID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ReceiveMeetingCopies": {
            "type": "boolean",
            "example": "true"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T00:00:00Z"
          },
          "Tenant": {
            "type": "string",
            "description": "Associated tenant",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "TimeRestrictions": {
            "type": "string",
            "example": "{\"business_hours_only\": true, \"start_hour\": 8, \"end_hour\": 18}"
          },
          "Title": {
            "type": "string",
            "example": "Executive Assistant Delegation"
          }
        }
      },
      "CalendarEvent": {
        "type": "object",
        "description": "CalendarEvent model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Weekly team sync to discuss project progress"
          },
          "EndTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T11:00:00Z"
          },
          "IsAllDay": {
            "type": "boolean",
            "example": "false"
          },
          "IsRecurring": {
            "type": "boolean",
            "example": "false"
          },
          "Location": {
            "type": "string",
            "example": "Conference Room A"
          },
          "Meeting": {
            "type": "string",
            "description": "Associated meeting details",
            "nullable": true
          },
          "ParentEvent": {
            "type": "string",
            "description": "Parent event for recurring instances",
            "nullable": true
          },
          "ParentEventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Participants": {
            "type": "array",
            "description": "Event participants",
            "items": {
              "type": "string"
            }
          },
          "RecurrenceRule": {
            "type": "string",
            "example": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO"
          },
          "RecurrenceUntil": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "RecurringInstances": {
            "type": "array",
            "description": "Recurring event instances",
            "items": {
              "type": "string"
            }
          },
          "ReminderSettings": {
            "type": "string",
            "example": "{\"email\": 15, \"push\": 30, \"sms\": 60}"
          },
          "RemindersSent": {
            "type": "boolean",
            "example": "false"
          },
          "RemindersSentAt": {
            "type": "string",
            "example": "2024-01-15T09:00:00Z",
            "nullable": true
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:00:00Z"
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "Template": {
            "type": "string",
            "description": "Template used to create this event",
            "nullable": true
          },
          "TemplateID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Tenant": {
            "type": "string",
            "description": "Event's associated tenant",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Timezone": {
            "type": "string",
            "example": "UTC"
          },
          "Title": {
            "type": "string",
            "example": "Team Meeting"
          },
          "Type": {
            "type": "string",
            "example": "meeting"
          }
        }
      },
      "CalendarPermission": {
        "type": "object",
        "description": "CalendarPermission model",
        "properties": {
          "Constraints": {
            "type": "string",
            "example": "{\"time_restrictions\": {\"start\": \"09:00\", \"end\": \"17:00\"}, \"event_types\": [\"meeting\"]}"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "IsGranted": {
            "type": "boolean",
            "example": "true"
          },
          "Permission": {
            "type": "string",
            "example": "edit"
          },
          "ResourceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ResourceType": {
            "type": "string",
            "example": "calendar"
          },
          "Source": {
            "type": "string",
            "example": "shared"
          },
          "SourceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Tenant": {
            "type": "string",
            "description": "Associated tenant",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "User": {
            "type": "string",
            "description": "User with the permission",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "CalendarShare": {
        "type": "object",
        "description": "CalendarShare model",
        "properties": {
          "AcceptedAt": {
            "type": "string",
            "example": "2024-01-15T10:00:00Z",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "Access to John's work schedule for coordination"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "NotificationSettings": {
            "type": "string",
            "example": "{\"email_on_changes\": true, \"push_notifications\": false}"
          },
          "Owner": {
            "type": "string",
            "description": "Calendar owner",
            "nullable": true
          },
          "OwnerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Permission": {
            "type": "string",
            "example": "view"
          },
          "ShareName": {
            "type": "string",
            "example": "John's Work Calendar"
          },
          "SharedEventTypes": {
            "type": "string",
            "example": "[\"meeting\", \"appointment\"]"
          },
          "SharedWith": {
            "type": "string",
            "description": "User with shared access",
            "nullable": true
          },
          "SharedWithID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJL"
          },
          "ShowFreeBusyOnly": {
            "type": "boolean",
            "example": "false"
          },
          "Tenant": {
            "type": "string",
            "description": "Associated tenant",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "TimeRestrictions": {
            "type": "string",
            "example": "{\"start_hour\": 9, \"end_hour\": 17}"
          }
        }
      },
      "ChangePasswordRequest": {
        "type": "object",
        "description": "ChangePasswordRequest model",
        "properties": {
          "CurrentPassword": {
            "type": "string",
            "example": "oldpassword123"
          },
          "NewPassword": {
            "type": "string",
            "example": "newpassword123"
          },
          "NewPasswordConfirmation": {
            "type": "string",
            "example": "newpassword123"
          }
        },
        "required": [
          "CurrentPassword",
          "NewPassword",
          "NewPasswordConfirmation"
        ]
      },
      "ChatInvitation": {
        "type": "object",
        "description": "ChatInvitation model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "InvitedUser": {
            "type": "string",
            "nullable": true
          },
          "InvitedUserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Inviter": {
            "type": "string",
            "nullable": true
          },
          "InviterID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Message": {
            "type": "string",
            "example": "Join our team discussion!"
          },
          "RespondedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "pending"
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "description": "ChatMessage model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "EditedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "EncryptedContent": {
            "type": "string",
            "example": "encrypted_message_data"
          },
          "EncryptionVersion": {
            "type": "integer",
            "example": "1"
          },
          "IsEdited": {
            "type": "boolean",
            "example": "false"
          },
          "Metadata": {
            "type": "string",
            "example": "{\"file_size\": 1024, \"file_name\": \"document.pdf\"}"
          },
          "OriginalContent": {
            "type": "string",
            "example": "original_encrypted_content"
          },
          "ReadBy": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ReplyTo": {
            "type": "string",
            "nullable": true
          },
          "ReplyToID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Sender": {
            "type": "string",
            "nullable": true
          },
          "SenderID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Status": {
            "type": "string",
            "example": "sent"
          },
          "Thread": {
            "type": "string",
            "nullable": true
          },
          "ThreadID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "example": "text"
          }
        }
      },
      "ChatNotificationSettings": {
        "type": "object",
        "description": "ChatNotificationSettings model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "CustomSettings": {
            "type": "string",
            "example": "{\"sound\": \"default\", \"vibration\": true}"
          },
          "DesktopNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "EmailNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "IsMuted": {
            "type": "boolean",
            "example": "false"
          },
          "MentionNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "MuteUntil": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "PushNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "ReactionNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "ThreadNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "ChatRoom": {
        "type": "object",
        "description": "ChatRoom model",
        "properties": {
          "Avatar": {
            "type": "string",
            "example": "https://example.com/avatar.jpg"
          },
          "Description": {
            "type": "string",
            "example": "Main discussion channel for the team"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "LastActivityAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Members": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Name": {
            "type": "string",
            "example": "General Discussion"
          },
          "Tenant": {
            "type": "string",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "group"
          }
        }
      },
      "ChatRoomKey": {
        "type": "object",
        "description": "ChatRoomKey model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "EncryptedKey": {
            "type": "string",
            "example": "encrypted_key_data"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "KeyType": {
            "type": "string",
            "example": "room_key"
          },
          "RotatedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Version": {
            "type": "integer",
            "example": "1"
          }
        }
      },
      "ChatRoomMember": {
        "type": "object",
        "description": "ChatRoomMember model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "LastReadAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "PublicKey": {
            "type": "string",
            "example": "-----BEGIN PUBLIC KEY-----"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "CheckConflictsRequest": {
        "type": "object",
        "description": "CheckConflictsRequest model",
        "properties": {
          "EndTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T11:00:00Z"
          },
          "ExcludeEventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:00:00Z"
          },
          "UserIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "StartTime",
          "EndTime",
          "UserIDs"
        ]
      },
      "City": {
        "type": "object",
        "description": "City model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "LA"
          },
          "Districts": {
            "type": "array",
            "description": "City's districts",
            "items": {
              "type": "string"
            }
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Los Angeles"
          },
          "Province": {
            "type": "string",
            "description": "City's province"
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "Country": {
        "type": "object",
        "description": "Country model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "US"
          },
          "Code3": {
            "type": "string",
            "example": "USA"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "United States"
          },
          "NumericCode": {
            "type": "string",
            "example": "840"
          },
          "Provinces": {
            "type": "array",
            "description": "Country's provinces/states",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateActivityLogRequest": {
        "type": "object",
        "description": "CreateActivityLogRequest model",
        "properties": {
          "CauserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "CauserType": {
            "type": "string",
            "example": "*models.User"
          },
          "Description": {
            "type": "string",
            "example": "User created successfully"
          },
          "LogName": {
            "type": "string",
            "example": "user_management"
          },
          "Properties": {
            "type": "string",
            "example": "{\"ip_address\": \"192.168.1.1\", \"user_agent\": \"Mozilla/5.0...\"}"
          },
          "SubjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "SubjectType": {
            "type": "string",
            "example": "*models.User"
          }
        },
        "required": [
          "Description"
        ]
      },
      "CreateBreakoutRoomsRequest": {
        "type": "object",
        "description": "CreateBreakoutRoomsRequest model",
        "properties": {
          "Rooms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateCalendarEventRequest": {
        "type": "object",
        "description": "CreateCalendarEventRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Weekly team sync to discuss project progress"
          },
          "EndTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T11:00:00Z"
          },
          "IsAllDay": {
            "type": "boolean",
            "example": "false"
          },
          "IsRecurring": {
            "type": "boolean",
            "example": "false"
          },
          "Location": {
            "type": "string",
            "example": "Conference Room A"
          },
          "Meeting": {
            "type": "string",
            "nullable": true
          },
          "ParticipantIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          },
          "RecurrenceRule": {
            "type": "string",
            "example": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO"
          },
          "RecurrenceUntil": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "ReminderSettings": {
            "type": "string",
            "example": "{\"email\": 15, \"push\": 30, \"sms\": 60}"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:00:00Z"
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Timezone": {
            "type": "string",
            "example": "UTC"
          },
          "Title": {
            "type": "string",
            "example": "Team Meeting"
          },
          "Type": {
            "type": "string",
            "example": "meeting"
          }
        },
        "required": [
          "Title",
          "StartTime",
          "EndTime",
          "TenantID"
        ]
      },
      "CreateChatRoomRequest": {
        "type": "object",
        "description": "CreateChatRoomRequest model",
        "properties": {
          "Avatar": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "MemberIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        }
      },
      "CreateCityRequest": {
        "type": "object",
        "description": "CreateCityRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "LA"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Los Angeles"
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        },
        "required": [
          "Name",
          "ProvinceID"
        ]
      },
      "CreateCountryRequest": {
        "type": "object",
        "description": "CreateCountryRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "US"
          },
          "Code3": {
            "type": "string",
            "example": "USA"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "United States"
          },
          "NumericCode": {
            "type": "string",
            "example": "840"
          }
        },
        "required": [
          "Name",
          "Code"
        ]
      },
      "CreateDistrictRequest": {
        "type": "object",
        "description": "CreateDistrictRequest model",
        "properties": {
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Code": {
            "type": "string",
            "example": "DT"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Downtown"
          }
        },
        "required": [
          "Name",
          "CityID"
        ]
      },
      "CreateEventFromTemplateRequest": {
        "type": "object",
        "description": "CreateEventFromTemplateRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#EF4444"
          },
          "CreatedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Description": {
            "type": "string",
            "example": "Sprint 15 planning and retrospective"
          },
          "EndTime": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "IsAllDay": {
            "type": "boolean",
            "example": "false"
          },
          "IsRecurring": {
            "type": "boolean",
            "example": "true"
          },
          "Location": {
            "type": "string",
            "example": "Conference Room B"
          },
          "ParticipantIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          },
          "RecurrenceRule": {
            "type": "string",
            "example": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO"
          },
          "RecurrenceUntil": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "ReminderSettings": {
            "type": "string",
            "example": "{\"email\": 10, \"push\": 15}"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:00:00Z"
          },
          "Timezone": {
            "type": "string",
            "example": "UTC"
          },
          "Title": {
            "type": "string",
            "example": "Team Standup - Sprint 15"
          }
        },
        "required": [
          "StartTime",
          "CreatedBy"
        ]
      },
      "CreateEventTemplateRequest": {
        "type": "object",
        "description": "CreateEventTemplateRequest model",
        "properties": {
          "Category": {
            "type": "string",
            "example": "meeting"
          },
          "DefaultColor": {
            "type": "string",
            "example": "#3B82F6"
          },
          "DefaultDuration": {
            "type": "integer",
            "example": "30"
          },
          "DefaultLocation": {
            "type": "string",
            "example": "Conference Room A"
          },
          "DefaultParticipantRoles": {
            "type": "string",
            "example": "[{\"role\": \"organizer\", \"required\": true}, {\"role\": \"attendee\", \"required\": false}]"
          },
          "DefaultRecurrenceRule": {
            "type": "string",
            "example": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO"
          },
          "DefaultReminderSettings": {
            "type": "string",
            "example": "{\"email\": 15, \"push\": 30}"
          },
          "Description": {
            "type": "string",
            "example": "Standard weekly team standup meeting template"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsPublic": {
            "type": "boolean",
            "example": "false"
          },
          "Name": {
            "type": "string",
            "example": "Weekly Team Standup"
          },
          "Settings": {
            "type": "string",
            "example": "{\"allow_conflicts\": false, \"require_confirmation\": true, \"auto_schedule\": false}"
          },
          "Tags": {
            "type": "string",
            "example": "[\"standup\", \"agile\", \"team\"]"
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "team"
          }
        },
        "required": [
          "Name",
          "DefaultDuration",
          "TenantID"
        ]
      },
      "CreateFolderRequest": {
        "type": "object",
        "description": "CreateFolderRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Important documents folder"
          },
          "Name": {
            "type": "string",
            "example": "My Documents"
          },
          "ParentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          }
        }
      },
      "CreateInvitationRequest": {
        "type": "object",
        "description": "CreateInvitationRequest model",
        "properties": {
          "ExpiresAt": {
            "type": "string"
          },
          "InvitedUserID": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          }
        }
      },
      "CreateMeetingPollRequest": {
        "type": "object",
        "description": "CreateMeetingPollRequest model",
        "properties": {
          "Duration": {
            "type": "integer"
          },
          "IsAnonymous": {
            "type": "boolean"
          },
          "Options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PollType": {
            "type": "string"
          },
          "Question": {
            "type": "string"
          },
          "Settings": {
            "type": "string"
          }
        }
      },
      "CreateMeetingRequest": {
        "type": "object",
        "description": "CreateMeetingRequest model",
        "properties": {
          "AllowJoinBeforeHost": {
            "type": "boolean",
            "example": "true"
          },
          "AttendanceCount": {
            "type": "integer",
            "example": "5"
          },
          "MeetingID": {
            "type": "string",
            "example": "123456789"
          },
          "MeetingMinutes": {
            "type": "string",
            "example": "Key decisions: 1. Project timeline approved 2. Budget increased by 10%"
          },
          "MeetingNotes": {
            "type": "string",
            "example": "Agenda: 1. Project updates 2. Q\u0026A"
          },
          "MeetingType": {
            "type": "string",
            "example": "video"
          },
          "MeetingURL": {
            "type": "string",
            "example": "https://zoom.us/j/123456789"
          },
          "MuteParticipantsOnEntry": {
            "type": "boolean",
            "example": "false"
          },
          "Passcode": {
            "type": "string",
            "example": "123456"
          },
          "Platform": {
            "type": "string",
            "example": "zoom"
          },
          "RecordMeeting": {
            "type": "boolean",
            "example": "false"
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "WaitingRoom": {
            "type": "string",
            "example": "enabled"
          }
        }
      },
      "CreatePermissionRequest": {
        "type": "object",
        "description": "CreatePermissionRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Create new users"
          },
          "Guard": {
            "type": "string",
            "example": "api"
          },
          "Name": {
            "type": "string",
            "example": "users.create"
          }
        },
        "required": [
          "Name"
        ]
      },
      "CreateProvinceRequest": {
        "type": "object",
        "description": "CreateProvinceRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "CA"
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "California"
          }
        },
        "required": [
          "Name",
          "Code",
          "CountryID"
        ]
      },
      "CreateReminderRequest": {
        "type": "object",
        "description": "CreateReminderRequest model",
        "properties": {
          "MinutesBefore": {
            "type": "integer",
            "example": "15"
          },
          "Type": {
            "type": "string",
            "example": "email"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        },
        "required": [
          "UserID",
          "Type",
          "MinutesBefore"
        ]
      },
      "CreateRoleRequest": {
        "type": "object",
        "description": "CreateRoleRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Administrator role with full access"
          },
          "Guard": {
            "type": "string",
            "example": "api"
          },
          "Name": {
            "type": "string",
            "example": "admin"
          }
        },
        "required": [
          "Name"
        ]
      },
      "CreateTenantRequest": {
        "type": "object",
        "description": "CreateTenantRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "A leading technology company"
          },
          "Domain": {
            "type": "string",
            "example": "acme.example.com"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "Settings": {
            "type": "string",
            "example": "{\"theme\": \"dark\", \"timezone\": \"UTC\"}"
          },
          "Slug": {
            "type": "string",
            "example": "acme-corp"
          }
        },
        "required": [
          "Name",
          "Slug"
        ]
      },
      "CreateThreadRequest": {
        "type": "object",
        "description": "CreateThreadRequest model",
        "properties": {
          "Title": {
            "type": "string"
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "description": "CreateUserRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "John Doe"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          }
        },
        "required": [
          "Name",
          "Email",
          "Password"
        ]
      },
      "CreateWhiteboardRequest": {
        "type": "object",
        "description": "CreateWhiteboardRequest model",
        "properties": {
          "Description": {
            "type": "string"
          },
          "IsPublic": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Settings": {
            "type": "string"
          },
          "Template": {
            "type": "string"
          }
        }
      },
      "DelegationActivity": {
        "type": "object",
        "description": "DelegationActivity model",
        "properties": {
          "ActivityType": {
            "type": "string",
            "example": "create_event"
          },
          "Delegation": {
            "type": "string",
            "description": "Associated delegation",
            "nullable": true
          },
          "DelegationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Description": {
            "type": "string",
            "example": "Created meeting \"Weekly Team Sync\" for 2024-01-15 10:00 AM"
          },
          "Event": {
            "type": "string",
            "description": "Related event (if applicable)",
            "nullable": true
          },
          "EventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Metadata": {
            "type": "string",
            "example": "{\"event_title\": \"Weekly Team Sync\", \"participants\": 5, \"duration\": 60}"
          },
          "NotifiedAt": {
            "type": "string",
            "example": "2024-01-15T10:05:00Z",
            "nullable": true
          },
          "PrincipalNotified": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "Department": {
        "type": "object",
        "description": "Department model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "ENG"
          },
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Software engineering and development"
          },
          "Icon": {
            "type": "string",
            "example": "engineering"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Level": {
            "type": "integer",
            "example": "0"
          },
          "Manager": {
            "type": "string",
            "description": "Department manager",
            "nullable": true
          },
          "ManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "Engineering"
          },
          "Organization": {
            "type": "string",
            "description": "Organization this department belongs to",
            "nullable": true
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ParentDepartment": {
            "type": "string",
            "description": "Parent department",
            "nullable": true
          },
          "ParentDepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Path": {
            "type": "string",
            "example": "/01HXYZ123456789ABCDEFGHIJK/01HXYZ123456789ABCDEFGHIJL"
          },
          "SubDepartments": {
            "type": "array",
            "description": "Sub-departments",
            "items": {
              "type": "string"
            }
          },
          "Teams": {
            "type": "array",
            "description": "Teams in this department",
            "items": {
              "type": "string"
            }
          },
          "Users": {
            "type": "array",
            "description": "Users in this department",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DepartmentRequest": {
        "type": "object",
        "description": "DepartmentRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "ENG"
          },
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Software engineering and development"
          },
          "Icon": {
            "type": "string",
            "example": "engineering"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "ManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "Engineering"
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ParentDepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          }
        }
      },
      "DepartmentUserRequest": {
        "type": "object",
        "description": "DepartmentUserRequest model",
        "properties": {
          "Role": {
            "type": "string",
            "example": "member"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "DisableMfaRequest": {
        "type": "object",
        "description": "DisableMfaRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "123456"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          }
        },
        "required": [
          "Password",
          "Code"
        ]
      },
      "District": {
        "type": "object",
        "description": "District model",
        "properties": {
          "City": {
            "type": "string",
            "description": "District's city"
          },
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Code": {
            "type": "string",
            "example": "DT"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Downtown"
          }
        }
      },
      "EditMessageRequest": {
        "type": "object",
        "description": "EditMessageRequest model",
        "properties": {
          "Content": {
            "type": "string"
          }
        }
      },
      "EnableMfaRequest": {
        "type": "object",
        "description": "EnableMfaRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "123456"
          },
          "QrCode": {
            "type": "string",
            "example": "otpauth://totp/Example:alice@google.com?secret=JBSWY3DPEHPK3PXP\u0026issuer=Example"
          },
          "Secret": {
            "type": "string",
            "example": "ABCDEFGHIJKLMNOP"
          }
        },
        "required": [
          "Code"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "description": "ErrorResponse model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "VALIDATION_ERROR"
          },
          "Details": {
            "type": "string"
          },
          "Message": {
            "type": "string",
            "example": "Something went wrong"
          },
          "Status": {
            "type": "string",
            "example": "error"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "EventAttachment": {
        "type": "object",
        "description": "EventAttachment model",
        "properties": {
          "AccessPermissions": {
            "type": "array",
            "description": "Access permissions for this attachment",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string",
            "example": "\"Agenda for Q1 planning meeting with key discussion points\""
          },
          "DisplayName": {
            "type": "string",
            "example": "\"Meeting Agenda - Q1 Planning\""
          },
          "DownloadCount": {
            "type": "integer",
            "example": "15"
          },
          "DownloadHistory": {
            "type": "array",
            "description": "Download history",
            "items": {
              "type": "string"
            }
          },
          "Event": {
            "type": "string",
            "description": "Associated calendar event",
            "nullable": true
          },
          "EventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "FileExtension": {
            "type": "string",
            "example": "\".pdf\""
          },
          "FileHash": {
            "type": "string",
            "example": "\"sha256:a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3\""
          },
          "FileName": {
            "type": "string",
            "example": "\"meeting-agenda.pdf\""
          },
          "FilePath": {
            "type": "string",
            "example": "\"attachments/events/01HXYZ123456789ABCDEFGHIJK/meeting-agenda.pdf\""
          },
          "FileSize": {
            "type": "integer",
            "example": "1048576"
          },
          "IsPublic": {
            "type": "boolean",
            "example": "false"
          },
          "MimeType": {
            "type": "string",
            "example": "\"application/pdf\""
          },
          "Tags": {
            "type": "string",
            "example": "[\"agenda\", \"planning\", \"q1\"]"
          },
          "Tenant": {
            "type": "string",
            "description": "Associated tenant",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "UploadStatus": {
            "type": "string",
            "example": "\"completed\""
          },
          "UploadedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Uploader": {
            "type": "string",
            "description": "User who uploaded the file",
            "nullable": true
          },
          "VirusScanAt": {
            "type": "string",
            "example": "2024-01-15T10:05:00Z",
            "nullable": true
          },
          "VirusScanStatus": {
            "type": "string",
            "example": "\"clean\""
          }
        }
      },
      "EventFilterRequest": {
        "type": "object",
        "description": "EventFilterRequest model",
        "properties": {
          "CreatorID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "EndDate": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "IncludeRecurring": {
            "type": "boolean",
            "example": "true"
          },
          "ParticipantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "StartDate": {
            "type": "string",
            "example": "2024-01-01T00:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "Type": {
            "type": "string",
            "example": "meeting"
          }
        }
      },
      "EventParticipant": {
        "type": "object",
        "description": "EventParticipant model",
        "properties": {
          "Event": {
            "type": "string",
            "description": "Associated event",
            "nullable": true
          },
          "EventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsRequired": {
            "type": "boolean",
            "example": "true"
          },
          "ReminderSentAt": {
            "type": "string",
            "example": "2024-01-15T09:00:00Z",
            "nullable": true
          },
          "RespondedAt": {
            "type": "string",
            "example": "2024-01-15T09:30:00Z",
            "nullable": true
          },
          "ResponseComment": {
            "type": "string",
            "example": "I'll be 5 minutes late"
          },
          "ResponseStatus": {
            "type": "string",
            "example": "pending"
          },
          "Role": {
            "type": "string",
            "example": "attendee"
          },
          "SendReminder": {
            "type": "boolean",
            "example": "true"
          },
          "User": {
            "type": "string",
            "description": "Participant user",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "EventReminder": {
        "type": "object",
        "description": "EventReminder model",
        "properties": {
          "ErrorMessage": {
            "type": "string",
            "example": "Failed to send email"
          },
          "Event": {
            "type": "string",
            "description": "Associated calendar event",
            "nullable": true
          },
          "EventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "MinutesBefore": {
            "type": "integer",
            "example": "15"
          },
          "ScheduledAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T09:45:00Z"
          },
          "Sent": {
            "type": "boolean",
            "example": "false"
          },
          "SentAt": {
            "type": "string",
            "example": "2024-01-15T09:45:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "pending"
          },
          "Type": {
            "type": "string",
            "example": "email"
          },
          "User": {
            "type": "string",
            "description": "User to receive reminder",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "EventSuggestionsRequest": {
        "type": "object",
        "description": "EventSuggestionsRequest model",
        "properties": {
          "Duration": {
            "type": "string",
            "example": "1h30m"
          },
          "EventType": {
            "type": "string",
            "example": "meeting"
          },
          "IncludeWeekends": {
            "type": "boolean",
            "example": "false"
          },
          "MinAvailabilityRate": {
            "type": "number",
            "example": "0.8"
          },
          "ParticipantIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          },
          "PreferredEndTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T17:00:00Z"
          },
          "PreferredStartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T09:00:00Z"
          },
          "PreferredTimezones": {
            "type": "array",
            "example": "[\"America/New_York\", \"Europe/London\"]",
            "items": {
              "type": "string"
            }
          },
          "WorkingHoursEnd": {
            "type": "integer",
            "example": "17"
          },
          "WorkingHoursStart": {
            "type": "integer",
            "example": "9"
          }
        },
        "required": [
          "ParticipantIDs",
          "PreferredStartTime",
          "PreferredEndTime",
          "Duration"
        ]
      },
      "EventTemplate": {
        "type": "object",
        "description": "EventTemplate model",
        "properties": {
          "Category": {
            "type": "string",
            "example": "meeting"
          },
          "DefaultColor": {
            "type": "string",
            "example": "#3B82F6"
          },
          "DefaultDuration": {
            "type": "integer",
            "example": "30"
          },
          "DefaultLocation": {
            "type": "string",
            "example": "Conference Room A"
          },
          "DefaultParticipantRoles": {
            "type": "string",
            "example": "[{\"role\": \"organizer\", \"required\": true}, {\"role\": \"attendee\", \"required\": false}]"
          },
          "DefaultRecurrenceRule": {
            "type": "string",
            "example": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO"
          },
          "DefaultReminderSettings": {
            "type": "string",
            "example": "{\"email\": 15, \"push\": 30}"
          },
          "Description": {
            "type": "string",
            "example": "Standard weekly team standup meeting template"
          },
          "Events": {
            "type": "array",
            "description": "Events created from this template",
            "items": {
              "type": "string"
            }
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsPublic": {
            "type": "boolean",
            "example": "false"
          },
          "LastUsedAt": {
            "type": "string",
            "example": "2024-01-15T10:00:00Z",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "Weekly Team Standup"
          },
          "Settings": {
            "type": "string",
            "example": "{\"allow_conflicts\": false, \"require_confirmation\": true, \"auto_schedule\": false}"
          },
          "Tags": {
            "type": "string",
            "example": "[\"standup\", \"agile\", \"team\"]"
          },
          "Tenant": {
            "type": "string",
            "description": "Template's associated tenant",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "team"
          },
          "UsageCount": {
            "type": "integer",
            "example": "25"
          }
        }
      },
      "ExportCalendarRequest": {
        "type": "object",
        "description": "ExportCalendarRequest model",
        "properties": {
          "EndDate": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-31T23:59:59Z"
          },
          "EventTypes": {
            "type": "array",
            "example": "[\"meeting\", \"appointment\"]",
            "items": {
              "type": "string"
            }
          },
          "IncludeRecurring": {
            "type": "boolean",
            "example": "true"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        },
        "required": [
          "StartDate",
          "EndDate",
          "UserID"
        ]
      },
      "ExportMeetingDataRequest": {
        "type": "object",
        "description": "ExportMeetingDataRequest model",
        "properties": {
          "DateRange": {
            "type": "string"
          },
          "Filters": {
            "type": "string"
          },
          "Format": {
            "type": "string"
          },
          "IncludeSections": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "File": {
        "type": "object",
        "description": "File model",
        "properties": {
          "Activities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Comments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string",
            "example": "Important project document"
          },
          "DownloadCount": {
            "type": "integer",
            "example": "5"
          },
          "Extension": {
            "type": "string",
            "example": "pdf"
          },
          "Folder": {
            "type": "string",
            "nullable": true
          },
          "FolderID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          },
          "Hash": {
            "type": "string",
            "example": "sha256:abc123def456"
          },
          "IsPublic": {
            "type": "boolean",
            "example": "false"
          },
          "IsStarred": {
            "type": "boolean",
            "example": "false"
          },
          "IsTrashed": {
            "type": "boolean",
            "example": "false"
          },
          "LastAccessedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Metadata": {
            "type": "string",
            "example": "{\"width\": 1920, \"height\": 1080}"
          },
          "MimeType": {
            "type": "string",
            "example": "application/pdf"
          },
          "Name": {
            "type": "string",
            "example": "document.pdf"
          },
          "OriginalName": {
            "type": "string",
            "example": "my-document.pdf"
          },
          "Owner": {
            "type": "string",
            "nullable": true
          },
          "OwnerID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "Path": {
            "type": "string",
            "example": "files/2024/01/15/abc123.pdf"
          },
          "Shares": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Size": {
            "type": "integer",
            "example": "1048576"
          },
          "Status": {
            "type": "string",
            "example": "active"
          },
          "StorageProvider": {
            "type": "string",
            "example": "minio"
          },
          "Tags": {
            "type": "string",
            "example": "[\"work\", \"project\", \"important\"]"
          },
          "Tenant": {
            "type": "string",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          },
          "TrashedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Versions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ViewCount": {
            "type": "integer",
            "example": "10"
          },
          "VirusScanResult": {
            "type": "string",
            "example": "No threats detected"
          },
          "VirusScanStatus": {
            "type": "string",
            "example": "clean"
          },
          "VirusScannedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          }
        }
      },
      "FileActivity": {
        "type": "object",
        "description": "FileActivity model",
        "properties": {
          "Action": {
            "type": "string",
            "example": "download"
          },
          "Description": {
            "type": "string",
            "example": "File downloaded"
          },
          "File": {
            "type": "string",
            "nullable": true
          },
          "FileID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "IPAddress": {
            "type": "string",
            "example": "192.168.1.1"
          },
          "Metadata": {
            "type": "string",
            "example": "{\"file_size\": 1048576, \"download_method\": \"direct\"}"
          },
          "Tenant": {
            "type": "string",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserAgent": {
            "type": "string",
            "example": "Mozilla/5.0..."
          },
          "UserID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          }
        }
      },
      "FileComment": {
        "type": "object",
        "description": "FileComment model",
        "properties": {
          "Author": {
            "type": "string",
            "nullable": true
          },
          "AuthorID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "Content": {
            "type": "string",
            "example": "This looks good, but please update the conclusion"
          },
          "File": {
            "type": "string",
            "nullable": true
          },
          "FileID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "IsResolved": {
            "type": "boolean",
            "example": "false"
          },
          "Parent": {
            "type": "string",
            "nullable": true
          },
          "ParentID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          },
          "Position": {
            "type": "string",
            "example": "{\"page\": 1, \"x\": 100, \"y\": 200}"
          },
          "Replies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ResolvedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "ResolvedBy": {
            "type": "string",
            "nullable": true
          },
          "ResolvedByID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          }
        }
      },
      "FileShare": {
        "type": "object",
        "description": "FileShare model",
        "properties": {
          "DownloadCount": {
            "type": "integer",
            "example": "3"
          },
          "DownloadLimit": {
            "type": "integer",
            "example": "10"
          },
          "Email": {
            "type": "string",
            "example": "guest@example.com"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "File": {
            "type": "string",
            "nullable": true
          },
          "FileID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "LastAccessedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "example": "Please review this document"
          },
          "Password": {
            "type": "string",
            "example": "secret123"
          },
          "Permission": {
            "type": "string",
            "example": "edit"
          },
          "RequirePassword": {
            "type": "boolean",
            "example": "false"
          },
          "ShareToken": {
            "type": "string",
            "example": "abc123def456ghi789"
          },
          "ShareType": {
            "type": "string",
            "example": "user"
          },
          "SharedBy": {
            "type": "string",
            "nullable": true
          },
          "SharedByID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "SharedWith": {
            "type": "string",
            "nullable": true
          },
          "SharedWithID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          },
          "ViewCount": {
            "type": "integer",
            "example": "15"
          },
          "ViewLimit": {
            "type": "integer",
            "example": "50"
          }
        }
      },
      "FileUploadRequest": {
        "type": "object",
        "description": "FileUploadRequest model",
        "properties": {
          "FolderID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          }
        }
      },
      "FileVersion": {
        "type": "object",
        "description": "FileVersion model",
        "properties": {
          "Comment": {
            "type": "string",
            "example": "Updated with corrections"
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "CreatedByID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "File": {
            "type": "string",
            "nullable": true
          },
          "FileID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "Hash": {
            "type": "string",
            "example": "sha256:def456abc123"
          },
          "IsCurrent": {
            "type": "boolean",
            "example": "true"
          },
          "Path": {
            "type": "string",
            "example": "files/2024/01/15/abc123_v2.pdf"
          },
          "Size": {
            "type": "integer",
            "example": "1048576"
          },
          "StorageProvider": {
            "type": "string",
            "example": "minio"
          },
          "Version": {
            "type": "integer",
            "example": "2"
          }
        }
      },
      "FilterCondition": {
        "type": "object",
        "description": "Individual filter condition for querybuilder",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name to filter on",
            "example": "name"
          },
          "operator": {
            "type": "string",
            "description": "Comparison operator",
            "example": "LIKE",
            "enum": [
              "=",
              "!=",
              "\u003e",
              "\u003e=",
              "\u003c",
              "\u003c=",
              "LIKE",
              "NOT LIKE",
              "IN",
              "NOT IN",
              "BETWEEN",
              "IS NULL",
              "IS NOT NULL"
            ]
          },
          "value": {
            "description": "Value to compare against",
            "example": "%john%"
          }
        },
        "required": [
          "field",
          "operator"
        ]
      },
      "FilterGroup": {
        "type": "object",
        "description": "Filter group for complex querybuilder filtering",
        "properties": {
          "conditions": {
            "type": "array",
            "description": "Array of filter conditions",
            "items": {
              "$ref": "#/components/schemas/FilterCondition"
            }
          },
          "groups": {
            "type": "array",
            "description": "Nested filter groups",
            "items": {
              "$ref": "#/components/schemas/FilterGroup"
            }
          },
          "operator": {
            "type": "string",
            "description": "Logical operator for combining conditions",
            "example": "AND",
            "enum": [
              "AND",
              "OR"
            ]
          }
        },
        "required": [
          "operator"
        ]
      },
      "Folder": {
        "type": "object",
        "description": "Folder model",
        "properties": {
          "Activities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Children": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Color": {
            "type": "string",
            "example": "#FF5722"
          },
          "Description": {
            "type": "string",
            "example": "Important project documents"
          },
          "Files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "IsPublic": {
            "type": "boolean",
            "example": "false"
          },
          "IsStarred": {
            "type": "boolean",
            "example": "false"
          },
          "IsTrashed": {
            "type": "boolean",
            "example": "false"
          },
          "Level": {
            "type": "integer",
            "example": "2"
          },
          "Name": {
            "type": "string",
            "example": "Documents"
          },
          "Owner": {
            "type": "string",
            "nullable": true
          },
          "OwnerID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "Parent": {
            "type": "string",
            "nullable": true
          },
          "ParentID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          },
          "Path": {
            "type": "string",
            "example": "/Documents/Projects"
          },
          "Shares": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SortOrder": {
            "type": "integer",
            "example": "1"
          },
          "Tenant": {
            "type": "string",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          },
          "TrashedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          }
        }
      },
      "FolderActivity": {
        "type": "object",
        "description": "FolderActivity model",
        "properties": {
          "Action": {
            "type": "string",
            "example": "create"
          },
          "Description": {
            "type": "string",
            "example": "Folder created"
          },
          "Folder": {
            "type": "string",
            "nullable": true
          },
          "FolderID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "IPAddress": {
            "type": "string",
            "example": "192.168.1.1"
          },
          "Metadata": {
            "type": "string",
            "example": "{\"old_name\": \"Old Folder\", \"new_name\": \"New Folder\"}"
          },
          "Tenant": {
            "type": "string",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserAgent": {
            "type": "string",
            "example": "Mozilla/5.0..."
          },
          "UserID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          }
        }
      },
      "FolderShare": {
        "type": "object",
        "description": "FolderShare model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "guest@example.com"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "Folder": {
            "type": "string",
            "nullable": true
          },
          "FolderID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "IncludeSubfolders": {
            "type": "boolean",
            "example": "true"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "LastAccessedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "example": "Please review these documents"
          },
          "Password": {
            "type": "string",
            "example": "secret123"
          },
          "Permission": {
            "type": "string",
            "example": "edit"
          },
          "RequirePassword": {
            "type": "boolean",
            "example": "false"
          },
          "ShareToken": {
            "type": "string",
            "example": "abc123def456ghi789"
          },
          "ShareType": {
            "type": "string",
            "example": "user"
          },
          "SharedBy": {
            "type": "string",
            "nullable": true
          },
          "SharedByID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX"
          },
          "SharedWith": {
            "type": "string",
            "nullable": true
          },
          "SharedWithID": {
            "type": "string",
            "example": "01HQZX1VQZX1VQZX1VQZX1VQZX",
            "nullable": true
          }
        }
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "description": "ForgotPasswordRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          }
        },
        "required": [
          "Email"
        ]
      },
      "GenerateKeyPairRequest": {
        "type": "object",
        "description": "GenerateKeyPairRequest model",
        "properties": {
          "ExpiresAt": {
            "type": "string"
          },
          "KeyType": {
            "type": "string"
          }
        }
      },
      "GeoLocation": {
        "type": "object",
        "description": "GeoLocation model",
        "properties": {
          "ASN": {
            "type": "string",
            "example": "7922"
          },
          "ASNOrg": {
            "type": "string",
            "example": "COMCAST-7922"
          },
          "City": {
            "type": "string",
            "example": "San Francisco"
          },
          "Country": {
            "type": "string",
            "example": "United States"
          },
          "CountryCode": {
            "type": "string",
            "example": "US"
          },
          "ISP": {
            "type": "string",
            "example": "Comcast Cable Communications"
          },
          "IsProxy": {
            "type": "boolean",
            "example": "false"
          },
          "IsTor": {
            "type": "boolean",
            "example": "false"
          },
          "IsVPN": {
            "type": "boolean",
            "example": "false"
          },
          "Latitude": {
            "type": "number",
            "example": "37.7749"
          },
          "Longitude": {
            "type": "number",
            "example": "-122.4194"
          },
          "PostalCode": {
            "type": "string",
            "example": "94102"
          },
          "Region": {
            "type": "string",
            "example": "California"
          },
          "RegionCode": {
            "type": "string",
            "example": "CA"
          },
          "TimeZone": {
            "type": "string",
            "example": "America/Los_Angeles"
          }
        }
      },
      "GetMeetingAnalyticsRequest": {
        "type": "object",
        "description": "GetMeetingAnalyticsRequest model",
        "properties": {
          "EndDate": {
            "type": "string",
            "nullable": true
          },
          "Granularity": {
            "type": "string"
          },
          "IncludeUsers": {
            "type": "boolean"
          },
          "Metrics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "StartDate": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "InviteParticipantsRequest": {
        "type": "object",
        "description": "InviteParticipantsRequest model",
        "properties": {
          "Message": {
            "type": "string"
          },
          "Participants": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SendEmail": {
            "type": "boolean"
          },
          "SendSMS": {
            "type": "boolean"
          }
        }
      },
      "JobLevel": {
        "type": "object",
        "description": "JobLevel model",
        "properties": {
          "Benefits": {
            "type": "string",
            "example": "{\"vacation_days\":25,\"health_insurance\":true}",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "example": "SR",
            "nullable": true
          },
          "Color": {
            "type": "string",
            "example": "#3B82F6",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "example": "USD"
          },
          "Description": {
            "type": "string",
            "example": "Senior level position with advanced responsibilities"
          },
          "Icon": {
            "type": "string",
            "example": "star",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "LevelOrder": {
            "type": "integer",
            "example": "3"
          },
          "MaxSalary": {
            "type": "number",
            "example": "120000.00",
            "nullable": true
          },
          "MinSalary": {
            "type": "number",
            "example": "80000.00",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "Senior"
          },
          "Organization": {
            "type": "string",
            "description": "Organization this job level belongs to",
            "nullable": true
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Requirements": {
            "type": "string",
            "example": "{\"experience_years\":5,\"skills\":[\"leadership\",\"technical\"]}",
            "nullable": true
          }
        }
      },
      "JobPosition": {
        "type": "object",
        "description": "JobPosition model",
        "properties": {
          "Benefits": {
            "type": "string",
            "example": "{\"health_insurance\":true,\"flexible_hours\":true}",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "example": "SWE",
            "nullable": true
          },
          "Color": {
            "type": "string",
            "example": "#10B981",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "example": "USD"
          },
          "Department": {
            "type": "string",
            "description": "Department this position belongs to",
            "nullable": true
          },
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "Develop and maintain web applications using modern technologies"
          },
          "EmploymentType": {
            "type": "string",
            "example": "full_time"
          },
          "FilledCount": {
            "type": "integer",
            "example": "1"
          },
          "Headcount": {
            "type": "integer",
            "example": "2"
          },
          "Icon": {
            "type": "string",
            "example": "code",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsRemote": {
            "type": "boolean",
            "example": "true"
          },
          "JobLevel": {
            "type": "string",
            "description": "Job level this position belongs to",
            "nullable": true
          },
          "JobLevelID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "MaxSalary": {
            "type": "number",
            "example": "100000.00",
            "nullable": true
          },
          "MinSalary": {
            "type": "number",
            "example": "70000.00",
            "nullable": true
          },
          "Organization": {
            "type": "string",
            "description": "Organization this position belongs to",
            "nullable": true
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ReportsToPosition": {
            "type": "string",
            "description": "Position this role reports to",
            "nullable": true
          },
          "ReportsToPositionID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Requirements": {
            "type": "string",
            "example": "{\"skills\":[\"golang\",\"javascript\"],\"experience_years\":3}",
            "nullable": true
          },
          "Responsibilities": {
            "type": "string",
            "example": "{\"primary\":[\"coding\",\"testing\"],\"secondary\":[\"mentoring\"]}",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "example": "Software Engineer"
          }
        }
      },
      "JoinMeetingRequest": {
        "type": "object",
        "description": "JoinMeetingRequest model",
        "properties": {
          "ConnectionID": {
            "type": "string"
          },
          "DeviceInfo": {
            "type": "string"
          },
          "Passcode": {
            "type": "string"
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "description": "LoginRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "MfaCode": {
            "type": "string",
            "example": "123456"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          },
          "Remember": {
            "type": "boolean",
            "example": "false"
          },
          "WebauthnAssertion": {
            "type": "string",
            "example": "{\"id\":\"abc123\",\"response\":{\"authenticatorData\":\"...\",\"clientDataJSON\":\"...\",\"signature\":\"...\"}}"
          }
        },
        "required": [
          "Email",
          "Password"
        ]
      },
      "Meeting": {
        "type": "object",
        "description": "Meeting model",
        "properties": {
          "AllowJoinBeforeHost": {
            "type": "boolean",
            "example": "true"
          },
          "AttendanceCount": {
            "type": "integer",
            "example": "5"
          },
          "BreakoutRooms": {
            "type": "array",
            "description": "Meeting breakout rooms",
            "items": {
              "type": "string"
            }
          },
          "ChatMessages": {
            "type": "array",
            "description": "Meeting chat messages",
            "items": {
              "type": "string"
            }
          },
          "ConflictDetails": {
            "type": "string",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]"
          },
          "EndedAt": {
            "type": "string",
            "example": "2024-01-15T11:00:00Z",
            "nullable": true
          },
          "Event": {
            "type": "string",
            "description": "Associated calendar event",
            "nullable": true
          },
          "EventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "HasConflicts": {
            "type": "boolean",
            "example": "false"
          },
          "MeetingID": {
            "type": "string",
            "example": "123456789"
          },
          "MeetingMinutes": {
            "type": "string",
            "example": "Key decisions: 1. Project timeline approved 2. Budget increased by 10%"
          },
          "MeetingNotes": {
            "type": "string",
            "example": "Agenda: 1. Project updates 2. Q\u0026A"
          },
          "MeetingType": {
            "type": "string",
            "example": "video"
          },
          "MeetingURL": {
            "type": "string",
            "example": "https://zoom.us/j/123456789"
          },
          "MuteParticipantsOnEntry": {
            "type": "boolean",
            "example": "false"
          },
          "Participants": {
            "type": "array",
            "description": "Meeting participants",
            "items": {
              "type": "string"
            }
          },
          "Passcode": {
            "type": "string",
            "example": "123456"
          },
          "Platform": {
            "type": "string",
            "example": "zoom"
          },
          "RecordMeeting": {
            "type": "boolean",
            "example": "false"
          },
          "RecordingURL": {
            "type": "string",
            "example": "https://zoom.us/recording/123456789"
          },
          "StartedAt": {
            "type": "string",
            "example": "2024-01-15T10:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "WaitingRoom": {
            "type": "string",
            "example": "enabled"
          }
        }
      },
      "MeetingBreakoutRoom": {
        "type": "object",
        "description": "MeetingBreakoutRoom model",
        "properties": {
          "AllowParticipantsToChoose": {
            "type": "boolean",
            "example": "true"
          },
          "AllowParticipantsToReturn": {
            "type": "boolean",
            "example": "true"
          },
          "AutoAssign": {
            "type": "boolean",
            "example": "false"
          },
          "Capacity": {
            "type": "integer",
            "example": "5"
          },
          "Description": {
            "type": "string",
            "example": "Discussion group for project planning"
          },
          "EndedAt": {
            "type": "string",
            "example": "2024-01-15T11:00:00Z",
            "nullable": true
          },
          "Meeting": {
            "type": "string",
            "description": "Associated meeting",
            "nullable": true
          },
          "MeetingID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Name": {
            "type": "string",
            "example": "Breakout Room 1"
          },
          "Participants": {
            "type": "array",
            "description": "Breakout room participants",
            "items": {
              "type": "string"
            }
          },
          "Settings": {
            "type": "string",
            "example": "{\"allow_chat\": true, \"allow_screen_share\": false, \"auto_close\": true}"
          },
          "StartedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "active"
          },
          "TimeLimitMinutes": {
            "type": "integer",
            "example": "30"
          }
        }
      },
      "MeetingChat": {
        "type": "object",
        "description": "MeetingChat model",
        "properties": {
          "Content": {
            "type": "string",
            "example": "Hello everyone!"
          },
          "EditedAt": {
            "type": "string",
            "example": "2024-01-15T10:15:00Z",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "example": "document.pdf"
          },
          "FileSize": {
            "type": "integer",
            "example": "1024000"
          },
          "FileType": {
            "type": "string",
            "example": "application/pdf"
          },
          "FileURL": {
            "type": "string",
            "example": "https://storage.example.com/files/document.pdf"
          },
          "IsEdited": {
            "type": "boolean",
            "example": "false"
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "false"
          },
          "IsSystem": {
            "type": "boolean",
            "example": "false"
          },
          "Meeting": {
            "type": "string",
            "description": "Associated meeting",
            "nullable": true
          },
          "MeetingID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "MessageType": {
            "type": "string",
            "example": "text"
          },
          "Metadata": {
            "type": "string",
            "example": "{\"reply_to\": \"01HXYZ123456789ABCDEFGHIJK\", \"mentions\": [\"01HXYZ123456789ABCDEFGHIJK\"]}"
          },
          "ReadAt": {
            "type": "string",
            "example": "2024-01-15T10:16:00Z",
            "nullable": true
          },
          "Recipient": {
            "type": "string",
            "description": "Message recipient (for private messages)",
            "nullable": true
          },
          "RecipientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Sender": {
            "type": "string",
            "description": "Message sender",
            "nullable": true
          },
          "SenderID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Status": {
            "type": "string",
            "example": "delivered"
          }
        }
      },
      "MeetingFeedbackRequest": {
        "type": "object",
        "description": "MeetingFeedbackRequest model",
        "properties": {
          "Categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Comment": {
            "type": "string"
          },
          "IsAnonymous": {
            "type": "boolean"
          },
          "Metadata": {
            "type": "string"
          },
          "Rating": {
            "type": "integer"
          },
          "Suggestions": {
            "type": "string"
          },
          "TechnicalIssues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MeetingParticipant": {
        "type": "object",
        "description": "MeetingParticipant model",
        "properties": {
          "BrowserInfo": {
            "type": "string",
            "example": "Chrome/91.0.4472.124"
          },
          "ConnectionID": {
            "type": "string",
            "example": "conn_123456789"
          },
          "ConnectionQuality": {
            "type": "string",
            "example": "{\"latency\": 50, \"bandwidth\": 1000, \"packet_loss\": 0.1}"
          },
          "DeviceType": {
            "type": "string",
            "example": "desktop"
          },
          "DurationSeconds": {
            "type": "integer",
            "example": "3300"
          },
          "IPAddress": {
            "type": "string",
            "example": "192.168.1.100"
          },
          "IsHandRaised": {
            "type": "boolean",
            "example": "false"
          },
          "IsInWaitingRoom": {
            "type": "boolean",
            "example": "false"
          },
          "IsMuted": {
            "type": "boolean",
            "example": "false"
          },
          "IsRecordingConsentGiven": {
            "type": "boolean",
            "example": "true"
          },
          "IsScreenSharing": {
            "type": "boolean",
            "example": "false"
          },
          "IsVideoEnabled": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "example": "2024-01-15T10:05:00Z",
            "nullable": true
          },
          "LeftAt": {
            "type": "string",
            "example": "2024-01-15T11:00:00Z",
            "nullable": true
          },
          "Meeting": {
            "type": "string",
            "description": "Associated meeting",
            "nullable": true
          },
          "MeetingID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Permissions": {
            "type": "string",
            "example": "{\"can_share_screen\": true, \"can_chat\": true, \"can_unmute\": true}"
          },
          "Role": {
            "type": "string",
            "example": "host"
          },
          "Status": {
            "type": "string",
            "example": "joined"
          },
          "User": {
            "type": "string",
            "description": "Participant user",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "MeetingPoll": {
        "type": "object",
        "description": "MeetingPoll model",
        "properties": {
          "AllowMultipleVotes": {
            "type": "boolean"
          },
          "Creator": {
            "type": "string",
            "nullable": true
          },
          "CreatorID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "EndsAt": {
            "type": "string",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsAnonymous": {
            "type": "boolean"
          },
          "Meeting": {
            "type": "string",
            "nullable": true
          },
          "MeetingID": {
            "type": "string"
          },
          "Options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PollType": {
            "type": "string"
          },
          "Settings": {
            "type": "string"
          },
          "StartsAt": {
            "type": "string",
            "nullable": true
          },
          "Title": {
            "type": "string"
          },
          "TotalVotes": {
            "type": "integer"
          },
          "Votes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MeetingPollOption": {
        "type": "object",
        "description": "MeetingPollOption model",
        "properties": {
          "OptionText": {
            "type": "string"
          },
          "OrderIndex": {
            "type": "integer"
          },
          "Poll": {
            "type": "string",
            "nullable": true
          },
          "PollID": {
            "type": "string"
          },
          "VoteCount": {
            "type": "integer"
          },
          "Votes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MeetingPollVote": {
        "type": "object",
        "description": "MeetingPollVote model",
        "properties": {
          "Option": {
            "type": "string",
            "nullable": true
          },
          "OptionID": {
            "type": "string",
            "nullable": true
          },
          "Poll": {
            "type": "string",
            "nullable": true
          },
          "PollID": {
            "type": "string"
          },
          "RatingValue": {
            "type": "integer",
            "nullable": true
          },
          "TextResponse": {
            "type": "string"
          },
          "VotedAt": {
            "type": "string",
            "format": "date-time"
          },
          "Voter": {
            "type": "string",
            "nullable": true
          },
          "VoterID": {
            "type": "string"
          }
        }
      },
      "MeetingRecording": {
        "type": "object",
        "description": "MeetingRecording model",
        "properties": {
          "AccessKey": {
            "type": "string"
          },
          "CompletedAt": {
            "type": "string",
            "nullable": true
          },
          "Duration": {
            "type": "string"
          },
          "ExpiresAt": {
            "type": "string",
            "nullable": true
          },
          "FileName": {
            "type": "string"
          },
          "FilePath": {
            "type": "string"
          },
          "FileSize": {
            "type": "string"
          },
          "Format": {
            "type": "string"
          },
          "IsPublic": {
            "type": "boolean"
          },
          "IsTranscribed": {
            "type": "boolean"
          },
          "Meeting": {
            "type": "string",
            "nullable": true
          },
          "MeetingID": {
            "type": "string"
          },
          "Metadata": {
            "type": "string"
          },
          "Quality": {
            "type": "string"
          },
          "RecordingType": {
            "type": "string"
          },
          "StartedAt": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "type": "string"
          },
          "ThumbnailURL": {
            "type": "string"
          },
          "TranscriptionURL": {
            "type": "string"
          },
          "Transcriptions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MeetingSecurityEvent": {
        "type": "object",
        "description": "MeetingSecurityEvent model",
        "properties": {
          "ActionTaken": {
            "type": "string",
            "example": "blocked_access",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "User attempted to join without proper permissions"
          },
          "Details": {
            "type": "string",
            "example": "{\"attempt_count\":3,\"blocked_ip\":\"192.168.1.100\"}",
            "nullable": true
          },
          "DeviceInfo": {
            "type": "string",
            "example": "{\"type\":\"desktop\",\"browser\":\"Chrome\",\"os\":\"Windows\"}",
            "nullable": true
          },
          "EventType": {
            "type": "string",
            "example": "unauthorized_access_attempt"
          },
          "IPAddress": {
            "type": "string",
            "example": "192.168.1.100",
            "nullable": true
          },
          "Meeting": {
            "type": "string",
            "description": "Meeting where event occurred"
          },
          "MeetingID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "RequiresAttention": {
            "type": "boolean",
            "example": "true"
          },
          "ResolutionNotes": {
            "type": "string",
            "example": "False positive - user had valid permissions",
            "nullable": true
          },
          "ResolvedAt": {
            "type": "string",
            "example": "2024-01-15T10:45:00Z",
            "nullable": true
          },
          "ResolvedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "ResolvedByUser": {
            "type": "string",
            "description": "Admin who resolved the event",
            "nullable": true
          },
          "Severity": {
            "type": "string",
            "example": "warning"
          },
          "User": {
            "type": "string",
            "description": "User who triggered the event",
            "nullable": true
          },
          "UserAgent": {
            "type": "string",
            "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          }
        }
      },
      "MeetingSecurityPolicy": {
        "type": "object",
        "description": "MeetingSecurityPolicy model",
        "properties": {
          "AllowAnonymousJoin": {
            "type": "boolean"
          },
          "AllowedDomains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AllowedDomainsJSON": {
            "type": "string"
          },
          "BlockedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "BlockedUsersJSON": {
            "type": "string"
          },
          "ChatPermissions": {
            "type": "string"
          },
          "CustomSettings": {
            "type": "string"
          },
          "CustomSettingsJSON": {
            "type": "string"
          },
          "DisableCamera": {
            "type": "boolean"
          },
          "EnableBreakoutRooms": {
            "type": "boolean"
          },
          "EnableE2EEncryption": {
            "type": "boolean"
          },
          "EnableFileSharing": {
            "type": "boolean"
          },
          "EnableHandRaise": {
            "type": "boolean"
          },
          "EnablePolls": {
            "type": "boolean"
          },
          "EnableReactions": {
            "type": "boolean"
          },
          "EnableWhiteboard": {
            "type": "boolean"
          },
          "IdleTimeoutMinutes": {
            "type": "integer"
          },
          "JoinApprovalMode": {
            "type": "string"
          },
          "LockMeeting": {
            "type": "boolean"
          },
          "MaxParticipants": {
            "type": "integer"
          },
          "Meeting": {
            "type": "string",
            "nullable": true
          },
          "MeetingDurationMinutes": {
            "type": "integer"
          },
          "MeetingID": {
            "type": "string"
          },
          "MuteOnEntry": {
            "type": "boolean"
          },
          "RecordingPermissions": {
            "type": "string"
          },
          "RequirePassword": {
            "type": "boolean"
          },
          "RequireRegistration": {
            "type": "boolean"
          },
          "RequireWaitingRoom": {
            "type": "boolean"
          },
          "ScreenSharePermissions": {
            "type": "string"
          }
        }
      },
      "MeetingSummary": {
        "type": "object",
        "description": "MeetingSummary model",
        "properties": {
          "AIModel": {
            "type": "string"
          },
          "ActionItemsCount": {
            "type": "integer"
          },
          "ApprovedAt": {
            "type": "string",
            "nullable": true
          },
          "ApprovedBy": {
            "type": "string",
            "nullable": true
          },
          "Approver": {
            "type": "string",
            "nullable": true
          },
          "CompletedAt": {
            "type": "string",
            "nullable": true
          },
          "ConfidenceScore": {
            "type": "number"
          },
          "Content": {
            "type": "string"
          },
          "DecisionsCount": {
            "type": "integer"
          },
          "ErrorMessage": {
            "type": "string"
          },
          "GeneratedAt": {
            "type": "string",
            "format": "date-time"
          },
          "IsApproved": {
            "type": "boolean"
          },
          "IsPublic": {
            "type": "boolean"
          },
          "KeyPointsCount": {
            "type": "integer"
          },
          "Language": {
            "type": "string"
          },
          "Meeting": {
            "type": "string",
            "nullable": true
          },
          "MeetingID": {
            "type": "string"
          },
          "Recording": {
            "type": "string",
            "nullable": true
          },
          "RecordingID": {
            "type": "string"
          },
          "Sentiment": {
            "type": "string"
          },
          "SentimentScore": {
            "type": "number"
          },
          "Status": {
            "type": "string"
          },
          "Summary": {
            "type": "string"
          },
          "SummaryType": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          }
        }
      },
      "MeetingTemplateRequest": {
        "type": "object",
        "description": "MeetingTemplateRequest model",
        "properties": {
          "AllowJoinBeforeHost": {
            "type": "boolean"
          },
          "DefaultDuration": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "IsPublic": {
            "type": "boolean"
          },
          "MeetingType": {
            "type": "string"
          },
          "MuteParticipantsOnEntry": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "NotificationSettings": {
            "type": "string"
          },
          "RecordMeeting": {
            "type": "boolean"
          },
          "SecuritySettings": {
            "type": "string"
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "WaitingRoom": {
            "type": "string"
          }
        }
      },
      "MeetingTranscription": {
        "type": "object",
        "description": "MeetingTranscription model",
        "properties": {
          "ConfidenceScore": {
            "type": "number"
          },
          "Content": {
            "type": "string"
          },
          "Duration": {
            "type": "integer"
          },
          "EndTime": {
            "type": "integer"
          },
          "IsFinal": {
            "type": "boolean"
          },
          "Language": {
            "type": "string"
          },
          "Meeting": {
            "type": "string",
            "nullable": true
          },
          "MeetingID": {
            "type": "string"
          },
          "Metadata": {
            "type": "string"
          },
          "Recording": {
            "type": "string",
            "nullable": true
          },
          "RecordingID": {
            "type": "string",
            "nullable": true
          },
          "Speaker": {
            "type": "string",
            "nullable": true
          },
          "SpeakerID": {
            "type": "string",
            "nullable": true
          },
          "SpeakerName": {
            "type": "string"
          },
          "StartTime": {
            "type": "integer"
          },
          "TranscriptType": {
            "type": "string"
          }
        }
      },
      "MeetingWaitingRoomParticipant": {
        "type": "object",
        "description": "MeetingWaitingRoomParticipant model",
        "properties": {
          "ApprovedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "ApprovedByUser": {
            "type": "string",
            "description": "Host who approved/denied",
            "nullable": true
          },
          "DenialReason": {
            "type": "string",
            "example": "Meeting is at capacity",
            "nullable": true
          },
          "DeviceInfo": {
            "type": "string",
            "example": "{\"type\":\"desktop\",\"browser\":\"Chrome\",\"os\":\"Windows\"}",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "JoinTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Meeting": {
            "type": "string",
            "description": "Meeting being joined"
          },
          "MeetingID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Metadata": {
            "type": "string",
            "example": "{\"retry_count\":2,\"last_attempt\":\"2024-01-15T10:25:00Z\"}",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "John Doe"
          },
          "RequestReason": {
            "type": "string",
            "example": "I'm here for the quarterly review meeting",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "waiting"
          },
          "StatusChangedAt": {
            "type": "string",
            "example": "2024-01-15T10:35:00Z",
            "nullable": true
          },
          "User": {
            "type": "string",
            "description": "User waiting to join"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "MeetingWhiteboard": {
        "type": "object",
        "description": "MeetingWhiteboard model",
        "properties": {
          "BackgroundColor": {
            "type": "string"
          },
          "CanvasData": {
            "type": "string"
          },
          "CanvasVersion": {
            "type": "string"
          },
          "Collaborators": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Height": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsShared": {
            "type": "boolean"
          },
          "Meeting": {
            "type": "string",
            "nullable": true
          },
          "MeetingID": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          },
          "Width": {
            "type": "integer"
          }
        }
      },
      "MessageReaction": {
        "type": "object",
        "description": "MessageReaction model",
        "properties": {
          "Emoji": {
            "type": "string",
            "example": "👍"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "MessageID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ReactedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "MessageRead": {
        "type": "object",
        "description": "MessageRead model",
        "properties": {
          "Message": {
            "type": "string",
            "nullable": true
          },
          "MessageID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ReadAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "MessageThread": {
        "type": "object",
        "description": "MessageThread model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsResolved": {
            "type": "boolean",
            "example": "false"
          },
          "LastActivityAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "MessageCount": {
            "type": "integer",
            "example": "5"
          },
          "Messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ResolvedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "ResolvedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "ResolvedByUser": {
            "type": "string",
            "nullable": true
          },
          "RootMessage": {
            "type": "string",
            "nullable": true
          },
          "RootMessageID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Title": {
            "type": "string",
            "example": "Bug Discussion"
          }
        }
      },
      "Milestone": {
        "type": "object",
        "description": "Milestone model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#10B981"
          },
          "CompletedAt": {
            "type": "string",
            "example": "2024-03-25T00:00:00Z",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "Major feature release with new UI"
          },
          "DueDate": {
            "type": "string",
            "example": "2024-03-31T00:00:00Z",
            "nullable": true
          },
          "Icon": {
            "type": "string",
            "example": "milestone"
          },
          "Progress": {
            "type": "number",
            "example": "75.0"
          },
          "Project": {
            "type": "string",
            "description": "Project this milestone belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Status": {
            "type": "string",
            "example": "open"
          },
          "Tasks": {
            "type": "array",
            "description": "Tasks in this milestone",
            "items": {
              "type": "string"
            }
          },
          "Title": {
            "type": "string",
            "example": "Version 2.0 Release"
          }
        }
      },
      "MilestoneRequest": {
        "type": "object",
        "description": "MilestoneRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#10B981"
          },
          "Description": {
            "type": "string",
            "example": "Major feature release with new UI"
          },
          "DueDate": {
            "type": "string",
            "example": "2024-03-31T00:00:00Z",
            "nullable": true
          },
          "Icon": {
            "type": "string",
            "example": "milestone"
          },
          "Progress": {
            "type": "number",
            "example": "75.0"
          },
          "Status": {
            "type": "string",
            "example": "open"
          },
          "Title": {
            "type": "string",
            "example": "Version 2.0 Release"
          }
        }
      },
      "MoveFileRequest": {
        "type": "object",
        "description": "MoveFileRequest model",
        "properties": {
          "FolderID": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Notification": {
        "type": "object",
        "description": "Notification model",
        "properties": {
          "Channel": {
            "type": "string",
            "example": "email"
          },
          "Data": {
            "type": "string",
            "example": "{\"message\":\"Welcome to the platform\",\"user_name\":\"John Doe\"}"
          },
          "DeliveredAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "DeliveryAttempts": {
            "type": "integer",
            "example": "1"
          },
          "DeliveryStatus": {
            "type": "string",
            "example": "pending"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "FailedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "FailureReason": {
            "type": "string",
            "example": "SMTP connection failed",
            "nullable": true
          },
          "LastAttemptAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Metadata": {
            "type": "string",
            "example": "{\"campaign_id\":\"abc123\",\"source\":\"api\"}"
          },
          "Notifiable": {
            "type": "string",
            "description": "The entity that should receive this notification"
          },
          "NotifiableID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "NotifiableType": {
            "type": "string",
            "example": "User"
          },
          "Priority": {
            "type": "string",
            "example": "normal"
          },
          "ReadAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "SentAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "example": "user_registered"
          }
        }
      },
      "NotificationPreference": {
        "type": "object",
        "description": "NotificationPreference model",
        "properties": {
          "Channels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DigestEnabled": {
            "type": "boolean"
          },
          "DigestFrequency": {
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          },
          "MaxPerDay": {
            "type": "integer",
            "nullable": true
          },
          "MaxPerHour": {
            "type": "integer",
            "nullable": true
          },
          "NotificationType": {
            "type": "string"
          },
          "QuietHoursEnd": {
            "type": "string",
            "nullable": true
          },
          "QuietHoursStart": {
            "type": "string",
            "nullable": true
          },
          "Settings": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "OAuthAccessToken": {
        "type": "object",
        "description": "OAuthAccessToken model",
        "properties": {
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "RefreshToken": {
            "type": "string",
            "nullable": true
          },
          "Revoked": {
            "type": "boolean"
          },
          "Scopes": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuthAnalytics": {
        "type": "object",
        "description": "OAuthAnalytics model",
        "properties": {
          "City": {
            "type": "string",
            "nullable": true
          },
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string",
            "nullable": true
          },
          "Country": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DurationMS": {
            "type": "number",
            "nullable": true
          },
          "Endpoint": {
            "type": "string",
            "nullable": true
          },
          "GrantType": {
            "type": "string",
            "nullable": true
          },
          "Hour": {
            "type": "integer"
          },
          "ID": {
            "type": "string"
          },
          "IPAddress": {
            "type": "string",
            "nullable": true
          },
          "Labels": {
            "type": "string",
            "nullable": true
          },
          "Metadata": {
            "type": "string",
            "nullable": true
          },
          "Method": {
            "type": "string",
            "nullable": true
          },
          "MetricName": {
            "type": "string"
          },
          "MetricType": {
            "type": "string"
          },
          "Region": {
            "type": "string",
            "nullable": true
          },
          "Scope": {
            "type": "string",
            "nullable": true
          },
          "StatusCode": {
            "type": "integer",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserAgent": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "integer"
          }
        }
      },
      "OAuthAuthCode": {
        "type": "object",
        "description": "OAuthAuthCode model",
        "properties": {
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CodeChallenge": {
            "type": "string",
            "nullable": true
          },
          "CodeChallengeMethod": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          },
          "Scopes": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "OAuthAuthorizationRequest": {
        "type": "object",
        "description": "OAuthAuthorizationRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "CodeChallenge": {
            "type": "string",
            "example": "abc123def456"
          },
          "CodeChallengeMethod": {
            "type": "string",
            "example": "S256"
          },
          "RedirectURI": {
            "type": "string",
            "example": "https://example.com/callback"
          },
          "ResponseType": {
            "type": "string",
            "example": "code"
          },
          "Scope": {
            "type": "string",
            "example": "read write"
          },
          "State": {
            "type": "string",
            "example": "abc123def456"
          }
        },
        "required": [
          "ResponseType",
          "ClientID",
          "RedirectURI"
        ]
      },
      "OAuthCAEEvent": {
        "type": "object",
        "description": "OAuthCAEEvent model",
        "properties": {
          "ActionTaken": {
            "type": "string",
            "nullable": true
          },
          "Audience": {
            "type": "string",
            "nullable": true
          },
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string",
            "nullable": true
          },
          "Context": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeviceID": {
            "type": "string",
            "nullable": true
          },
          "EXP": {
            "type": "integer",
            "nullable": true
          },
          "EventCategory": {
            "type": "string"
          },
          "EventID": {
            "type": "string"
          },
          "EventType": {
            "type": "string"
          },
          "Events": {
            "type": "string"
          },
          "IAT": {
            "type": "integer"
          },
          "ID": {
            "type": "string"
          },
          "IPAddress": {
            "type": "string",
            "nullable": true
          },
          "Issuer": {
            "type": "string"
          },
          "JTI": {
            "type": "string"
          },
          "LocationCity": {
            "type": "string",
            "nullable": true
          },
          "LocationCountry": {
            "type": "string",
            "nullable": true
          },
          "LocationRegion": {
            "type": "string",
            "nullable": true
          },
          "ProcessedAt": {
            "type": "string",
            "nullable": true
          },
          "ProcessedBy": {
            "type": "string",
            "nullable": true
          },
          "ProcessedByUser": {
            "type": "string",
            "nullable": true
          },
          "ProcessingNotes": {
            "type": "string",
            "nullable": true
          },
          "RiskLevel": {
            "type": "string"
          },
          "RiskScore": {
            "type": "integer"
          },
          "SessionID": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "TokenID": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserAgent": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "OAuthClient": {
        "type": "object",
        "description": "OAuthClient model",
        "properties": {
          "AccessTokens": {
            "type": "array",
            "description": "Access tokens issued to this client",
            "items": {
              "type": "string"
            }
          },
          "AuthCodes": {
            "type": "array",
            "description": "Authorization codes issued to this client",
            "items": {
              "type": "string"
            }
          },
          "ID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Name": {
            "type": "string",
            "example": "My OAuth App"
          },
          "PasswordClient": {
            "type": "boolean",
            "example": "false"
          },
          "PersonalAccessClient": {
            "type": "boolean",
            "example": "false"
          },
          "Provider": {
            "type": "string",
            "example": "custom",
            "nullable": true
          },
          "Redirect": {
            "type": "string",
            "example": "[\"https://example.com/callback\",\"https://app.example.com/auth\"]"
          },
          "Revoked": {
            "type": "boolean",
            "example": "false"
          },
          "Secret": {
            "type": "string",
            "example": "abc123def456ghi789",
            "nullable": true
          },
          "User": {
            "type": "string",
            "description": "User who owns this client",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          }
        }
      },
      "OAuthClientRequest": {
        "type": "object",
        "description": "OAuthClientRequest model",
        "properties": {
          "Name": {
            "type": "string",
            "example": "My OAuth Client"
          },
          "PasswordClient": {
            "type": "boolean",
            "example": "false"
          },
          "PersonalAccessClient": {
            "type": "boolean",
            "example": "false"
          },
          "RedirectURIs": {
            "type": "array",
            "example": "[\"https://example.com/callback\", \"https://app.example.com/callback\"]",
            "items": {
              "type": "string"
            }
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          }
        },
        "required": [
          "Name"
        ]
      },
      "OAuthClientUpdateRequest": {
        "type": "object",
        "description": "OAuthClientUpdateRequest model",
        "properties": {
          "Name": {
            "type": "string",
            "example": "Updated Client Name"
          },
          "RedirectURIs": {
            "type": "array",
            "example": "[\"https://example.com/callback\", \"https://app.example.com/callback\"]",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "Name"
        ]
      },
      "OAuthCompleteDeviceAuthorizationRequest": {
        "type": "object",
        "description": "OAuthCompleteDeviceAuthorizationRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "user@example.com"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          },
          "UserCode": {
            "type": "string",
            "example": "ABCD"
          }
        },
        "required": [
          "UserCode",
          "Email",
          "Password"
        ]
      },
      "OAuthConsent": {
        "type": "object",
        "description": "OAuthConsent model",
        "properties": {
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresAt": {
            "type": "string",
            "nullable": true
          },
          "Granted": {
            "type": "boolean"
          },
          "ID": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          },
          "Scopes": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "OAuthConsentRequest": {
        "type": "object",
        "description": "OAuthConsentRequest model",
        "properties": {
          "ConsentID": {
            "type": "string",
            "example": "consent_1234567890_abcdefgh"
          },
          "Granted": {
            "type": "boolean",
            "example": "true"
          },
          "GrantedScopes": {
            "type": "array",
            "example": "[\"profile\", \"email\"]",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ConsentID"
        ]
      },
      "OAuthDeviceAuthorizationRequest": {
        "type": "object",
        "description": "OAuthDeviceAuthorizationRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Scope": {
            "type": "string",
            "example": "read write"
          }
        },
        "required": [
          "ClientID"
        ]
      },
      "OAuthDeviceCode": {
        "type": "object",
        "description": "OAuthDeviceCode model",
        "properties": {
          "Authorized": {
            "type": "boolean"
          },
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          },
          "Scopes": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserCode": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuthDeviceTokenRequest": {
        "type": "object",
        "description": "OAuthDeviceTokenRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "DeviceCode": {
            "type": "string",
            "example": "abc123def456"
          },
          "GrantType": {
            "type": "string",
            "example": "urn:ietf:params:oauth:grant-type:device_code"
          }
        },
        "required": [
          "GrantType",
          "DeviceCode",
          "ClientID"
        ]
      },
      "OAuthIdentityProvider": {
        "type": "object",
        "description": "OAuthIdentityProvider model",
        "properties": {
          "AuthorizationURL": {
            "type": "string",
            "example": "https://accounts.google.com/o/oauth2/auth"
          },
          "ButtonColor": {
            "type": "string",
            "example": "#4285f4",
            "nullable": true
          },
          "ClientID": {
            "type": "string",
            "example": "123456789.apps.googleusercontent.com"
          },
          "ClientSecret": {
            "type": "string",
            "example": "secret123"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DisplayName": {
            "type": "string",
            "example": "Google"
          },
          "Enabled": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "string"
          },
          "IconURL": {
            "type": "string",
            "example": "https://developers.google.com/identity/images/g-logo.png",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "google"
          },
          "RedirectURL": {
            "type": "string",
            "example": "http://localhost:3000/auth/google/callback"
          },
          "Scopes": {
            "type": "string",
            "example": "[\"openid\", \"profile\", \"email\"]"
          },
          "SortOrder": {
            "type": "integer",
            "example": "1"
          },
          "TokenURL": {
            "type": "string",
            "example": "https://oauth2.googleapis.com/token"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserinfoMapping": {
            "type": "string",
            "example": "{\"id\": \"id\", \"email\": \"email\", \"name\": \"name\", \"picture\": \"avatar\"}"
          },
          "UserinfoURL": {
            "type": "string",
            "example": "https://www.googleapis.com/oauth2/v2/userinfo"
          }
        }
      },
      "OAuthJWKSKey": {
        "type": "object",
        "description": "OAuthJWKSKey model",
        "properties": {
          "Algorithm": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresAt": {
            "type": "string",
            "nullable": true
          },
          "ID": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "KeyID": {
            "type": "string"
          },
          "KeyOps": {
            "type": "string",
            "nullable": true
          },
          "KeyType": {
            "type": "string"
          },
          "Metadata": {
            "type": "string",
            "nullable": true
          },
          "PrivateKey": {
            "type": "string",
            "nullable": true
          },
          "PublicKey": {
            "type": "string"
          },
          "RotatedAt": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "Use": {
            "type": "string"
          },
          "X5T": {
            "type": "string",
            "nullable": true
          },
          "X5TS256": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuthPersonalAccessClient": {
        "type": "object",
        "description": "OAuthPersonalAccessClient model",
        "properties": {
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OAuthPersonalAccessTokenRequest": {
        "type": "object",
        "description": "OAuthPersonalAccessTokenRequest model",
        "properties": {
          "ExpiresAt": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "My Personal Token"
          },
          "Scope": {
            "type": "string",
            "example": "read write"
          }
        },
        "required": [
          "Name"
        ]
      },
      "OAuthPushedAuthRequest": {
        "type": "object",
        "description": "OAuthPushedAuthRequest model",
        "properties": {
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string",
            "example": "abc123def456"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-01T12:00:00Z"
          },
          "ID": {
            "type": "string"
          },
          "Parameters": {
            "type": "string",
            "example": "{\"response_type\": \"code\", \"client_id\": \"abc123\", \"redirect_uri\": \"https://example.com/callback\"}"
          },
          "RequestURI": {
            "type": "string",
            "example": "urn:ietf:params:oauth:request_uri:xyz789"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "Used": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "OAuthRedirectURIRequest": {
        "type": "object",
        "description": "OAuthRedirectURIRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "RedirectURI": {
            "type": "string",
            "example": "https://example.com/callback"
          }
        },
        "required": [
          "RedirectURI",
          "ClientID"
        ]
      },
      "OAuthRefreshToken": {
        "type": "object",
        "description": "OAuthRefreshToken model",
        "properties": {
          "AccessToken": {
            "type": "string",
            "nullable": true
          },
          "AccessTokenID": {
            "type": "string"
          },
          "ExpiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          }
        }
      },
      "OAuthResourceServer": {
        "type": "object",
        "description": "OAuthResourceServer model",
        "properties": {
          "Active": {
            "type": "boolean",
            "example": "true"
          },
          "Audience": {
            "type": "string",
            "example": "[\"https://api.example.com\"]"
          },
          "Category": {
            "type": "string",
            "example": "api"
          },
          "DefaultScopes": {
            "type": "string",
            "example": "[\"read\"]"
          },
          "Description": {
            "type": "string",
            "example": "Main API server for the application"
          },
          "IntrospectionEndpoint": {
            "type": "string",
            "example": "https://auth.example.com/oauth/introspect"
          },
          "Issuer": {
            "type": "string",
            "example": "https://auth.example.com"
          },
          "JWKSURI": {
            "type": "string",
            "example": "https://auth.example.com/.well-known/jwks.json"
          },
          "MaxScopeLifetime": {
            "type": "integer",
            "example": "3600"
          },
          "Metadata": {
            "type": "string",
            "example": "{\"version\": \"1.0\", \"contact\": \"admin@example.com\"}"
          },
          "Name": {
            "type": "string",
            "example": "API Server"
          },
          "RequiredScopes": {
            "type": "string",
            "example": "[\"read\"]"
          },
          "SecurityPolicy": {
            "type": "string",
            "example": "{\"require_mtls\": false, \"require_dpop\": true}"
          },
          "SupportedScopes": {
            "type": "string",
            "example": "[\"read\", \"write\", \"admin\"]"
          },
          "TokenFormat": {
            "type": "string",
            "example": "jwt"
          },
          "TokenSigningAlgorithm": {
            "type": "string",
            "example": "RS256"
          },
          "URI": {
            "type": "string",
            "example": "https://api.example.com"
          }
        }
      },
      "OAuthScopeRequest": {
        "type": "object",
        "description": "OAuthScopeRequest model",
        "properties": {
          "Scope": {
            "type": "string",
            "example": "read write delete"
          }
        },
        "required": [
          "Scope"
        ]
      },
      "OAuthSecurityEvent": {
        "type": "object",
        "description": "OAuthSecurityEvent model",
        "properties": {
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "EventData": {
            "type": "string",
            "nullable": true
          },
          "EventID": {
            "type": "string"
          },
          "EventType": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "IPAddress": {
            "type": "string",
            "nullable": true
          },
          "IsResolved": {
            "type": "boolean"
          },
          "LocationCity": {
            "type": "string",
            "nullable": true
          },
          "LocationCountry": {
            "type": "string",
            "nullable": true
          },
          "LocationRegion": {
            "type": "string",
            "nullable": true
          },
          "RequestID": {
            "type": "string",
            "nullable": true
          },
          "ResolutionAction": {
            "type": "string",
            "nullable": true
          },
          "ResolvedAt": {
            "type": "string",
            "nullable": true
          },
          "ResolvedBy": {
            "type": "string",
            "nullable": true
          },
          "ResolvedByUser": {
            "type": "string",
            "nullable": true
          },
          "RiskFactors": {
            "type": "string",
            "nullable": true
          },
          "RiskLevel": {
            "type": "string"
          },
          "RiskScore": {
            "type": "integer"
          },
          "SessionID": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserAgent": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuthSession": {
        "type": "object",
        "description": "OAuthSession model",
        "properties": {
          "ACR": {
            "type": "string",
            "nullable": true
          },
          "AMR": {
            "type": "string",
            "nullable": true
          },
          "AuthTime": {
            "type": "string",
            "nullable": true
          },
          "BrowserFingerprint": {
            "type": "string",
            "nullable": true
          },
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CodeChallenge": {
            "type": "string",
            "nullable": true
          },
          "CodeChallengeMethod": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeviceID": {
            "type": "string",
            "nullable": true
          },
          "ExpiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "IPAddress": {
            "type": "string"
          },
          "IsPersistent": {
            "type": "boolean"
          },
          "LastActivity": {
            "type": "string",
            "format": "date-time"
          },
          "Nonce": {
            "type": "string",
            "nullable": true
          },
          "RedirectURI": {
            "type": "string",
            "nullable": true
          },
          "ResponseMode": {
            "type": "string",
            "nullable": true
          },
          "ResponseType": {
            "type": "string",
            "nullable": true
          },
          "Scopes": {
            "type": "string",
            "nullable": true
          },
          "SessionData": {
            "type": "string",
            "nullable": true
          },
          "SessionID": {
            "type": "string"
          },
          "SessionType": {
            "type": "string"
          },
          "State": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "type": "string"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserAgent": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "OAuthStepUpChallenge": {
        "type": "object",
        "description": "OAuthStepUpChallenge model",
        "properties": {
          "Attempts": {
            "type": "integer"
          },
          "ChallengeCode": {
            "type": "string",
            "nullable": true
          },
          "ChallengeData": {
            "type": "string",
            "nullable": true
          },
          "ChallengeID": {
            "type": "string"
          },
          "ChallengeMethod": {
            "type": "string"
          },
          "ChallengeReason": {
            "type": "string"
          },
          "ChallengeType": {
            "type": "string"
          },
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CompletedAt": {
            "type": "string",
            "nullable": true
          },
          "CompletionData": {
            "type": "string",
            "nullable": true
          },
          "CompletionMethod": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "CurrentACR": {
            "type": "string",
            "nullable": true
          },
          "CurrentAMR": {
            "type": "string",
            "nullable": true
          },
          "DeviceID": {
            "type": "string",
            "nullable": true
          },
          "ExpiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "FailureReason": {
            "type": "string",
            "nullable": true
          },
          "ID": {
            "type": "string"
          },
          "IPAddress": {
            "type": "string",
            "nullable": true
          },
          "IssuedAt": {
            "type": "string",
            "format": "date-time"
          },
          "LastAttemptAt": {
            "type": "string",
            "nullable": true
          },
          "MaxAttempts": {
            "type": "integer"
          },
          "Metadata": {
            "type": "string",
            "nullable": true
          },
          "RequiredACR": {
            "type": "string"
          },
          "RequiredAMR": {
            "type": "string",
            "nullable": true
          },
          "SessionID": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "type": "string"
          },
          "TokenID": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserAgent": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string"
          },
          "VerificationCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuthTokenBinding": {
        "type": "object",
        "description": "OAuthTokenBinding model",
        "properties": {
          "AttestationData": {
            "type": "string",
            "nullable": true
          },
          "BindingData": {
            "type": "string",
            "nullable": true
          },
          "BindingID": {
            "type": "string"
          },
          "BindingMethod": {
            "type": "string"
          },
          "BindingValue": {
            "type": "string"
          },
          "BoundAt": {
            "type": "string",
            "format": "date-time"
          },
          "CertificateChain": {
            "type": "string",
            "nullable": true
          },
          "CertificateThumbprint": {
            "type": "string",
            "nullable": true
          },
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DPoPJKT": {
            "type": "string",
            "nullable": true
          },
          "DPoPKey": {
            "type": "string",
            "nullable": true
          },
          "DeviceCertificate": {
            "type": "string",
            "nullable": true
          },
          "ExpiresAt": {
            "type": "string",
            "nullable": true
          },
          "ID": {
            "type": "string"
          },
          "Metadata": {
            "type": "string",
            "nullable": true
          },
          "RevocationReason": {
            "type": "string",
            "nullable": true
          },
          "RevokedAt": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "type": "string"
          },
          "Token": {
            "type": "string",
            "nullable": true
          },
          "TokenID": {
            "type": "string"
          },
          "TokenType": {
            "type": "string"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuthTokenExchangeRequest": {
        "type": "object",
        "description": "OAuthTokenExchangeRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ClientSecret": {
            "type": "string",
            "example": "abc123def456"
          },
          "GrantType": {
            "type": "string",
            "example": "urn:ietf:params:oauth:grant-type:token-exchange"
          },
          "RequestedTokenType": {
            "type": "string",
            "example": "access_token"
          },
          "Scope": {
            "type": "string",
            "example": "read write"
          },
          "SubjectToken": {
            "type": "string",
            "example": "abc123def456"
          },
          "SubjectTokenType": {
            "type": "string",
            "example": "access_token"
          }
        },
        "required": [
          "GrantType",
          "SubjectToken",
          "SubjectTokenType",
          "RequestedTokenType",
          "ClientID"
        ]
      },
      "OAuthTokenIntrospectionRequest": {
        "type": "object",
        "description": "OAuthTokenIntrospectionRequest model",
        "properties": {
          "Token": {
            "type": "string",
            "example": "abc123def456"
          },
          "TokenTypeHint": {
            "type": "string",
            "example": "access_token"
          }
        },
        "required": [
          "Token"
        ]
      },
      "OAuthTokenRequest": {
        "type": "object",
        "description": "OAuthTokenRequest model",
        "properties": {
          "ClientAssertion": {
            "type": "string",
            "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "ClientAssertionType": {
            "type": "string",
            "example": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
          },
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ClientSecret": {
            "type": "string",
            "example": "abc123def456"
          },
          "Code": {
            "type": "string",
            "example": "abc123def456"
          },
          "CodeVerifier": {
            "type": "string",
            "example": "abc123def456"
          },
          "DeviceCode": {
            "type": "string",
            "example": "abc123def456"
          },
          "GrantType": {
            "type": "string",
            "example": "password"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          },
          "RedirectURI": {
            "type": "string",
            "example": "https://example.com/callback"
          },
          "RefreshToken": {
            "type": "string",
            "example": "abc123def456"
          },
          "RequestedTokenType": {
            "type": "string",
            "example": "access_token"
          },
          "Scope": {
            "type": "string",
            "example": "read write"
          },
          "State": {
            "type": "string",
            "example": "abc123def456"
          },
          "SubjectToken": {
            "type": "string",
            "example": "abc123def456"
          },
          "SubjectTokenType": {
            "type": "string",
            "example": "access_token"
          },
          "Username": {
            "type": "string",
            "example": "user@example.com"
          }
        },
        "required": [
          "GrantType",
          "ClientID"
        ]
      },
      "OAuthTokenRevocationRequest": {
        "type": "object",
        "description": "OAuthTokenRevocationRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ClientSecret": {
            "type": "string",
            "example": "abc123def456"
          },
          "Token": {
            "type": "string",
            "example": "abc123def456"
          },
          "TokenTypeHint": {
            "type": "string",
            "example": "access_token"
          }
        },
        "required": [
          "Token"
        ]
      },
      "OAuthUserIdentity": {
        "type": "object",
        "description": "OAuthUserIdentity model",
        "properties": {
          "AccessToken": {
            "type": "string",
            "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...",
            "nullable": true
          },
          "LastLoginAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Provider": {
            "type": "string"
          },
          "ProviderAvatar": {
            "type": "string",
            "example": "https://lh3.googleusercontent.com/a/default-user",
            "nullable": true
          },
          "ProviderData": {
            "type": "string",
            "example": "{\"locale\": \"en\", \"verified_email\": true}",
            "nullable": true
          },
          "ProviderEmail": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "ProviderID": {
            "type": "string",
            "example": "1"
          },
          "ProviderName": {
            "type": "string",
            "example": "John Doe"
          },
          "ProviderUserID": {
            "type": "string",
            "example": "123456789012345678901"
          },
          "ProviderUsername": {
            "type": "string",
            "example": "johndoe",
            "nullable": true
          },
          "RefreshToken": {
            "type": "string",
            "example": "1//04567890abcdef",
            "nullable": true
          },
          "TokenExpiresAt": {
            "type": "string",
            "example": "2024-01-15T11:30:00Z",
            "nullable": true
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXZ1234567890ABCDEFGHIJK"
          }
        }
      },
      "Organization": {
        "type": "object",
        "description": "Organization model",
        "properties": {
          "Address": {
            "type": "string",
            "example": "123 Main St, City, State 12345"
          },
          "Banner": {
            "type": "string",
            "example": "https://acme.com/banner.png"
          },
          "City": {
            "type": "string",
            "description": "Organization's city",
            "nullable": true
          },
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "example": "contact@acme.com"
          },
          "ContactPhone": {
            "type": "string",
            "example": "+1-555-123-4567"
          },
          "Country": {
            "type": "string",
            "description": "Organization's country",
            "nullable": true
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Departments": {
            "type": "array",
            "description": "Organization's departments",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string",
            "example": "Leading technology solutions provider"
          },
          "District": {
            "type": "string",
            "description": "Organization's district",
            "nullable": true
          },
          "DistrictID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Domain": {
            "type": "string",
            "example": "acme.com"
          },
          "FoundedAt": {
            "type": "string",
            "example": "2020-01-15T00:00:00Z",
            "nullable": true
          },
          "Industry": {
            "type": "string",
            "example": "Technology"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsVerified": {
            "type": "boolean",
            "example": "false"
          },
          "Level": {
            "type": "integer",
            "example": "0"
          },
          "Logo": {
            "type": "string",
            "example": "https://acme.com/logo.png"
          },
          "Name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "ParentOrganization": {
            "type": "string",
            "description": "Parent organization",
            "nullable": true
          },
          "ParentOrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Path": {
            "type": "string",
            "example": "/01HXYZ123456789ABCDEFGHIJK/01HXYZ123456789ABCDEFGHIJL"
          },
          "PostalCode": {
            "type": "string",
            "example": "12345"
          },
          "Projects": {
            "type": "array",
            "description": "Organization's projects",
            "items": {
              "type": "string"
            }
          },
          "Province": {
            "type": "string",
            "description": "Organization's province/state",
            "nullable": true
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"theme\":\"dark\",\"timezone\":\"UTC\",\"features\":{\"api_access\":true,\"analytics\":true}}"
          },
          "Size": {
            "type": "string",
            "example": "medium"
          },
          "Slug": {
            "type": "string",
            "example": "acme-corp"
          },
          "Subsidiaries": {
            "type": "array",
            "description": "Subsidiary organizations",
            "items": {
              "type": "string"
            }
          },
          "Teams": {
            "type": "array",
            "description": "Organization's teams",
            "items": {
              "type": "string"
            }
          },
          "Tenant": {
            "type": "string",
            "description": "Tenant that this organization belongs to",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "company"
          },
          "Users": {
            "type": "array",
            "description": "Users associated with this organization",
            "items": {
              "type": "string"
            }
          },
          "VerifiedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Website": {
            "type": "string",
            "example": "https://acme.com"
          }
        }
      },
      "OrganizationRequest": {
        "type": "object",
        "description": "OrganizationRequest model",
        "properties": {
          "Address": {
            "type": "string",
            "example": "123 Main St, City, State 12345"
          },
          "Banner": {
            "type": "string",
            "example": "https://acme.com/banner.png"
          },
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "example": "contact@acme.com"
          },
          "ContactPhone": {
            "type": "string",
            "example": "+1-555-123-4567"
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "Leading technology solutions provider"
          },
          "DistrictID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Domain": {
            "type": "string",
            "example": "acme.com"
          },
          "FoundedAt": {
            "type": "string",
            "example": "2020-01-15T00:00:00Z",
            "nullable": true
          },
          "Industry": {
            "type": "string",
            "example": "Technology"
          },
          "Logo": {
            "type": "string",
            "example": "https://acme.com/logo.png"
          },
          "Name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "ParentOrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "PostalCode": {
            "type": "string",
            "example": "12345"
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"theme\":\"dark\",\"timezone\":\"UTC\",\"features\":{\"api_access\":true,\"analytics\":true}}"
          },
          "Size": {
            "type": "string",
            "example": "medium"
          },
          "Slug": {
            "type": "string",
            "example": "acme-corp"
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "company"
          },
          "Website": {
            "type": "string",
            "example": "https://acme.com"
          }
        }
      },
      "OrganizationUserRequest": {
        "type": "object",
        "description": "OrganizationUserRequest model",
        "properties": {
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "EmployeeID": {
            "type": "string",
            "example": "EMP001"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2025-01-15T10:30:00Z",
            "nullable": true
          },
          "HireDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "ManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Permissions": {
            "type": "string",
            "example": "[\"read:projects\",\"write:reports\"]"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "Status": {
            "type": "string",
            "example": "active"
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "description": "PaginatedResponse model",
        "properties": {
          "Data": {
            "type": "string"
          },
          "Message": {
            "type": "string",
            "example": "Data retrieved successfully"
          },
          "Pagination": {
            "type": "string"
          },
          "Status": {
            "type": "string",
            "example": "success"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "PaginationInfo": {
        "type": "object",
        "description": "Pagination metadata for querybuilder responses",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of items in current page",
            "example": 20
          },
          "current_page": {
            "type": "integer",
            "description": "Current page number (offset pagination only)",
            "example": 1,
            "nullable": true
          },
          "from": {
            "type": "integer",
            "description": "Starting item number (offset pagination only)",
            "example": 1,
            "nullable": true
          },
          "has_next": {
            "type": "boolean",
            "description": "Whether there are more items after current page",
            "example": true
          },
          "has_prev": {
            "type": "boolean",
            "description": "Whether there are items before current page",
            "example": false
          },
          "last_page": {
            "type": "integer",
            "description": "Last page number (offset pagination only)",
            "example": 5,
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "description": "Maximum items per page",
            "example": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "Cursor for next page (cursor pagination only)",
            "example": "eyJpZCI6MTIzfQ==",
            "nullable": true
          },
          "per_page": {
            "type": "integer",
            "description": "Items per page (offset pagination only)",
            "example": 20,
            "nullable": true
          },
          "prev_cursor": {
            "type": "string",
            "description": "Cursor for previous page (cursor pagination only)",
            "example": "eyJpZCI6MTAwfQ==",
            "nullable": true
          },
          "to": {
            "type": "integer",
            "description": "Ending item number (offset pagination only)",
            "example": 20,
            "nullable": true
          },
          "total": {
            "type": "integer",
            "description": "Total number of items (offset pagination only)",
            "example": 100,
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of pagination used",
            "example": "offset",
            "enum": [
              "offset",
              "cursor"
            ]
          }
        },
        "required": [
          "type",
          "count",
          "limit",
          "has_next",
          "has_prev"
        ]
      },
      "PasswordResetToken": {
        "type": "object",
        "description": "PasswordResetToken model",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "Token": {
            "type": "string",
            "example": "abc123def456"
          }
        }
      },
      "Permission": {
        "type": "object",
        "description": "Permission model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Create new users"
          },
          "Guard": {
            "type": "string",
            "example": "web"
          },
          "Name": {
            "type": "string",
            "example": "users.create"
          },
          "Roles": {
            "type": "array",
            "description": "Roles that have this permission",
            "items": {
              "type": "string"
            }
          },
          "Tenant": {
            "type": "string",
            "description": "Tenant this permission belongs to",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          }
        }
      },
      "Project": {
        "type": "object",
        "description": "Project model",
        "properties": {
          "Budget": {
            "type": "number",
            "example": "50000.00"
          },
          "Code": {
            "type": "string",
            "example": "CPR-2024"
          },
          "Color": {
            "type": "string",
            "example": "#F59E0B"
          },
          "CustomFields": {
            "type": "array",
            "description": "Project custom fields",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string",
            "example": "Redesign and modernize the customer portal"
          },
          "EndDate": {
            "type": "string",
            "example": "2024-06-15T00:00:00Z",
            "nullable": true
          },
          "Icon": {
            "type": "string",
            "example": "project"
          },
          "Insights": {
            "type": "array",
            "description": "Project insights and analytics",
            "items": {
              "type": "string"
            }
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Milestones": {
            "type": "array",
            "description": "Project milestones",
            "items": {
              "type": "string"
            }
          },
          "Name": {
            "type": "string",
            "example": "Customer Portal Redesign"
          },
          "Organization": {
            "type": "string",
            "description": "Organization this project belongs to",
            "nullable": true
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Priority": {
            "type": "string",
            "example": "high"
          },
          "Progress": {
            "type": "number",
            "example": "65.5"
          },
          "ProjectManager": {
            "type": "string",
            "description": "Project manager",
            "nullable": true
          },
          "ProjectManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"timezone\":\"UTC\",\"working_hours\":{\"start\":\"09:00\",\"end\":\"17:00\"}}"
          },
          "StartDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "active"
          },
          "TaskBoards": {
            "type": "array",
            "description": "Project task boards",
            "items": {
              "type": "string"
            }
          },
          "TaskLabels": {
            "type": "array",
            "description": "Project task labels",
            "items": {
              "type": "string"
            }
          },
          "Tasks": {
            "type": "array",
            "description": "Project tasks",
            "items": {
              "type": "string"
            }
          },
          "Teams": {
            "type": "array",
            "description": "Teams working on this project",
            "items": {
              "type": "string"
            }
          },
          "Users": {
            "type": "array",
            "description": "Users assigned to this project",
            "items": {
              "type": "string"
            }
          },
          "Views": {
            "type": "array",
            "description": "Project views",
            "items": {
              "type": "string"
            }
          },
          "Workflows": {
            "type": "array",
            "description": "Project workflows",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProjectCustomField": {
        "type": "object",
        "description": "ProjectCustomField model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Task priority level"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsRequired": {
            "type": "boolean",
            "example": "false"
          },
          "Name": {
            "type": "string",
            "example": "Priority"
          },
          "Options": {
            "type": "string",
            "example": "{\"options\":[\"Low\",\"Medium\",\"High\",\"Critical\"],\"colors\":{\"Low\":\"#10B981\",\"Medium\":\"#F59E0B\",\"High\":\"#EF4444\",\"Critical\":\"#7C3AED\"}}"
          },
          "Position": {
            "type": "integer",
            "example": "1"
          },
          "Project": {
            "type": "string",
            "description": "Project this field belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "TaskFieldValues": {
            "type": "array",
            "description": "Task field values",
            "items": {
              "type": "string"
            }
          },
          "Type": {
            "type": "string",
            "example": "select"
          }
        }
      },
      "ProjectInsight": {
        "type": "object",
        "description": "ProjectInsight model",
        "properties": {
          "Data": {
            "type": "string",
            "example": "{\"completed_tasks\":15,\"total_tasks\":20,\"velocity\":3.5}"
          },
          "Date": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T00:00:00Z"
          },
          "Period": {
            "type": "string",
            "example": "weekly"
          },
          "Project": {
            "type": "string",
            "description": "Project this insight belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "velocity"
          }
        }
      },
      "ProjectRequest": {
        "type": "object",
        "description": "ProjectRequest model",
        "properties": {
          "Budget": {
            "type": "number",
            "example": "50000.00"
          },
          "Code": {
            "type": "string",
            "example": "CPR-2024"
          },
          "Color": {
            "type": "string",
            "example": "#F59E0B"
          },
          "Description": {
            "type": "string",
            "example": "Redesign and modernize the customer portal"
          },
          "EndDate": {
            "type": "string",
            "example": "2024-06-15T00:00:00Z",
            "nullable": true
          },
          "Icon": {
            "type": "string",
            "example": "project"
          },
          "Name": {
            "type": "string",
            "example": "Customer Portal Redesign"
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Priority": {
            "type": "string",
            "example": "high"
          },
          "ProjectManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"timezone\":\"UTC\",\"working_hours\":{\"start\":\"09:00\",\"end\":\"17:00\"}}"
          },
          "StartDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "active"
          }
        }
      },
      "ProjectTemplate": {
        "type": "object",
        "description": "ProjectTemplate model",
        "properties": {
          "Category": {
            "type": "string",
            "example": "development"
          },
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Configuration": {
            "type": "string",
            "example": "{\"default_views\":[{\"name\":\"Board\",\"type\":\"board\"}],\"custom_fields\":[{\"name\":\"Priority\",\"type\":\"select\"}]}"
          },
          "Description": {
            "type": "string",
            "example": "Template for software development projects with standard workflow"
          },
          "Icon": {
            "type": "string",
            "example": "code"
          },
          "IsFeatured": {
            "type": "boolean",
            "example": "false"
          },
          "IsPublic": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Software Development Template"
          },
          "Organization": {
            "type": "string",
            "description": "Organization this template belongs to (null for system templates)",
            "nullable": true
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "UsageCount": {
            "type": "integer",
            "example": "42"
          }
        }
      },
      "ProjectUserRequest": {
        "type": "object",
        "description": "ProjectUserRequest model",
        "properties": {
          "Allocation": {
            "type": "number",
            "example": "100.0"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "ProjectView": {
        "type": "object",
        "description": "ProjectView model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Current sprint tasks and progress"
          },
          "Filters": {
            "type": "string",
            "example": "{\"assignee\":[\"user1\",\"user2\"],\"priority\":[\"high\",\"medium\"]}"
          },
          "Grouping": {
            "type": "string",
            "example": "{\"field\":\"status\",\"showCount\":true}"
          },
          "IsDefault": {
            "type": "boolean",
            "example": "true"
          },
          "IsPublic": {
            "type": "boolean",
            "example": "true"
          },
          "Layout": {
            "type": "string",
            "example": "{\"columns\":[\"todo\",\"in_progress\",\"done\"],\"groupBy\":\"status\",\"sortBy\":\"priority\"}"
          },
          "Name": {
            "type": "string",
            "example": "Sprint Board"
          },
          "Position": {
            "type": "integer",
            "example": "1"
          },
          "Project": {
            "type": "string",
            "description": "Project this view belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Sorting": {
            "type": "string",
            "example": "{\"field\":\"created_at\",\"direction\":\"desc\"}"
          },
          "Type": {
            "type": "string",
            "example": "board"
          }
        }
      },
      "ProjectWorkflow": {
        "type": "object",
        "description": "ProjectWorkflow model",
        "properties": {
          "Actions": {
            "type": "string",
            "example": "{\"action\":\"set_field\",\"field\":\"status\",\"value\":\"todo\"}"
          },
          "Conditions": {
            "type": "string",
            "example": "{\"field\":\"type\",\"operator\":\"equals\",\"value\":\"task\"}"
          },
          "Description": {
            "type": "string",
            "example": "Automatically assign new tasks to current sprint"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Auto-assign to Sprint"
          },
          "Position": {
            "type": "integer",
            "example": "1"
          },
          "Project": {
            "type": "string",
            "description": "Project this workflow belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Trigger": {
            "type": "string",
            "example": "item_added"
          }
        }
      },
      "Province": {
        "type": "object",
        "description": "Province model",
        "properties": {
          "Cities": {
            "type": "array",
            "description": "Province's cities",
            "items": {
              "type": "string"
            }
          },
          "Code": {
            "type": "string",
            "example": "CA"
          },
          "Country": {
            "type": "string",
            "description": "Province's country"
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "California"
          },
          "NumericCode": {
            "type": "integer",
            "example": "32"
          }
        }
      },
      "PushSubscription": {
        "type": "object",
        "description": "PushSubscription model",
        "properties": {
          "AuthToken": {
            "type": "string"
          },
          "ContentEncoding": {
            "type": "string"
          },
          "Endpoint": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "P256dhKey": {
            "type": "string"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "QueryBuilderResponse": {
        "type": "object",
        "description": "QueryBuilderResponse model",
        "properties": {
          "Data": {
            "type": "string"
          },
          "Message": {
            "type": "string",
            "example": "Data retrieved successfully"
          },
          "Pagination": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "success"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "description": "RefreshTokenRequest model",
        "properties": {
          "RefreshToken": {
            "type": "string",
            "example": "abc123def456"
          }
        },
        "required": [
          "RefreshToken"
        ]
      },
      "RegisterRequest": {
        "type": "object",
        "description": "RegisterRequest model",
        "properties": {
          "AcceptTerms": {
            "type": "boolean",
            "example": "true"
          },
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "Name": {
            "type": "string",
            "example": "John Doe"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          },
          "PasswordConfirmation": {
            "type": "string",
            "example": "password123"
          }
        },
        "required": [
          "Name",
          "Email",
          "Password",
          "PasswordConfirmation",
          "AcceptTerms"
        ]
      },
      "RemoveReactionRequest": {
        "type": "object",
        "description": "RemoveReactionRequest model",
        "properties": {
          "Emoji": {
            "type": "string",
            "example": "👍"
          }
        }
      },
      "ReportIssueRequest": {
        "type": "object",
        "description": "ReportIssueRequest model",
        "properties": {
          "Attachments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string"
          },
          "DeviceInfo": {
            "type": "string"
          },
          "IssueType": {
            "type": "string"
          },
          "Severity": {
            "type": "string"
          },
          "Steps": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "description": "ResetPasswordRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "Password": {
            "type": "string",
            "example": "newpassword123"
          },
          "PasswordConfirmation": {
            "type": "string",
            "example": "newpassword123"
          },
          "Token": {
            "type": "string",
            "example": "abc123def456"
          }
        },
        "required": [
          "Token",
          "Email",
          "Password",
          "PasswordConfirmation"
        ]
      },
      "ResolveThreadRequest": {
        "type": "object",
        "description": "ResolveThreadRequest model",
        "properties": {
          "Note": {
            "type": "string"
          }
        }
      },
      "RespondToInvitationRequest": {
        "type": "object",
        "description": "RespondToInvitationRequest model",
        "properties": {
          "Response": {
            "type": "string"
          }
        }
      },
      "Role": {
        "type": "object",
        "description": "Role model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Administrator role with full access"
          },
          "Guard": {
            "type": "string",
            "example": "web"
          },
          "Name": {
            "type": "string",
            "example": "admin"
          },
          "Permissions": {
            "type": "array",
            "description": "Permissions assigned to this role",
            "items": {
              "type": "string"
            }
          },
          "Tenant": {
            "type": "string",
            "description": "Tenant this role belongs to",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Users": {
            "type": "array",
            "description": "Users assigned this role",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RolePermission": {
        "type": "object",
        "description": "RolePermission model",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "PermissionID": {
            "type": "string"
          },
          "RoleID": {
            "type": "string"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ScheduleMeetingRequest": {
        "type": "object",
        "description": "ScheduleMeetingRequest model",
        "properties": {
          "AllowJoinBeforeHost": {
            "type": "boolean"
          },
          "EventID": {
            "type": "string"
          },
          "MeetingID": {
            "type": "string"
          },
          "MeetingNotes": {
            "type": "string"
          },
          "MeetingType": {
            "type": "string"
          },
          "MeetingURL": {
            "type": "string"
          },
          "MuteParticipantsOnEntry": {
            "type": "boolean"
          },
          "NotificationSettings": {
            "type": "string"
          },
          "Passcode": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "RecordMeeting": {
            "type": "boolean"
          },
          "SecuritySettings": {
            "type": "string"
          },
          "WaitingRoom": {
            "type": "string"
          }
        }
      },
      "SendChatMessageRequest": {
        "type": "object",
        "description": "SendChatMessageRequest model",
        "properties": {
          "Content": {
            "type": "string"
          },
          "MessageType": {
            "type": "string"
          },
          "RecipientID": {
            "type": "string"
          }
        }
      },
      "SendMessageRequest": {
        "type": "object",
        "description": "SendMessageRequest model",
        "properties": {
          "Content": {
            "type": "string"
          },
          "Metadata": {
            "type": "string"
          },
          "ReplyToID": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        }
      },
      "ShareFileRequest": {
        "type": "object",
        "description": "ShareFileRequest model",
        "properties": {
          "Email": {
            "type": "string"
          },
          "ExpiresAt": {
            "type": "string",
            "nullable": true
          },
          "Message": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Permission": {
            "type": "string"
          },
          "RequirePassword": {
            "type": "boolean"
          },
          "ShareType": {
            "type": "string"
          }
        }
      },
      "SharedAttachmentLink": {
        "type": "object",
        "description": "SharedAttachmentLink model",
        "properties": {
          "AccessLogs": {
            "type": "array",
            "description": "Access logs for this share link",
            "items": {
              "type": "string"
            }
          },
          "AccessRestrictions": {
            "type": "string",
            "example": "{\"allowed_domains\": [\"company.com\"], \"ip_whitelist\": [\"192.168.1.0/24\"]}"
          },
          "Attachment": {
            "type": "string",
            "description": "Associated attachment",
            "nullable": true
          },
          "AttachmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "CreatedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Creator": {
            "type": "string",
            "description": "User who created the link",
            "nullable": true
          },
          "DownloadCount": {
            "type": "integer",
            "example": "3"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-02-15T23:59:59Z",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "LastAccessedAt": {
            "type": "string",
            "example": "2024-01-20T14:30:00Z",
            "nullable": true
          },
          "MaxDownloads": {
            "type": "integer",
            "example": "10",
            "nullable": true
          },
          "PasswordHash": {
            "type": "string"
          },
          "RequiresPassword": {
            "type": "boolean",
            "example": "false"
          },
          "ShareToken": {
            "type": "string",
            "example": "\"att_share_01HXYZ123456789ABCDEFGHIJK\""
          },
          "Title": {
            "type": "string",
            "example": "\"Meeting Agenda - Shared Link\""
          }
        }
      },
      "SharedCalendarView": {
        "type": "object",
        "description": "SharedCalendarView model",
        "properties": {
          "ActiveDelegations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DelegatedCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OwnedCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SharedCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "TotalDelegations": {
            "type": "integer"
          },
          "TotalSharedCalendars": {
            "type": "integer"
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "SharedLinkAccess": {
        "type": "object",
        "description": "SharedLinkAccess model",
        "properties": {
          "AccessSuccessful": {
            "type": "boolean",
            "example": "true"
          },
          "AccessType": {
            "type": "string",
            "example": "\"download\""
          },
          "AccessedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-20T14:30:00Z"
          },
          "FailureReason": {
            "type": "string",
            "example": "\"password_incorrect\""
          },
          "IPAddress": {
            "type": "string",
            "example": "\"203.0.113.100\""
          },
          "LocationData": {
            "type": "string",
            "example": "{\"country\": \"US\", \"region\": \"CA\", \"city\": \"San Francisco\"}"
          },
          "Referrer": {
            "type": "string",
            "example": "\"https://calendar.company.com/events/123\""
          },
          "ShareLink": {
            "type": "string",
            "description": "Associated share link",
            "nullable": true
          },
          "ShareLinkID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "UserAgent": {
            "type": "string",
            "example": "\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36\""
          }
        }
      },
      "StartRecordingRequest": {
        "type": "object",
        "description": "StartRecordingRequest model",
        "properties": {
          "AllowedViewers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AutoTranscribe": {
            "type": "boolean"
          },
          "EncryptionEnabled": {
            "type": "boolean"
          },
          "Format": {
            "type": "string"
          },
          "GenerateSummary": {
            "type": "boolean"
          },
          "IncludeAudio": {
            "type": "boolean"
          },
          "IncludeScreenShare": {
            "type": "boolean"
          },
          "IncludeVideo": {
            "type": "boolean"
          },
          "IsPublic": {
            "type": "boolean"
          },
          "LanguageCode": {
            "type": "string"
          },
          "Quality": {
            "type": "string"
          },
          "RetentionDays": {
            "type": "integer"
          },
          "SeparateAudioTracks": {
            "type": "boolean"
          },
          "WatermarkEnabled": {
            "type": "boolean"
          }
        }
      },
      "SubmitPollVoteRequest": {
        "type": "object",
        "description": "SubmitPollVoteRequest model",
        "properties": {
          "PollID": {
            "type": "string"
          },
          "Responses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Task": {
        "type": "object",
        "description": "Task model",
        "properties": {
          "Activities": {
            "type": "array",
            "description": "Task activities",
            "items": {
              "type": "string"
            }
          },
          "ActualHours": {
            "type": "number",
            "example": "6.5"
          },
          "Assignee": {
            "type": "string",
            "description": "Task assignee",
            "nullable": true
          },
          "AssigneeID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Attachments": {
            "type": "array",
            "description": "Task attachments",
            "items": {
              "type": "string"
            }
          },
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Comments": {
            "type": "array",
            "description": "Task comments",
            "items": {
              "type": "string"
            }
          },
          "CustomFieldValues": {
            "type": "array",
            "description": "Task custom field values",
            "items": {
              "type": "string"
            }
          },
          "Dependencies": {
            "type": "array",
            "description": "Task dependencies (tasks that depend on this task)",
            "items": {
              "type": "string"
            }
          },
          "Dependents": {
            "type": "array",
            "description": "Tasks this task depends on",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string",
            "example": "Add JWT-based authentication with refresh tokens"
          },
          "DueDate": {
            "type": "string",
            "example": "2024-01-31T00:00:00Z",
            "nullable": true
          },
          "EstimatedHours": {
            "type": "number",
            "example": "8.0"
          },
          "Icon": {
            "type": "string",
            "example": "feature"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsArchived": {
            "type": "boolean",
            "example": "false"
          },
          "Labels": {
            "type": "array",
            "description": "Task labels",
            "items": {
              "type": "string"
            }
          },
          "Milestone": {
            "type": "string",
            "description": "Associated milestone",
            "nullable": true
          },
          "MilestoneID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Number": {
            "type": "integer",
            "example": "1"
          },
          "ParentTask": {
            "type": "string",
            "description": "Parent task",
            "nullable": true
          },
          "ParentTaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Position": {
            "type": "integer",
            "example": "1"
          },
          "Priority": {
            "type": "string",
            "example": "high"
          },
          "Progress": {
            "type": "number",
            "example": "75.0"
          },
          "Project": {
            "type": "string",
            "description": "Project this task belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Reviewer": {
            "type": "string",
            "description": "Task reviewer",
            "nullable": true
          },
          "ReviewerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"auto_assign\":true,\"require_review\":false}"
          },
          "StartDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "in_progress"
          },
          "Subtasks": {
            "type": "array",
            "description": "Subtasks",
            "items": {
              "type": "string"
            }
          },
          "TimeEntries": {
            "type": "array",
            "description": "Task time entries",
            "items": {
              "type": "string"
            }
          },
          "Title": {
            "type": "string",
            "example": "Implement user authentication"
          },
          "Type": {
            "type": "string",
            "example": "feature"
          }
        }
      },
      "TaskActivity": {
        "type": "object",
        "description": "TaskActivity model",
        "properties": {
          "Data": {
            "type": "string",
            "example": "{\"old_value\":\"todo\",\"new_value\":\"in_progress\"}"
          },
          "Description": {
            "type": "string",
            "example": "Task assigned to John Doe"
          },
          "Task": {
            "type": "string",
            "description": "Task this activity belongs to",
            "nullable": true
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "assigned"
          },
          "User": {
            "type": "string",
            "description": "User who performed the activity",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "TaskAttachment": {
        "type": "object",
        "description": "TaskAttachment model",
        "properties": {
          "FilePath": {
            "type": "string",
            "example": "/uploads/tasks/01HXYZ123456789ABCDEFGHIJK/screenshot.png"
          },
          "FileSize": {
            "type": "integer",
            "example": "1024768"
          },
          "Filename": {
            "type": "string",
            "example": "screenshot.png"
          },
          "MimeType": {
            "type": "string",
            "example": "image/png"
          },
          "OriginalFilename": {
            "type": "string",
            "example": "My Screenshot.png"
          },
          "Task": {
            "type": "string",
            "description": "Task this attachment belongs to",
            "nullable": true
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "UploadedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Uploader": {
            "type": "string",
            "description": "User who uploaded the attachment",
            "nullable": true
          }
        }
      },
      "TaskBoard": {
        "type": "object",
        "description": "TaskBoard model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Columns": {
            "type": "array",
            "description": "Board columns",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string",
            "example": "Main development workflow board"
          },
          "Icon": {
            "type": "string",
            "example": "board"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsDefault": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Development Board"
          },
          "Project": {
            "type": "string",
            "description": "Project this board belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Settings": {
            "type": "string",
            "example": "{\"columns\":[\"todo\",\"in_progress\",\"done\"],\"filters\":{\"assignee\":\"all\"}}"
          },
          "Type": {
            "type": "string",
            "example": "kanban"
          }
        }
      },
      "TaskBoardColumn": {
        "type": "object",
        "description": "TaskBoardColumn model",
        "properties": {
          "Board": {
            "type": "string",
            "description": "Board this column belongs to",
            "nullable": true
          },
          "BoardID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Color": {
            "type": "string",
            "example": "#F59E0B"
          },
          "Description": {
            "type": "string",
            "example": "Tasks currently being worked on"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "In Progress"
          },
          "Position": {
            "type": "integer",
            "example": "2"
          },
          "StatusFilter": {
            "type": "string",
            "example": "in_progress"
          },
          "TaskLimit": {
            "type": "integer",
            "example": "10"
          }
        }
      },
      "TaskBoardColumnRequest": {
        "type": "object",
        "description": "TaskBoardColumnRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#F59E0B"
          },
          "Description": {
            "type": "string",
            "example": "Tasks currently being worked on"
          },
          "Name": {
            "type": "string",
            "example": "In Progress"
          },
          "Position": {
            "type": "integer",
            "example": "2"
          },
          "StatusFilter": {
            "type": "string",
            "example": "in_progress"
          },
          "TaskLimit": {
            "type": "integer",
            "example": "10"
          }
        }
      },
      "TaskBoardRequest": {
        "type": "object",
        "description": "TaskBoardRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Main development workflow board"
          },
          "Icon": {
            "type": "string",
            "example": "board"
          },
          "IsDefault": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Development Board"
          },
          "Settings": {
            "type": "string",
            "example": "{\"columns\":[\"todo\",\"in_progress\",\"done\"],\"filters\":{\"assignee\":\"all\"}}"
          },
          "Type": {
            "type": "string",
            "example": "kanban"
          }
        }
      },
      "TaskComment": {
        "type": "object",
        "description": "TaskComment model",
        "properties": {
          "Author": {
            "type": "string",
            "description": "Comment author",
            "nullable": true
          },
          "AuthorID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Content": {
            "type": "string",
            "example": "This looks good! Ready for review."
          },
          "IsInternal": {
            "type": "boolean",
            "example": "false"
          },
          "ParentComment": {
            "type": "string",
            "description": "Parent comment",
            "nullable": true
          },
          "ParentCommentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Replies": {
            "type": "array",
            "description": "Reply comments",
            "items": {
              "type": "string"
            }
          },
          "Task": {
            "type": "string",
            "description": "Task this comment belongs to",
            "nullable": true
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "comment"
          }
        }
      },
      "TaskCommentRequest": {
        "type": "object",
        "description": "TaskCommentRequest model",
        "properties": {
          "Content": {
            "type": "string",
            "example": "This looks good! Ready for review."
          },
          "IsInternal": {
            "type": "boolean",
            "example": "false"
          },
          "ParentCommentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "example": "comment"
          }
        }
      },
      "TaskDependency": {
        "type": "object",
        "description": "TaskDependency model",
        "properties": {
          "DependentTask": {
            "type": "string",
            "description": "Task that is depended upon",
            "nullable": true
          },
          "DependentTaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Task": {
            "type": "string",
            "description": "Task that depends on another",
            "nullable": true
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "blocks"
          }
        }
      },
      "TaskDependencyRequest": {
        "type": "object",
        "description": "TaskDependencyRequest model",
        "properties": {
          "DependentTaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "blocks"
          }
        }
      },
      "TaskFieldValue": {
        "type": "object",
        "description": "TaskFieldValue model",
        "properties": {
          "Field": {
            "type": "string",
            "description": "Custom field definition",
            "nullable": true
          },
          "FieldID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Task": {
            "type": "string",
            "description": "Task this value belongs to",
            "nullable": true
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Value": {
            "type": "string",
            "example": "High"
          },
          "ValueJSON": {
            "type": "string",
            "example": "{\"selected\":[\"option1\",\"option2\"]}"
          }
        }
      },
      "TaskFilterRequest": {
        "type": "object",
        "description": "TaskFilterRequest model",
        "properties": {
          "AssigneeID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "DueDateFrom": {
            "type": "string",
            "example": "2024-01-01T00:00:00Z",
            "nullable": true
          },
          "DueDateTo": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true",
            "nullable": true
          },
          "IsArchived": {
            "type": "boolean",
            "example": "false",
            "nullable": true
          },
          "LabelIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\",\"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          },
          "MilestoneID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ParentTaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Priority": {
            "type": "string",
            "example": "high"
          },
          "Search": {
            "type": "string",
            "example": "authentication"
          },
          "SortBy": {
            "type": "string",
            "example": "created_at"
          },
          "SortDirection": {
            "type": "string",
            "example": "desc"
          },
          "Status": {
            "type": "string",
            "example": "in_progress"
          },
          "Type": {
            "type": "string",
            "example": "feature"
          }
        }
      },
      "TaskLabel": {
        "type": "object",
        "description": "TaskLabel model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#EF4444"
          },
          "Description": {
            "type": "string",
            "example": "Issues that need to be fixed"
          },
          "Icon": {
            "type": "string",
            "example": "bug"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Bug"
          },
          "Project": {
            "type": "string",
            "description": "Project this label belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Tasks": {
            "type": "array",
            "description": "Tasks with this label",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TaskLabelPivot": {
        "type": "object",
        "description": "TaskLabelPivot model",
        "properties": {
          "AddedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "AddedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "LabelID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Task": {
            "type": "string"
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "TaskLabel": {
            "type": "string"
          },
          "User": {
            "type": "string"
          }
        }
      },
      "TaskLabelRequest": {
        "type": "object",
        "description": "TaskLabelRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#EF4444"
          },
          "Description": {
            "type": "string",
            "example": "Issues that need to be fixed"
          },
          "Icon": {
            "type": "string",
            "example": "bug"
          },
          "Name": {
            "type": "string",
            "example": "Bug"
          }
        }
      },
      "TaskRequest": {
        "type": "object",
        "description": "TaskRequest model",
        "properties": {
          "AssigneeID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Add JWT-based authentication with refresh tokens"
          },
          "DueDate": {
            "type": "string",
            "example": "2024-01-31T00:00:00Z",
            "nullable": true
          },
          "EstimatedHours": {
            "type": "number",
            "example": "8.0"
          },
          "Icon": {
            "type": "string",
            "example": "feature"
          },
          "MilestoneID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "ParentTaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Position": {
            "type": "integer",
            "example": "1"
          },
          "Priority": {
            "type": "string",
            "example": "high"
          },
          "Progress": {
            "type": "number",
            "example": "75.0"
          },
          "ReviewerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"auto_assign\":true,\"require_review\":false}"
          },
          "StartDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "in_progress"
          },
          "Title": {
            "type": "string",
            "example": "Implement user authentication"
          },
          "Type": {
            "type": "string",
            "example": "feature"
          }
        }
      },
      "TaskTimeEntry": {
        "type": "object",
        "description": "TaskTimeEntry model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Implemented user authentication"
          },
          "Duration": {
            "type": "number",
            "example": "8.0"
          },
          "EndTime": {
            "type": "string",
            "example": "2024-01-15T17:00:00Z",
            "nullable": true
          },
          "IsBillable": {
            "type": "boolean",
            "example": "true"
          },
          "Rate": {
            "type": "number",
            "example": "50.00"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T09:00:00Z"
          },
          "Task": {
            "type": "string",
            "description": "Task this time entry belongs to",
            "nullable": true
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "User": {
            "type": "string",
            "description": "User who logged the time",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "TaskTimeEntryRequest": {
        "type": "object",
        "description": "TaskTimeEntryRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Implemented user authentication"
          },
          "Duration": {
            "type": "number",
            "example": "8.0"
          },
          "EndTime": {
            "type": "string",
            "example": "2024-01-15T17:00:00Z",
            "nullable": true
          },
          "IsBillable": {
            "type": "boolean",
            "example": "true"
          },
          "Rate": {
            "type": "number",
            "example": "50.00"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T09:00:00Z"
          }
        }
      },
      "Team": {
        "type": "object",
        "description": "Team model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "BE-DEV"
          },
          "Color": {
            "type": "string",
            "example": "#10B981"
          },
          "CurrentSize": {
            "type": "integer",
            "example": "8"
          },
          "Department": {
            "type": "string",
            "description": "Department this team belongs to",
            "nullable": true
          },
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "Backend development and API team"
          },
          "Icon": {
            "type": "string",
            "example": "backend"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "MaxSize": {
            "type": "integer",
            "example": "10"
          },
          "Name": {
            "type": "string",
            "example": "Backend Development"
          },
          "Organization": {
            "type": "string",
            "description": "Organization this team belongs to",
            "nullable": true
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Projects": {
            "type": "array",
            "description": "Projects this team works on",
            "items": {
              "type": "string"
            }
          },
          "TeamLead": {
            "type": "string",
            "description": "Team lead",
            "nullable": true
          },
          "TeamLeadID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "example": "functional"
          },
          "Users": {
            "type": "array",
            "description": "Users in this team",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TeamProject": {
        "type": "object",
        "description": "TeamProject model",
        "properties": {
          "Allocation": {
            "type": "number",
            "example": "100.0"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Project": {
            "type": "string"
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Role": {
            "type": "string",
            "example": "contributor"
          },
          "Team": {
            "type": "string"
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "TeamProjectRequest": {
        "type": "object",
        "description": "TeamProjectRequest model",
        "properties": {
          "Allocation": {
            "type": "number",
            "example": "100.0"
          },
          "Role": {
            "type": "string",
            "example": "contributor"
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "TeamRequest": {
        "type": "object",
        "description": "TeamRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "BE-DEV"
          },
          "Color": {
            "type": "string",
            "example": "#10B981"
          },
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "Backend development and API team"
          },
          "Icon": {
            "type": "string",
            "example": "backend"
          },
          "MaxSize": {
            "type": "integer",
            "example": "10"
          },
          "Name": {
            "type": "string",
            "example": "Backend Development"
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "TeamLeadID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "example": "functional"
          }
        }
      },
      "TeamUserRequest": {
        "type": "object",
        "description": "TeamUserRequest model",
        "properties": {
          "Allocation": {
            "type": "number",
            "example": "100.0"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "Tenant": {
        "type": "object",
        "description": "Tenant model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Main tenant for Acme Corporation"
          },
          "Domain": {
            "type": "string",
            "example": "acme.com"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "Organization": {
            "type": "string",
            "description": "Organization associated with this tenant (one-to-one relationship)",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"theme\":\"dark\",\"timezone\":\"UTC\"}"
          },
          "Slug": {
            "type": "string",
            "example": "acme-corp"
          },
          "Users": {
            "type": "array",
            "description": "Users associated with this tenant",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateCalendarEventRequest": {
        "type": "object",
        "description": "UpdateCalendarEventRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Weekly team sync to discuss project progress"
          },
          "EndTime": {
            "type": "string",
            "example": "2024-01-15T11:00:00Z",
            "nullable": true
          },
          "IsAllDay": {
            "type": "boolean",
            "example": "false"
          },
          "IsRecurring": {
            "type": "boolean",
            "example": "false"
          },
          "Location": {
            "type": "string",
            "example": "Conference Room A"
          },
          "Meeting": {
            "type": "string",
            "nullable": true
          },
          "RecurrenceRule": {
            "type": "string",
            "example": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO"
          },
          "RecurrenceUntil": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "ReminderSettings": {
            "type": "string",
            "example": "{\"email\": 15, \"push\": 30, \"sms\": 60}"
          },
          "StartTime": {
            "type": "string",
            "example": "2024-01-15T10:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "Timezone": {
            "type": "string",
            "example": "UTC"
          },
          "Title": {
            "type": "string",
            "example": "Team Meeting"
          },
          "Type": {
            "type": "string",
            "example": "meeting"
          }
        }
      },
      "UpdateChatRoomRequest": {
        "type": "object",
        "description": "UpdateChatRoomRequest model",
        "properties": {
          "Avatar": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "UpdateCityRequest": {
        "type": "object",
        "description": "UpdateCityRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "LA"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Los Angeles"
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UpdateCountryRequest": {
        "type": "object",
        "description": "UpdateCountryRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "US"
          },
          "Code3": {
            "type": "string",
            "example": "USA"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "United States"
          },
          "NumericCode": {
            "type": "string",
            "example": "840"
          }
        }
      },
      "UpdateDistrictRequest": {
        "type": "object",
        "description": "UpdateDistrictRequest model",
        "properties": {
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Code": {
            "type": "string",
            "example": "DT"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Downtown"
          }
        }
      },
      "UpdateEventTemplateRequest": {
        "type": "object",
        "description": "UpdateEventTemplateRequest model",
        "properties": {
          "Category": {
            "type": "string",
            "example": "meeting"
          },
          "DefaultColor": {
            "type": "string",
            "example": "#3B82F6"
          },
          "DefaultDuration": {
            "type": "integer",
            "example": "30"
          },
          "DefaultLocation": {
            "type": "string",
            "example": "Conference Room A"
          },
          "DefaultParticipantRoles": {
            "type": "string",
            "example": "[{\"role\": \"organizer\", \"required\": true}, {\"role\": \"attendee\", \"required\": false}]"
          },
          "DefaultRecurrenceRule": {
            "type": "string",
            "example": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO"
          },
          "DefaultReminderSettings": {
            "type": "string",
            "example": "{\"email\": 15, \"push\": 30}"
          },
          "Description": {
            "type": "string",
            "example": "Standard weekly team standup meeting template"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsPublic": {
            "type": "boolean",
            "example": "false"
          },
          "Name": {
            "type": "string",
            "example": "Weekly Team Standup"
          },
          "Settings": {
            "type": "string",
            "example": "{\"allow_conflicts\": false, \"require_confirmation\": true, \"auto_schedule\": false}"
          },
          "Tags": {
            "type": "string",
            "example": "[\"standup\", \"agile\", \"team\"]"
          },
          "Type": {
            "type": "string",
            "example": "team"
          }
        }
      },
      "UpdateMeetingRequest": {
        "type": "object",
        "description": "UpdateMeetingRequest model",
        "properties": {
          "AllowJoinBeforeHost": {
            "type": "boolean",
            "example": "true"
          },
          "AttendanceCount": {
            "type": "integer",
            "example": "5"
          },
          "MeetingID": {
            "type": "string",
            "example": "123456789"
          },
          "MeetingMinutes": {
            "type": "string",
            "example": "Key decisions: 1. Project timeline approved 2. Budget increased by 10%"
          },
          "MeetingNotes": {
            "type": "string",
            "example": "Agenda: 1. Project updates 2. Q\u0026A"
          },
          "MeetingType": {
            "type": "string",
            "example": "video"
          },
          "MeetingURL": {
            "type": "string",
            "example": "https://zoom.us/j/123456789"
          },
          "MuteParticipantsOnEntry": {
            "type": "boolean",
            "example": "false"
          },
          "Passcode": {
            "type": "string",
            "example": "123456"
          },
          "Platform": {
            "type": "string",
            "example": "zoom"
          },
          "RecordMeeting": {
            "type": "boolean",
            "example": "false"
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "WaitingRoom": {
            "type": "string",
            "example": "enabled"
          }
        }
      },
      "UpdateMeetingSettingsRequest": {
        "type": "object",
        "description": "UpdateMeetingSettingsRequest model",
        "properties": {
          "AllowJoinBeforeHost": {
            "type": "boolean",
            "nullable": true
          },
          "MaxParticipants": {
            "type": "integer",
            "nullable": true
          },
          "MuteParticipantsOnEntry": {
            "type": "boolean",
            "nullable": true
          },
          "RecordMeeting": {
            "type": "boolean",
            "nullable": true
          },
          "WaitingRoom": {
            "type": "string"
          }
        }
      },
      "UpdateMeetingStatusRequest": {
        "type": "object",
        "description": "UpdateMeetingStatusRequest model",
        "properties": {
          "AttendanceCount": {
            "type": "integer",
            "example": "5"
          },
          "MeetingMinutes": {
            "type": "string",
            "example": "Key decisions: 1. Project timeline approved 2. Budget increased by 10%"
          },
          "RecordingURL": {
            "type": "string",
            "example": "https://zoom.us/recording/123456789"
          },
          "Status": {
            "type": "string",
            "example": "in-progress"
          }
        },
        "required": [
          "Status"
        ]
      },
      "UpdateNotificationSettingsRequest": {
        "type": "object",
        "description": "UpdateNotificationSettingsRequest model",
        "properties": {
          "CustomSettings": {
            "type": "string"
          },
          "DesktopNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "EmailNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "IsMuted": {
            "type": "boolean",
            "nullable": true
          },
          "MentionNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "MuteUntil": {
            "type": "string",
            "nullable": true
          },
          "PushNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "ReactionNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "ThreadNotifications": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "UpdateParticipantResponseRequest": {
        "type": "object",
        "description": "UpdateParticipantResponseRequest model",
        "properties": {
          "ResponseComment": {
            "type": "string",
            "example": "I'll be 5 minutes late"
          },
          "ResponseStatus": {
            "type": "string",
            "example": "accepted"
          }
        },
        "required": [
          "ResponseStatus"
        ]
      },
      "UpdateParticipantStatusRequest": {
        "type": "object",
        "description": "UpdateParticipantStatusRequest model",
        "properties": {
          "IsHandRaised": {
            "type": "boolean",
            "nullable": true
          },
          "IsMuted": {
            "type": "boolean",
            "nullable": true
          },
          "IsScreenSharing": {
            "type": "boolean",
            "nullable": true
          },
          "IsVideoEnabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "UpdatePermissionRequest": {
        "type": "object",
        "description": "UpdatePermissionRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Create new users"
          },
          "Guard": {
            "type": "string",
            "example": "api"
          },
          "Name": {
            "type": "string",
            "example": "users.create"
          }
        }
      },
      "UpdateProvinceRequest": {
        "type": "object",
        "description": "UpdateProvinceRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "CA"
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "California"
          }
        }
      },
      "UpdateRoleRequest": {
        "type": "object",
        "description": "UpdateRoleRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Administrator role with full access"
          },
          "Guard": {
            "type": "string",
            "example": "api"
          },
          "Name": {
            "type": "string",
            "example": "admin"
          }
        }
      },
      "UpdateSecurityPolicyRequest": {
        "type": "object",
        "description": "UpdateSecurityPolicyRequest model",
        "properties": {
          "AllowAnonymousJoin": {
            "type": "boolean",
            "nullable": true
          },
          "AllowedDomains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "BlockedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ChatPermissions": {
            "type": "string"
          },
          "DisableCamera": {
            "type": "boolean",
            "nullable": true
          },
          "EnableEndToEndEncrypt": {
            "type": "boolean",
            "nullable": true
          },
          "LockMeeting": {
            "type": "boolean",
            "nullable": true
          },
          "MaxParticipants": {
            "type": "integer",
            "nullable": true
          },
          "MuteOnEntry": {
            "type": "boolean",
            "nullable": true
          },
          "RecordingPermissions": {
            "type": "string"
          },
          "RequirePassword": {
            "type": "boolean",
            "nullable": true
          },
          "RequireRegistration": {
            "type": "boolean",
            "nullable": true
          },
          "RequireWaitingRoom": {
            "type": "boolean",
            "nullable": true
          },
          "ScreenSharePermissions": {
            "type": "string"
          }
        }
      },
      "UpdateTenantRequest": {
        "type": "object",
        "description": "UpdateTenantRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "A leading technology company"
          },
          "Domain": {
            "type": "string",
            "example": "acme.example.com"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "Settings": {
            "type": "string",
            "example": "{\"theme\": \"dark\", \"timezone\": \"UTC\"}"
          },
          "Slug": {
            "type": "string",
            "example": "acme-corp"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "description": "UpdateUserRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "John Doe"
          },
          "Password": {
            "type": "string",
            "example": "newpassword123"
          }
        }
      },
      "UpdateWhiteboardRequest": {
        "type": "object",
        "description": "UpdateWhiteboardRequest model",
        "properties": {
          "Content": {
            "type": "string"
          },
          "Metadata": {
            "type": "string"
          },
          "Operation": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "description": "User model",
        "properties": {
          "Avatar": {
            "type": "string",
            "example": "https://example.com/avatar.jpg"
          },
          "DiscordWebhook": {
            "type": "string",
            "example": "https://discord.com/api/webhooks/..."
          },
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "EmailVerifiedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "FailedLoginAttempts": {
            "type": "integer",
            "example": "0"
          },
          "GoogleID": {
            "type": "string",
            "example": "123456789012345678901",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "LastLoginAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "LastLoginIp": {
            "type": "string",
            "example": "192.168.1.1"
          },
          "LastLoginUserAgent": {
            "type": "string",
            "example": "Mozilla/5.0..."
          },
          "LockedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "LockedUntil": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "MfaBackupCodes": {
            "type": "string",
            "example": "[{\"code\":\"1234-5678\",\"used\":false}]"
          },
          "MfaEnabled": {
            "type": "boolean",
            "example": "false"
          },
          "MfaEnabledAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "MfaSecret": {
            "type": "string",
            "example": "abc123def456"
          },
          "Name": {
            "type": "string",
            "example": "John Doe"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          },
          "PasswordResetExpiresAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "PasswordResetToken": {
            "type": "string",
            "example": "abc123def456"
          },
          "Phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "PreferredNotificationChannels": {
            "type": "array",
            "description": "User's preferred notification channels",
            "items": {
              "type": "string"
            }
          },
          "Profile": {
            "type": "string",
            "description": "User's profile information",
            "nullable": true
          },
          "PushSubscriptions": {
            "type": "array",
            "description": "User's push subscriptions",
            "items": {
              "type": "string"
            }
          },
          "RememberToken": {
            "type": "string",
            "example": "abc123def456"
          },
          "Roles": {
            "type": "array",
            "description": "User's roles across tenants",
            "items": {
              "type": "string"
            }
          },
          "SlackWebhook": {
            "type": "string",
            "example": "https://hooks.slack.com/services/..."
          },
          "TelegramChatID": {
            "type": "string",
            "example": "123456789"
          },
          "Tenants": {
            "type": "array",
            "description": "User's associated tenants",
            "items": {
              "type": "string"
            }
          },
          "WebauthnCredentials": {
            "type": "array",
            "description": "User's WebAuthn credentials",
            "items": {
              "type": "string"
            }
          },
          "WebauthnEnabled": {
            "type": "boolean",
            "example": "false"
          },
          "WebauthnEnabledAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "WebhookURL": {
            "type": "string",
            "example": "https://example.com/webhook"
          }
        }
      },
      "UserDepartment": {
        "type": "object",
        "description": "UserDepartment model",
        "properties": {
          "Department": {
            "type": "string"
          },
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserEmploymentHistory": {
        "type": "object",
        "description": "UserEmploymentHistory model",
        "properties": {
          "ChangeReason": {
            "type": "string",
            "example": "Performance-based promotion"
          },
          "ChangeType": {
            "type": "string",
            "example": "promotion"
          },
          "Currency": {
            "type": "string",
            "example": "USD"
          },
          "Department": {
            "type": "string",
            "nullable": true
          },
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "EffectiveDate": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T00:00:00Z"
          },
          "EmployeeID": {
            "type": "string",
            "example": "EMP001"
          },
          "EmploymentType": {
            "type": "string",
            "example": "full_time"
          },
          "EndDate": {
            "type": "string",
            "example": "2024-12-31T00:00:00Z",
            "nullable": true
          },
          "IsCurrent": {
            "type": "boolean",
            "example": "true"
          },
          "JobLevel": {
            "type": "string",
            "nullable": true
          },
          "JobLevelID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "JobPosition": {
            "type": "string",
            "nullable": true
          },
          "JobPositionID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "JobTitle": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "Manager": {
            "type": "string",
            "nullable": true
          },
          "ManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Notes": {
            "type": "string",
            "example": "Promoted based on exceptional performance and leadership skills"
          },
          "Organization": {
            "type": "string"
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "PerformanceRating": {
            "type": "number",
            "example": "4.5",
            "nullable": true
          },
          "Salary": {
            "type": "string",
            "example": "encrypted_salary_data"
          },
          "Team": {
            "type": "string",
            "nullable": true
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserKey": {
        "type": "object",
        "description": "UserKey model",
        "properties": {
          "EncryptedPrivateKey": {
            "type": "string",
            "example": "encrypted_private_key_data"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "KeyType": {
            "type": "string",
            "example": "identity"
          },
          "PublicKey": {
            "type": "string",
            "example": "-----BEGIN PUBLIC KEY-----"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Version": {
            "type": "integer",
            "example": "1"
          }
        }
      },
      "UserOrganization": {
        "type": "object",
        "description": "UserOrganization model",
        "properties": {
          "Department": {
            "type": "string",
            "nullable": true
          },
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "EmployeeID": {
            "type": "string",
            "example": "EMP001"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2025-01-15T10:30:00Z",
            "nullable": true
          },
          "HireDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JobLevel": {
            "type": "string",
            "nullable": true
          },
          "JobLevelID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "JobPosition": {
            "type": "string",
            "nullable": true
          },
          "JobPositionID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Manager": {
            "type": "string",
            "nullable": true
          },
          "ManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Organization": {
            "type": "string"
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Permissions": {
            "type": "string",
            "example": "[\"read:projects\",\"write:reports\"]"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "Salary": {
            "type": "string",
            "example": "encrypted_salary_data"
          },
          "Status": {
            "type": "string",
            "example": "active"
          },
          "Team": {
            "type": "string",
            "nullable": true
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "TerminationDate": {
            "type": "string",
            "example": "2024-12-31T00:00:00Z",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "description": "UserProfile model",
        "properties": {
          "AccountType": {
            "type": "string",
            "example": "personal"
          },
          "Bio": {
            "type": "string",
            "example": "Software engineer passionate about building great products",
            "nullable": true
          },
          "Birthdate": {
            "type": "string",
            "example": "1990-01-15",
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "City information",
            "nullable": true
          },
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Company": {
            "type": "string",
            "example": "Acme Corporation",
            "nullable": true
          },
          "Country": {
            "type": "string",
            "description": "Country information",
            "nullable": true
          },
          "CountryCode": {
            "type": "string",
            "example": "US",
            "nullable": true
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "example": "USD"
          },
          "DateFormat": {
            "type": "string",
            "example": "Y-m-d"
          },
          "Department": {
            "type": "string",
            "example": "Engineering",
            "nullable": true
          },
          "DisplayName": {
            "type": "string",
            "example": "Johnny",
            "nullable": true
          },
          "District": {
            "type": "string",
            "description": "District information",
            "nullable": true
          },
          "DistrictID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "EmailVerified": {
            "type": "boolean",
            "example": "true"
          },
          "EmployeeID": {
            "type": "string",
            "example": "EMP001",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "FormattedAddress": {
            "type": "string",
            "example": "123 Main St\\nNew York, NY 10001\\nUS",
            "nullable": true
          },
          "Gender": {
            "type": "string",
            "example": "male",
            "nullable": true
          },
          "HireDate": {
            "type": "string",
            "example": "2024-01-15",
            "nullable": true
          },
          "JobTitle": {
            "type": "string",
            "example": "Senior Software Engineer",
            "nullable": true
          },
          "Language": {
            "type": "string",
            "example": "en"
          },
          "LastName": {
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "Locale": {
            "type": "string",
            "example": "en-US"
          },
          "Locality": {
            "type": "string",
            "example": "New York",
            "nullable": true
          },
          "Metadata": {
            "type": "string",
            "example": "{\"source\":\"google\",\"last_sync\":\"2024-01-15T10:30:00Z\"}",
            "nullable": true
          },
          "MiddleName": {
            "type": "string",
            "example": "Michael",
            "nullable": true
          },
          "Nickname": {
            "type": "string",
            "example": "JD",
            "nullable": true
          },
          "PhoneVerified": {
            "type": "boolean",
            "example": "true"
          },
          "PhoneVerifiedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "PostalCode": {
            "type": "string",
            "example": "10001",
            "nullable": true
          },
          "Preferences": {
            "type": "string",
            "example": "{\"theme\":\"dark\",\"notifications\":{\"email\":true,\"push\":false}}",
            "nullable": true
          },
          "ProfileData": {
            "type": "string",
            "example": "{\"interests\":[\"technology\",\"music\"],\"skills\":[\"golang\",\"javascript\"]}",
            "nullable": true
          },
          "ProfilePublic": {
            "type": "boolean",
            "example": "false"
          },
          "Province": {
            "type": "string",
            "description": "Province/State information",
            "nullable": true
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Region": {
            "type": "string",
            "example": "NY",
            "nullable": true
          },
          "ShowAddress": {
            "type": "boolean",
            "example": "false"
          },
          "ShowEmail": {
            "type": "boolean",
            "example": "false"
          },
          "ShowPhone": {
            "type": "boolean",
            "example": "false"
          },
          "Status": {
            "type": "string",
            "example": "active"
          },
          "StreetAddress": {
            "type": "string",
            "example": "123 Main St",
            "nullable": true
          },
          "TimeFormat": {
            "type": "string",
            "example": "H:i"
          },
          "Timezone": {
            "type": "string",
            "example": "America/New_York"
          },
          "User": {
            "type": "string",
            "description": "User this profile belongs to",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "UserType": {
            "type": "string",
            "example": "user"
          },
          "Website": {
            "type": "string",
            "example": "https://johndoe.com",
            "nullable": true
          }
        }
      },
      "UserProject": {
        "type": "object",
        "description": "UserProject model",
        "properties": {
          "Allocation": {
            "type": "number",
            "example": "100.0"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Project": {
            "type": "string"
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserRole": {
        "type": "object",
        "description": "UserRole model",
        "properties": {
          "Role": {
            "type": "string"
          },
          "RoleID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Tenant": {
            "type": "string",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserTeam": {
        "type": "object",
        "description": "UserTeam model",
        "properties": {
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "Team": {
            "type": "string"
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserTenant": {
        "type": "object",
        "description": "UserTenant model",
        "properties": {
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Tenant": {
            "type": "string"
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "ValidateAccessRequest": {
        "type": "object",
        "description": "ValidateAccessRequest model",
        "properties": {
          "BrowserInfo": {
            "type": "string"
          },
          "Capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DeviceType": {
            "type": "string"
          },
          "Location": {
            "type": "string"
          }
        }
      },
      "VerifyMfaRequest": {
        "type": "object",
        "description": "VerifyMfaRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "123456"
          }
        },
        "required": [
          "Code"
        ]
      },
      "WebauthnAuthenticateRequest": {
        "type": "object",
        "description": "WebauthnAuthenticateRequest model",
        "properties": {
          "AssertionResponse": {
            "type": "string",
            "example": "{\"id\":\"abc123\",\"response\":{\"authenticatorData\":\"...\",\"clientDataJSON\":\"...\",\"signature\":\"...\"}}"
          }
        },
        "required": [
          "AssertionResponse"
        ]
      },
      "WebauthnCredential": {
        "type": "object",
        "description": "WebauthnCredential model",
        "properties": {
          "AttestationType": {
            "type": "string",
            "example": "direct"
          },
          "BackedUp": {
            "type": "boolean",
            "example": "false"
          },
          "BackupEligible": {
            "type": "boolean",
            "example": "true"
          },
          "CredentialID": {
            "type": "string",
            "example": "abc123def456"
          },
          "Flags": {
            "type": "string",
            "example": "backup_eligible,backed_up"
          },
          "LastUsedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "My Security Key"
          },
          "PublicKey": {
            "type": "string",
            "example": "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f4CBgoOEhYaHiImKi4yNjo+QkZKTlJWWl5iZmpucnZ6foKGio6SlpqeoqaqrrK2ur7CxsrO0tba3uLm6u7y9vr/AwcLDxMXGx8jJysvMzc7P0NHS09TV1tfY2drb3N3e3+Dh4uPk5ebn6Onq6+zt7u/w8fLz9PX29/j5+vv8/f7/"
          },
          "SignCount": {
            "type": "string",
            "example": "42"
          },
          "Transports": {
            "type": "string",
            "example": "[\"usb\",\"nfc\",\"ble\"]"
          },
          "User": {
            "type": "string",
            "description": "User this credential belongs to"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "WebauthnRegisterRequest": {
        "type": "object",
        "description": "WebauthnRegisterRequest model",
        "properties": {
          "AttestationResponse": {
            "type": "string",
            "example": "{\"id\":\"abc123\",\"response\":{\"attestationObject\":\"...\",\"clientDataJSON\":\"...\"}}"
          },
          "Name": {
            "type": "string",
            "example": "My Security Key"
          }
        },
        "required": [
          "Name",
          "AttestationResponse"
        ]
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "description": "JWT token for API authentication",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apiKey": {
        "type": "apiKey",
        "description": "API key for authentication",
        "name": "X-API-Key",
        "in": "header"
      },
      "basicAuth": {
        "type": "http",
        "description": "Basic HTTP authentication",
        "scheme": "basic"
      },
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 authentication",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth/authorize",
            "tokenUrl": "/oauth/token",
            "scopes": {}
          },
          "clientCredentials": {
            "tokenUrl": "/oauth/token",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "permissions",
      "description": ""
    },
    {
      "name": "projects",
      "description": ""
    },
    {
      "name": "project-templates",
      "description": ""
    },
    {
      "name": "user-job-management",
      "description": ""
    },
    {
      "name": "roles",
      "description": ""
    },
    {
      "name": "tasks",
      "description": ""
    },
    {
      "name": "event-templates",
      "description": ""
    },
    {
      "name": "job-positions",
      "description": ""
    },
    {
      "name": "meeting-analytics",
      "description": ""
    },
    {
      "name": "Authentication",
      "description": ""
    },
    {
      "name": "calendar-sharing",
      "description": ""
    },
    {
      "name": "job-levels",
      "description": ""
    },
    {
      "name": "Meeting Polls",
      "description": ""
    },
    {
      "name": "Meeting Whiteboard",
      "description": ""
    },
    {
      "name": "project-custom-fields",
      "description": ""
    },
    {
      "name": "milestones",
      "description": ""
    },
    {
      "name": "calendar-events",
      "description": ""
    },
    {
      "name": "chat",
      "description": ""
    },
    {
      "name": "departments",
      "description": ""
    },
    {
      "name": "project-insights",
      "description": ""
    },
    {
      "name": "project-views",
      "description": ""
    },
    {
      "name": "provinces",
      "description": ""
    },
    {
      "name": "teams",
      "description": ""
    },
    {
      "name": "users",
      "description": ""
    },
    {
      "name": "calendar-permissions",
      "description": ""
    },
    {
      "name": "Drive",
      "description": ""
    },
    {
      "name": "notifications",
      "description": ""
    },
    {
      "name": "tenants",
      "description": ""
    },
    {
      "name": "vault",
      "description": ""
    },
    {
      "name": "activity-logs",
      "description": ""
    },
    {
      "name": "calendar-delegation",
      "description": ""
    },
    {
      "name": "cities",
      "description": ""
    },
    {
      "name": "districts",
      "description": ""
    },
    {
      "name": "meeting-security",
      "description": ""
    },
    {
      "name": "task-labels",
      "description": ""
    },
    {
      "name": "task-boards",
      "description": ""
    },
    {
      "name": "calendar-analytics",
      "description": ""
    },
    {
      "name": "meetings",
      "description": ""
    },
    {
      "name": "countries",
      "description": ""
    },
    {
      "name": "OAuth2",
      "description": ""
    },
    {
      "name": "organizations",
      "description": ""
    },
    {
      "name": "websocket",
      "description": ""
    },
    {
      "name": "oauth",
      "description": ""
    },
    {
      "name": "auth",
      "description": ""
    },
    {
      "name": "ws",
      "description": ""
    }
  ]
}