{
  "openapi": "3.0.3",
  "info": {
    "title": "Goravel API",
    "description": "Multi-tenant API with role-based access control and activity logging",
    "version": "1.0.0",
    "contact": {
      "name": "Goravel Team",
      "email": "support@goravel.com",
      "url": "https://goravel.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://api.goravel.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/.well-known/oauth-authorization-server": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 Authorization Server Metadata",
        "description": "Provides OAuth2/OIDC discovery information",
        "operationId": "get.Well-KnownOauth-Authorization-Server",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get all activity logs",
        "description": "Retrieve a list of all activity logs for the current tenant with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getActivity-Logs",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): causer,subject,tenant",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Create a new activity log",
        "description": "Create a new activity log entry for a tenant",
        "operationId": "postActivity-Logs",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs/causer": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get activities for causer",
        "description": "Retrieve activities caused by a specific user with cursor-based pagination",
        "operationId": "getActivity-LogsCauser",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "causer_type",
            "in": "query",
            "description": "Causer type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs/date-range": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get activities in date range",
        "description": "Retrieve activities within a date range with cursor-based pagination",
        "operationId": "getActivity-LogsDate-Range",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs/log-name": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get activities by log name",
        "description": "Retrieve activities by log name with cursor-based pagination",
        "operationId": "getActivity-LogsLog-Name",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "log_name",
            "in": "query",
            "description": "Log name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs/subject": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get activities for subject",
        "description": "Retrieve activities for a specific subject with cursor-based pagination",
        "operationId": "getActivity-LogsSubject",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "subject_type",
            "in": "query",
            "description": "Subject type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activity-logs/{id}": {
      "get": {
        "tags": [
          "activity-logs"
        ],
        "summary": "Get activity log by ID",
        "description": "Retrieve a specific activity log by its ID",
        "operationId": "getActivity-LogsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Activity Log ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/docs": {
      "get": {
        "tags": null,
        "summary": "getApiDocs",
        "description": "API endpoint",
        "operationId": "getApiDocs",
        "responses": null
      }
    },
    "/api/docs/openapi.html": {
      "get": {
        "tags": null,
        "summary": "getApiDocsOpenapi.Html",
        "description": "API endpoint",
        "operationId": "getApiDocsOpenapi.Html",
        "responses": null
      }
    },
    "/api/docs/openapi.json": {
      "get": {
        "tags": null,
        "summary": "getApiDocsOpenapi.Json",
        "description": "API endpoint",
        "operationId": "getApiDocsOpenapi.Json",
        "responses": null
      }
    },
    "/api/docs/openapi.yaml": {
      "get": {
        "tags": null,
        "summary": "getApiDocsOpenapi.Yaml",
        "description": "API endpoint",
        "operationId": "getApiDocsOpenapi.Yaml",
        "responses": null
      }
    },
    "/api/v1/notifications/password-reset": {
      "post": {
        "tags": [
          "notifications"
        ],
        "summary": "Send a password reset notification",
        "description": "Sends a password reset notification to a user by their email.",
        "operationId": "postApiV1NotificationsPassword-Reset",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "User Email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/read-all/{user_id}": {
      "put": {
        "tags": [
          "notifications"
        ],
        "summary": "Mark all notifications for a user as read",
        "description": "Marks all unread notifications for a user as read.",
        "operationId": "putApiV1NotificationsRead-AllbyUser_id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/welcome/{user_id}": {
      "post": {
        "tags": [
          "notifications"
        ],
        "summary": "Send a welcome notification to a user",
        "description": "Sends a welcome notification to a user by their ID.",
        "operationId": "postApiV1NotificationsWelcomebyUser_id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/{notification_id}": {
      "delete": {
        "tags": [
          "notifications"
        ],
        "summary": "Delete a notification",
        "description": "Deletes a notification by its ID.",
        "operationId": "deleteApiV1NotificationsbyNotification_id",
        "parameters": [
          {
            "name": "notification_id",
            "in": "path",
            "description": "Notification ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/{notification_id}/read": {
      "put": {
        "tags": [
          "notifications"
        ],
        "summary": "Mark a notification as read",
        "description": "Marks a notification as read by its ID.",
        "operationId": "putApiV1NotificationsbyNotification_idRead",
        "parameters": [
          {
            "name": "notification_id",
            "in": "path",
            "description": "Notification ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/notifications/{user_id}": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "Get notifications for a user",
        "description": "Retrieves notifications for a user by their ID.",
        "operationId": "getApiV1NotificationsbyUser_id",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/oauth/jwt-token": {
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "postApiV1OauthJwt-Token",
        "description": "API endpoint",
        "operationId": "postApiV1OauthJwt-Token",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/oauth/security-report": {
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "postApiV1OauthSecurity-Report",
        "description": "API endpoint",
        "operationId": "postApiV1OauthSecurity-Report",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/oauth/test": {
      "get": {
        "tags": null,
        "summary": "getApiV1OauthTest",
        "description": "API endpoint",
        "operationId": "getApiV1OauthTest",
        "responses": null,
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/broadcast": {
      "post": {
        "tags": [
          "websocket"
        ],
        "summary": "postApiV1WebsocketBroadcast",
        "description": "API endpoint",
        "operationId": "postApiV1WebsocketBroadcast",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/chat/rooms/{room_id}/broadcast": {
      "post": {
        "tags": [
          "websocket"
        ],
        "summary": "postApiV1WebsocketChatRoomsbyRoom_idBroadcast",
        "description": "API endpoint",
        "operationId": "postApiV1WebsocketChatRoomsbyRoom_idBroadcast",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/chat/rooms/{room_id}/connections": {
      "get": {
        "tags": [
          "websocket"
        ],
        "summary": "getApiV1WebsocketChatRoomsbyRoom_idConnections",
        "description": "API endpoint",
        "operationId": "getApiV1WebsocketChatRoomsbyRoom_idConnections",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "websocket"
        ],
        "summary": "deleteApiV1WebsocketChatRoomsbyRoom_idConnections",
        "description": "API endpoint",
        "operationId": "deleteApiV1WebsocketChatRoomsbyRoom_idConnections",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/connections/{connection_id}": {
      "delete": {
        "tags": [
          "websocket"
        ],
        "summary": "deleteApiV1WebsocketConnectionsbyConnection_id",
        "description": "API endpoint",
        "operationId": "deleteApiV1WebsocketConnectionsbyConnection_id",
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "connection_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/health": {
      "get": {
        "tags": [
          "websocket"
        ],
        "summary": "getApiV1WebsocketHealth",
        "description": "API endpoint",
        "operationId": "getApiV1WebsocketHealth",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/stats": {
      "get": {
        "tags": [
          "websocket"
        ],
        "summary": "getApiV1WebsocketStats",
        "description": "API endpoint",
        "operationId": "getApiV1WebsocketStats",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/test": {
      "post": {
        "tags": [
          "websocket"
        ],
        "summary": "postApiV1WebsocketTest",
        "description": "API endpoint",
        "operationId": "postApiV1WebsocketTest",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/websocket/users/{user_id}/connections": {
      "delete": {
        "tags": [
          "websocket"
        ],
        "summary": "deleteApiV1WebsocketUsersbyUser_idConnections",
        "description": "API endpoint",
        "operationId": "deleteApiV1WebsocketUsersbyUser_idConnections",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "user_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/ws": {
      "get": {
        "tags": [
          "ws"
        ],
        "summary": "getApiV1Ws",
        "description": "API endpoint",
        "operationId": "getApiV1Ws",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/ws/chat/presence": {
      "get": {
        "tags": [
          "ws"
        ],
        "summary": "getApiV1WsChatPresence",
        "description": "API endpoint",
        "operationId": "getApiV1WsChatPresence",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/ws/chat/rooms/{room_id}": {
      "get": {
        "tags": [
          "ws"
        ],
        "summary": "getApiV1WsChatRoomsbyRoom_id",
        "description": "API endpoint",
        "operationId": "getApiV1WsChatRoomsbyRoom_id",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/v1/ws/chat/typing/{room_id}": {
      "get": {
        "tags": [
          "ws"
        ],
        "summary": "getApiV1WsChatTypingbyRoom_id",
        "description": "API endpoint",
        "operationId": "getApiV1WsChatTypingbyRoom_id",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "room_id identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ulid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/change-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Change password",
        "description": "Change user password",
        "operationId": "postAuthChange-Password",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Request password reset",
        "description": "Send password reset email to user",
        "operationId": "postAuthForgot-Password",
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate user with enhanced security",
        "description": "Authenticate user with email and password, with support for MFA, WebAuthn, and device tracking",
        "operationId": "postAuthLogin",
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "423": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "429": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout user",
        "description": "Logout user and invalidate session",
        "operationId": "postAuthLogout",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/mfa/backup-codes/regenerate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Generate new MFA backup codes",
        "description": "Generate new backup codes and invalidate old ones",
        "operationId": "postAuthMfaBackup-CodesRegenerate",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/mfa/disable": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Disable MFA with security verification",
        "description": "Disable two-factor authentication with additional security checks",
        "operationId": "postAuthMfaDisable",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/mfa/enable": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Enable MFA with backup codes",
        "description": "Enable two-factor authentication for user with backup code generation",
        "operationId": "postAuthMfaEnable",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/mfa/setup": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Generate enhanced MFA setup",
        "description": "Generate MFA secret, QR code, and setup instructions",
        "operationId": "getAuthMfaSetup",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/mfa/verify": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Verify MFA code with backup support",
        "description": "Verify MFA code with support for backup codes and enhanced logging",
        "operationId": "postAuthMfaVerify",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/profile": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get user profile",
        "description": "Get current authenticated user profile",
        "operationId": "getAuthProfile",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh token",
        "description": "Refresh JWT authentication token",
        "operationId": "postAuthRefresh",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register new user with enhanced security",
        "description": "Register a new user account with comprehensive validation and security checks",
        "operationId": "postAuthRegister",
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "429": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset password",
        "description": "Reset password using reset token",
        "operationId": "postAuthReset-Password",
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/webauthn/authenticate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate with WebAuthn enhanced security",
        "description": "Authenticate user using WebAuthn assertion with comprehensive validation",
        "operationId": "postAuthWebauthnAuthenticate",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "429": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/webauthn/begin-authentication": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Begin enhanced WebAuthn authentication",
        "description": "Start the WebAuthn authentication process with comprehensive security validation",
        "operationId": "getAuthWebauthnBegin-Authentication",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "User email for authentication context",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "429": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/webauthn/begin-registration": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Begin enhanced WebAuthn registration",
        "description": "Start the WebAuthn registration process with comprehensive security checks",
        "operationId": "getAuthWebauthnBegin-Registration",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "429": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/webauthn/credentials": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get enhanced WebAuthn credentials",
        "description": "Get all WebAuthn credentials for the authenticated user with usage statistics",
        "operationId": "getAuthWebauthnCredentials",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/webauthn/credentials/{id}": {
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Delete WebAuthn credential with security verification",
        "description": "Delete a WebAuthn credential with additional security checks",
        "operationId": "deleteAuthWebauthnCredentialsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Credential ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/auth/webauthn/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register WebAuthn credential with enhanced security",
        "description": "Register a new WebAuthn authenticator with comprehensive validation and security checks",
        "operationId": "postAuthWebauthnRegister",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "429": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/calendar-events": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get all calendar events",
        "description": "Retrieve a list of all calendar events with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getCalendar-Events",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): creator,tenant,participants,meeting",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Create calendar event",
        "description": "Create a new calendar event with optional participants and meeting details",
        "operationId": "postCalendar-Events",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/check-conflicts": {
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Check scheduling conflicts",
        "description": "Check for scheduling conflicts with existing events",
        "operationId": "postCalendar-EventsCheck-Conflicts",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/export": {
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Export calendar to iCal",
        "description": "Export calendar events to iCal format",
        "operationId": "postCalendar-EventsExport",
        "responses": {
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/my": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get my events",
        "description": "Retrieve calendar events for the authenticated user",
        "operationId": "getCalendar-EventsMy",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date filter (ISO 8601)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get calendar event by ID",
        "description": "Retrieve a specific calendar event by its ID",
        "operationId": "getCalendar-EventsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Update calendar event",
        "description": "Update an existing calendar event",
        "operationId": "putCalendar-EventsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Delete calendar event",
        "description": "Delete a calendar event and all its participants",
        "operationId": "deleteCalendar-EventsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}/meeting/status": {
      "put": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Update meeting status",
        "description": "Update the status and details of a meeting",
        "operationId": "putCalendar-EventsbyIdMeetingStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}/participants": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get event participants",
        "description": "Retrieve all participants for a specific calendar event",
        "operationId": "getCalendar-EventsbyIdParticipants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Add participant to event",
        "description": "Add a new participant to a calendar event",
        "operationId": "postCalendar-EventsbyIdParticipants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}/participants/{user_id}": {
      "delete": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Remove participant from event",
        "description": "Remove a participant from a calendar event",
        "operationId": "deleteCalendar-EventsbyIdParticipantsbyUser_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}/participants/{user_id}/response": {
      "put": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Update participant response",
        "description": "Update a participant's response status for an event",
        "operationId": "putCalendar-EventsbyIdParticipantsbyUser_idResponse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/calendar-events/{id}/reminders": {
      "get": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Get event reminders",
        "description": "Retrieve all reminders for a specific calendar event",
        "operationId": "getCalendar-EventsbyIdReminders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "calendar-events"
        ],
        "summary": "Create event reminder",
        "description": "Create a reminder for a calendar event",
        "operationId": "postCalendar-EventsbyIdReminders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/keys": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get user keys",
        "description": "Retrieve all encryption keys for the current user",
        "operationId": "getChatKeys",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Generate encryption keys",
        "description": "Generate new encryption keys for the current user",
        "operationId": "postChatKeys",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/notifications/global": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get global notification settings",
        "description": "Retrieve global notification settings for the current user",
        "operationId": "getChatNotificationsGlobal",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "chat"
        ],
        "summary": "Update global notification settings",
        "description": "Update global notification settings for the current user",
        "operationId": "putChatNotificationsGlobal",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get user's chat rooms",
        "description": "Retrieve all chat rooms where the current user is a member",
        "operationId": "getChatRooms",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Create a new chat room",
        "description": "Create a new chat room with specified members",
        "operationId": "postChatRooms",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get chat room by ID",
        "description": "Retrieve a specific chat room by its ID",
        "operationId": "getChatRoomsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "chat"
        ],
        "summary": "Update chat room",
        "description": "Update a chat room's information (admin only)",
        "operationId": "putChatRoomsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "chat"
        ],
        "summary": "Delete chat room",
        "description": "Delete a chat room (admin only)",
        "operationId": "deleteChatRoomsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/members": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get room members",
        "description": "Retrieve all members of a chat room",
        "operationId": "getChatRoomsbyIdMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Add member to room",
        "description": "Add a new member to a chat room (admin only)",
        "operationId": "postChatRoomsbyIdMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/members/{user_id}": {
      "delete": {
        "tags": [
          "chat"
        ],
        "summary": "Remove member from room",
        "description": "Remove a member from a chat room (admin only)",
        "operationId": "deleteChatRoomsbyIdMembersbyUser_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/messages": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get messages",
        "description": "Retrieve messages from a chat room with pagination",
        "operationId": "getChatRoomsbyIdMessages",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Send message",
        "description": "Send a message to a chat room",
        "operationId": "postChatRoomsbyIdMessages",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/messages/{message_id}": {
      "put": {
        "tags": [
          "chat"
        ],
        "summary": "Edit message",
        "description": "Edit a message (only sender can edit within 15 minutes)",
        "operationId": "putChatRoomsbyIdMessagesbyMessage_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "chat"
        ],
        "summary": "Delete message",
        "description": "Delete a message (sender or admin only)",
        "operationId": "deleteChatRoomsbyIdMessagesbyMessage_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/messages/{message_id}/reactions": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get message reactions",
        "description": "Retrieve all reactions for a specific message",
        "operationId": "getChatRoomsbyIdMessagesbyMessage_idReactions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Add message reaction",
        "description": "Add an emoji reaction to a message",
        "operationId": "postChatRoomsbyIdMessagesbyMessage_idReactions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "chat"
        ],
        "summary": "Remove message reaction",
        "description": "Remove an emoji reaction from a message",
        "operationId": "deleteChatRoomsbyIdMessagesbyMessage_idReactions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/messages/{message_id}/reactions/summary": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get reaction summary",
        "description": "Get a summary of reactions grouped by emoji",
        "operationId": "getChatRoomsbyIdMessagesbyMessage_idReactionsSummary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/messages/{message_id}/threads": {
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Create thread",
        "description": "Create a new message thread from a root message",
        "operationId": "postChatRoomsbyIdMessagesbyMessage_idThreads",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/notifications": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get notification settings",
        "description": "Retrieve notification settings for the current user in a specific room",
        "operationId": "getChatRoomsbyIdNotifications",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "chat"
        ],
        "summary": "Update notification settings",
        "description": "Update notification settings for the current user in a specific room",
        "operationId": "putChatRoomsbyIdNotifications",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/read": {
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Mark room as read",
        "description": "Mark all messages in a chat room as read by the current user",
        "operationId": "postChatRoomsbyIdRead",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/rotate-key": {
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Rotate room key",
        "description": "Rotate the encryption key for a chat room (admin only)",
        "operationId": "postChatRoomsbyIdRotate-Key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "403": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/rooms/{id}/threads": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get room threads",
        "description": "Retrieve all threads in a chat room",
        "operationId": "getChatRoomsbyIdThreads",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat room ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "20"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/threads/{thread_id}": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Get thread",
        "description": "Retrieve a thread with all its messages",
        "operationId": "getChatThreadsbyThread_id",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "Thread ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/threads/{thread_id}/resolve": {
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Resolve thread",
        "description": "Mark a thread as resolved",
        "operationId": "postChatThreadsbyThread_idResolve",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "Thread ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/cities": {
      "get": {
        "tags": [
          "cities"
        ],
        "summary": "Get all cities",
        "description": "Retrieve a list of all cities with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getCities",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): province,districts",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "cities"
        ],
        "summary": "Create a new city",
        "description": "Create a new city with the provided information",
        "operationId": "postCities",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/cities/{id}": {
      "get": {
        "tags": [
          "cities"
        ],
        "summary": "Get city by ID",
        "description": "Retrieve a specific city by their ID",
        "operationId": "getCitiesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "City ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "cities"
        ],
        "summary": "Update a city",
        "description": "Update an existing city with the provided information",
        "operationId": "putCitiesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "City ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "cities"
        ],
        "summary": "Delete a city",
        "description": "Remove a city from the system",
        "operationId": "deleteCitiesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "City ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/cities/{id}/districts": {
      "get": {
        "tags": [
          "cities"
        ],
        "summary": "Get districts by city",
        "description": "Retrieve all districts for a specific city",
        "operationId": "getCitiesbyIdDistricts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "City ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/countries": {
      "get": {
        "tags": [
          "countries"
        ],
        "summary": "Get all countries",
        "description": "Retrieve a list of all countries with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getCountries",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): provinces,provinces.cities",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "countries"
        ],
        "summary": "Create a new country",
        "description": "Create a new country with the provided information",
        "operationId": "postCountries",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/countries/bulk-delete": {
      "post": {
        "tags": [
          "countries"
        ],
        "summary": "Delete multiple countries",
        "description": "Remove multiple countries from the system",
        "operationId": "postCountriesBulk-Delete",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/countries/{id}": {
      "get": {
        "tags": [
          "countries"
        ],
        "summary": "Get country by ID",
        "description": "Retrieve a specific country by their ID",
        "operationId": "getCountriesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "countries"
        ],
        "summary": "Update a country",
        "description": "Update an existing country with the provided information",
        "operationId": "putCountriesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "countries"
        ],
        "summary": "Delete a country",
        "description": "Remove a country from the system",
        "operationId": "deleteCountriesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/countries/{id}/provinces": {
      "get": {
        "tags": [
          "countries"
        ],
        "summary": "Get provinces by country",
        "description": "Retrieve all provinces for a specific country",
        "operationId": "getCountriesbyIdProvinces",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/countries/{id}/toggle-active": {
      "patch": {
        "tags": [
          "countries"
        ],
        "summary": "Toggle country active status",
        "description": "Toggle the active status of a country",
        "operationId": "patchCountriesbyIdToggle-Active",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/districts": {
      "get": {
        "tags": [
          "districts"
        ],
        "summary": "Get all districts",
        "description": "Retrieve a list of all districts with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getDistricts",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): city,city.province,city.province.country",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "districts"
        ],
        "summary": "Create a new district",
        "description": "Create a new district with the provided information",
        "operationId": "postDistricts",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/districts/{id}": {
      "get": {
        "tags": [
          "districts"
        ],
        "summary": "Get district by ID",
        "description": "Retrieve a specific district by their ID",
        "operationId": "getDistrictsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "District ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "districts"
        ],
        "summary": "Update a district",
        "description": "Update an existing district with the provided information",
        "operationId": "putDistrictsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "District ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "districts"
        ],
        "summary": "Delete a district",
        "description": "Remove a district from the system",
        "operationId": "deleteDistrictsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "District ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/authorize": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 authorization endpoint",
        "description": "Handle OAuth2 authorization requests",
        "operationId": "postOauthAuthorize",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/clients": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get OAuth2 clients",
        "description": "Get all OAuth2 clients for the authenticated user",
        "operationId": "getOauthClients",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      },
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Create OAuth2 client",
        "description": "Create a new OAuth2 client",
        "operationId": "postOauthClients",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/clients/{id}": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get OAuth2 client",
        "description": "Get a specific OAuth2 client by ID",
        "operationId": "getOauthClientsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      },
      "put": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Update OAuth2 client",
        "description": "Update an OAuth2 client",
        "operationId": "putOauthClientsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      },
      "delete": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Delete OAuth2 client",
        "description": "Delete an OAuth2 client",
        "operationId": "deleteOauthClientsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/device": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 device authorization endpoint",
        "description": "Handle OAuth2 device authorization requests",
        "operationId": "postOauthDevice",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/device/complete": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Complete device authorization",
        "description": "Complete device authorization by providing user credentials",
        "operationId": "postOauthDeviceComplete",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/device/token": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 device token endpoint",
        "description": "Handle OAuth2 device token requests",
        "operationId": "postOauthDeviceToken",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/introspect": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 token introspection",
        "description": "Introspect an OAuth2 token",
        "operationId": "postOauthIntrospect",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/jwks": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "JSON Web Key Set endpoint",
        "description": "Get public keys for token verification",
        "operationId": "getOauthJwks",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/personal-access-tokens": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get personal access tokens",
        "description": "Get all personal access tokens for the authenticated user",
        "operationId": "getOauthPersonal-Access-Tokens",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      },
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Create personal access token",
        "description": "Create a personal access token for the authenticated user",
        "operationId": "postOauthPersonal-Access-Tokens",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/personal-access-tokens/{id}": {
      "delete": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Revoke personal access token",
        "description": "Revoke a personal access token",
        "operationId": "deleteOauthPersonal-Access-TokensbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Token ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/revoke": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 token revocation",
        "description": "Revoke an OAuth2 token",
        "operationId": "postOauthRevoke",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/token": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 token endpoint",
        "description": "Handle OAuth2 token requests (password, client_credentials, authorization_code, refresh_token grants)",
        "operationId": "postOauthToken",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/oauth/token/exchange": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OAuth2 token exchange endpoint",
        "description": "Handle OAuth2 token exchange requests",
        "operationId": "postOauthTokenExchange",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/oauth/userinfo": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "OpenID Connect UserInfo endpoint",
        "description": "Get user information using access token",
        "operationId": "getOauthUserinfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/map[string]interface"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": null
          }
        ]
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Get all organizations",
        "description": "Retrieve a list of all organizations with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getOrganizations",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): tenant,parent,children,users,departments,teams,projects",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Create organization",
        "description": "Create a new organization",
        "operationId": "postOrganizations",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Get organization by ID",
        "description": "Retrieve a specific organization by its ID",
        "operationId": "getOrganizationsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "organizations"
        ],
        "summary": "Update organization",
        "description": "Update an existing organization",
        "operationId": "putOrganizationsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "organizations"
        ],
        "summary": "Delete organization",
        "description": "Delete an organization",
        "operationId": "deleteOrganizationsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/hierarchy": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Get organization hierarchy",
        "description": "Retrieve the organization hierarchy (parents and subsidiaries)",
        "operationId": "getOrganizationsbyIdHierarchy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/projects/{project_id}/milestones": {
      "get": {
        "tags": [
          "milestones"
        ],
        "summary": "Get all milestones",
        "description": "Retrieve a list of all milestones in a project",
        "operationId": "getOrganizationsbyIdProjectsbyProject_idMilestones",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "milestones"
        ],
        "summary": "Create a new milestone",
        "description": "Create a new milestone in a project",
        "operationId": "postOrganizationsbyIdProjectsbyProject_idMilestones",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/projects/{project_id}/task-boards": {
      "get": {
        "tags": [
          "task-boards"
        ],
        "summary": "Get all task boards",
        "description": "Retrieve a list of all task boards in a project",
        "operationId": "getOrganizationsbyIdProjectsbyProject_idTask-Boards",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "task-boards"
        ],
        "summary": "Create a new task board",
        "description": "Create a new task board in a project",
        "operationId": "postOrganizationsbyIdProjectsbyProject_idTask-Boards",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/projects/{project_id}/task-labels": {
      "get": {
        "tags": [
          "task-labels"
        ],
        "summary": "Get all task labels",
        "description": "Retrieve a list of all task labels in a project",
        "operationId": "getOrganizationsbyIdProjectsbyProject_idTask-Labels",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "task-labels"
        ],
        "summary": "Create a new task label",
        "description": "Create a new task label in a project",
        "operationId": "postOrganizationsbyIdProjectsbyProject_idTask-Labels",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/projects/{project_id}/tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get all tasks",
        "description": "Retrieve a list of all tasks in a project with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getOrganizationsbyIdProjectsbyProject_idTasks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): assignee,creator,project,organization,milestone,labels,comments,activities",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Create a new task",
        "description": "Create a new task in a project",
        "operationId": "postOrganizationsbyIdProjectsbyProject_idTasks",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/projects/{project_id}/tasks/{task_id}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get a specific task by ID",
        "description": "Retrieve a specific task by its ID",
        "operationId": "getOrganizationsbyIdProjectsbyProject_idTasksbyTask_id",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Update a task",
        "description": "Update an existing task",
        "operationId": "putOrganizationsbyIdProjectsbyProject_idTasksbyTask_id",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete a task",
        "description": "Delete an existing task",
        "operationId": "deleteOrganizationsbyIdProjectsbyProject_idTasksbyTask_id",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/stats": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Get organization statistics",
        "description": "Retrieve statistics for an organization",
        "operationId": "getOrganizationsbyIdStats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/users": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Get organization users",
        "description": "Retrieve users in an organization",
        "operationId": "getOrganizationsbyIdUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "int",
              "default": "10"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filter by user role",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status",
            "required": false,
            "schema": {
              "type": "bool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Add user to organization",
        "description": "Add a user to an organization",
        "operationId": "postOrganizationsbyIdUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "organizations"
        ],
        "summary": "Remove user from organization",
        "description": "Remove a user from an organization",
        "operationId": "deleteOrganizationsbyIdUsersbyUser_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{id}/verify": {
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Verify organization",
        "description": "Mark an organization as verified",
        "operationId": "postOrganizationsbyIdVerify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/departments": {
      "get": {
        "tags": [
          "departments"
        ],
        "summary": "Get all departments",
        "description": "Retrieve a list of all departments in an organization with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getOrganizationsbyOrganization_idDepartments",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): organization,parent,children,users,teams",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "departments"
        ],
        "summary": "Create a new department",
        "description": "Create a new department in an organization",
        "operationId": "postOrganizationsbyOrganization_idDepartments",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/departments/{id}": {
      "get": {
        "tags": [
          "departments"
        ],
        "summary": "Get a specific department by ID",
        "description": "Retrieve a specific department by its ID",
        "operationId": "getOrganizationsbyOrganization_idDepartmentsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "departments"
        ],
        "summary": "Update a department",
        "description": "Update an existing department",
        "operationId": "putOrganizationsbyOrganization_idDepartmentsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "departments"
        ],
        "summary": "Delete a department",
        "description": "Delete an existing department",
        "operationId": "deleteOrganizationsbyOrganization_idDepartmentsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/departments/{id}/users": {
      "get": {
        "tags": [
          "departments"
        ],
        "summary": "Get department users",
        "description": "Retrieve users in a specific department",
        "operationId": "getOrganizationsbyOrganization_idDepartmentsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by name or email",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "departments"
        ],
        "summary": "Add user to department",
        "description": "Add a user to a specific department",
        "operationId": "postOrganizationsbyOrganization_idDepartmentsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/departments/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "departments"
        ],
        "summary": "Remove user from department",
        "description": "Remove a user from a specific department",
        "operationId": "deleteOrganizationsbyOrganization_idDepartmentsbyIdUsersbyUser_id",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get all projects",
        "description": "Retrieve a list of all projects in an organization with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getOrganizationsbyOrganization_idProjects",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): organization,teams,users,tasks,milestones",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new project",
        "description": "Create a new project in an organization",
        "operationId": "postOrganizationsbyOrganization_idProjects",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get a specific project by ID",
        "description": "Retrieve a specific project by its ID",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update a project",
        "description": "Update an existing project",
        "operationId": "putOrganizationsbyOrganization_idProjectsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a project",
        "description": "Delete an existing project",
        "operationId": "deleteOrganizationsbyOrganization_idProjectsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{id}/teams": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get project teams",
        "description": "Retrieve teams in a specific project",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyIdTeams",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by name or description",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Add team to project",
        "description": "Add a team to a specific project",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyIdTeams",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{id}/teams/{team_id}": {
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Remove team from project",
        "description": "Remove a team from a specific project",
        "operationId": "deleteOrganizationsbyOrganization_idProjectsbyIdTeamsbyTeam_id",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{id}/users": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get project users",
        "description": "Retrieve users in a specific project",
        "operationId": "getOrganizationsbyOrganization_idProjectsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by name or email",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Add user to project",
        "description": "Add a user to a specific project",
        "operationId": "postOrganizationsbyOrganization_idProjectsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Remove user from project",
        "description": "Remove a user from a specific project",
        "operationId": "deleteOrganizationsbyOrganization_idProjectsbyIdUsersbyUser_id",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/teams": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Get all teams",
        "description": "Retrieve a list of all teams in an organization with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getOrganizationsbyOrganization_idTeams",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): organization,department,users,projects",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "teams"
        ],
        "summary": "Create a new team",
        "description": "Create a new team in an organization",
        "operationId": "postOrganizationsbyOrganization_idTeams",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/teams/{id}": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Get a specific team by ID",
        "description": "Retrieve a specific team by its ID",
        "operationId": "getOrganizationsbyOrganization_idTeamsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "teams"
        ],
        "summary": "Update a team",
        "description": "Update an existing team",
        "operationId": "putOrganizationsbyOrganization_idTeamsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "teams"
        ],
        "summary": "Delete a team",
        "description": "Delete an existing team",
        "operationId": "deleteOrganizationsbyOrganization_idTeamsbyId",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/teams/{id}/users": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Get team users",
        "description": "Retrieve users in a specific team",
        "operationId": "getOrganizationsbyOrganization_idTeamsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by name or email",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "teams"
        ],
        "summary": "Add user to team",
        "description": "Add a user to a specific team",
        "operationId": "postOrganizationsbyOrganization_idTeamsbyIdUsers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/teams/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "teams"
        ],
        "summary": "Remove user from team",
        "description": "Remove a user from a specific team",
        "operationId": "deleteOrganizationsbyOrganization_idTeamsbyIdUsersbyUser_id",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/permissions": {
      "get": {
        "tags": [
          "permissions"
        ],
        "summary": "Get all permissions",
        "description": "Retrieve a list of all permissions for the current tenant with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getPermissions",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): roles,users,tenant",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "permissions"
        ],
        "summary": "Create a new permission",
        "description": "Create a new permission for a tenant",
        "operationId": "postPermissions",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/permissions/{id}": {
      "get": {
        "tags": [
          "permissions"
        ],
        "summary": "Get a specific permission",
        "description": "Retrieve a single permission by its ID",
        "operationId": "getPermissionsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Permission ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "permissions"
        ],
        "summary": "Update an existing permission",
        "description": "Update a permission by its ID",
        "operationId": "putPermissionsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Permission ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "permissions"
        ],
        "summary": "Delete a permission",
        "description": "Delete a permission by its ID",
        "operationId": "deletePermissionsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Permission ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/provinces": {
      "get": {
        "tags": [
          "provinces"
        ],
        "summary": "Get all provinces",
        "description": "Retrieve a list of all provinces with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getProvinces",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): country,cities,cities.districts",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "provinces"
        ],
        "summary": "Create a new province",
        "description": "Create a new province with the provided information",
        "operationId": "postProvinces",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/provinces/{id}": {
      "get": {
        "tags": [
          "provinces"
        ],
        "summary": "Get province by ID",
        "description": "Retrieve a specific province by their ID",
        "operationId": "getProvincesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Province ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "provinces"
        ],
        "summary": "Update a province",
        "description": "Update an existing province with the provided information",
        "operationId": "putProvincesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Province ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "provinces"
        ],
        "summary": "Delete a province",
        "description": "Remove a province from the system",
        "operationId": "deleteProvincesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Province ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/provinces/{id}/cities": {
      "get": {
        "tags": [
          "provinces"
        ],
        "summary": "Get cities by province",
        "description": "Retrieve all cities for a specific province",
        "operationId": "getProvincesbyIdCities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Province ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get all roles",
        "description": "Retrieve a list of all roles for the current tenant with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getRoles",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): permissions,users,tenant",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Create a new role",
        "description": "Create a new role for a tenant",
        "operationId": "postRoles",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get a specific role by ID",
        "description": "Retrieve a single role by its ID",
        "operationId": "getRolesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "roles"
        ],
        "summary": "Update a role by ID",
        "description": "Update an existing role by its ID",
        "operationId": "putRolesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Delete a role by ID",
        "description": "Delete a role by its ID",
        "operationId": "deleteRolesbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/roles/{id}/permissions": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Get all permissions for a role",
        "description": "Retrieve all permissions associated with a specific role",
        "operationId": "getRolesbyIdPermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Assign a permission to a role",
        "description": "Assign a permission to a specific role",
        "operationId": "postRolesbyIdPermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/roles/{id}/permissions/{permission_id}": {
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Revoke a permission from a role",
        "description": "Revoke a permission from a specific role",
        "operationId": "deleteRolesbyIdPermissionsbyPermission_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/tenants": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get all tenants",
        "description": "Retrieve a list of all tenants with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getTenants",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): users,roles",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Create a new tenant",
        "description": "Create a new tenant with the provided data",
        "operationId": "postTenants",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/tenants/{id}": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get a specific tenant by ID",
        "description": "Retrieve a single tenant by its unique identifier",
        "operationId": "getTenantsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "tenants"
        ],
        "summary": "Update an existing tenant",
        "description": "Update an existing tenant by its unique identifier",
        "operationId": "putTenantsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tenants"
        ],
        "summary": "Delete a tenant",
        "description": "Delete a tenant by its unique identifier",
        "operationId": "deleteTenantsbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/tenants/{id}/users": {
      "get": {
        "tags": [
          "tenants"
        ],
        "summary": "Get all users for a specific tenant",
        "description": "Retrieve a list of all users associated with a tenant",
        "operationId": "getTenantsbyIdUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "summary": "Add a user to a tenant",
        "description": "Add a user to a tenant by their unique identifier",
        "operationId": "postTenantsbyIdUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/tenants/{id}/users/{user_id}": {
      "delete": {
        "tags": [
          "tenants"
        ],
        "summary": "Remove a user from a tenant",
        "description": "Remove a user from a tenant by their unique identifier",
        "operationId": "deleteTenantsbyIdUsersbyUser_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all users",
        "description": "Retrieve a list of all users with filtering, sorting and pagination. Supports both offset and cursor pagination via pagination_type parameter.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "pagination_type",
            "in": "query",
            "description": "Pagination type: offset or cursor",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "offset",
                "cursor"
              ],
              "default": "offset"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for offset pagination",
            "required": false,
            "schema": {
              "type": "int",
              "default": "1"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for cursor pagination",
            "required": false,
            "schema": {
              "type": "string",
              "default": "15",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort by field (prefix with - for desc)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-created_at"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include relationships (comma-separated): roles,permissions,tenant",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a new user",
        "description": "Create a new user with the provided information",
        "operationId": "postUsers",
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID",
        "operationId": "getUsersbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update a user",
        "description": "Update an existing user's information",
        "operationId": "putUsersbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a user",
        "description": "Delete a user by their ID",
        "operationId": "deleteUsersbyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}/roles": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user's roles",
        "description": "Retrieve all roles associated with a user in a specific tenant",
        "operationId": "getUsersbyIdRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Assign role to user",
        "description": "Assign a specific role to a user in a tenant",
        "operationId": "postUsersbyIdRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}/roles/{role_id}": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Revoke role from user",
        "description": "Remove a specific role from a user in a tenant",
        "operationId": "deleteUsersbyIdRolesbyRole_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenant_id",
            "in": "query",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}/tenants": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user's tenants",
        "description": "Retrieve all tenants associated with a user",
        "operationId": "getUsersbyIdTenants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "APIResponse": {
        "type": "object",
        "description": "APIResponse model",
        "properties": {
          "Data": {
            "type": "string"
          },
          "Error": {
            "type": "string"
          },
          "Message": {
            "type": "string",
            "example": "Operation completed successfully"
          },
          "Status": {
            "type": "string",
            "example": "success"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "ActivityLog": {
        "type": "object",
        "description": "ActivityLog model",
        "properties": {
          "CauserID": {
            "type": "string"
          },
          "CauserType": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "LogName": {
            "type": "string"
          },
          "Properties": {
            "type": "string"
          },
          "SubjectID": {
            "type": "string"
          },
          "SubjectType": {
            "type": "string"
          },
          "Tenant": {
            "type": "string",
            "nullable": true
          },
          "TenantID": {
            "type": "string"
          }
        }
      },
      "ActivityLogger": {
        "type": "object",
        "description": "ActivityLogger model"
      },
      "AddMemberRequest": {
        "type": "object",
        "description": "AddMemberRequest model",
        "properties": {
          "Role": {
            "type": "string"
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "AddParticipantRequest": {
        "type": "object",
        "description": "AddParticipantRequest model",
        "properties": {
          "IsRequired": {
            "type": "boolean",
            "example": "true"
          },
          "Role": {
            "type": "string",
            "example": "attendee"
          },
          "SendReminder": {
            "type": "boolean",
            "example": "true"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        },
        "required": [
          "UserID"
        ]
      },
      "AddReactionRequest": {
        "type": "object",
        "description": "AddReactionRequest model",
        "properties": {
          "Emoji": {
            "type": "string",
            "example": "👍"
          }
        }
      },
      "AppPassword": {
        "type": "object",
        "description": "AppPassword model",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresAt": {
            "type": "string",
            "nullable": true
          },
          "ID": {
            "type": "string"
          },
          "LastUsedAt": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "AssignPermissionRequest": {
        "type": "object",
        "description": "AssignPermissionRequest model",
        "properties": {
          "PermissionIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "PermissionIDs"
        ]
      },
      "AssignRoleRequest": {
        "type": "object",
        "description": "AssignRoleRequest model",
        "properties": {
          "RoleID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        },
        "required": [
          "RoleID",
          "TenantID"
        ]
      },
      "BaseModel": {
        "type": "object",
        "description": "BaseModel model",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "CreatedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Creator": {
            "type": "string",
            "description": "Event creator",
            "nullable": true
          },
          "DeletedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "DeletedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Deleter": {
            "type": "string",
            "nullable": true
          },
          "ID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "UpdatedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Updater": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CalendarEvent": {
        "type": "object",
        "description": "CalendarEvent model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Weekly team sync to discuss project progress"
          },
          "EndTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T11:00:00Z"
          },
          "IsAllDay": {
            "type": "boolean",
            "example": "false"
          },
          "IsRecurring": {
            "type": "boolean",
            "example": "false"
          },
          "Location": {
            "type": "string",
            "example": "Conference Room A"
          },
          "Meeting": {
            "type": "string",
            "description": "Associated meeting details",
            "nullable": true
          },
          "ParentEvent": {
            "type": "string",
            "description": "Parent event for recurring instances",
            "nullable": true
          },
          "ParentEventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Participants": {
            "type": "array",
            "description": "Event participants",
            "items": {
              "type": "string"
            }
          },
          "RecurrenceRule": {
            "type": "string",
            "example": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO"
          },
          "RecurrenceUntil": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "RecurringInstances": {
            "type": "array",
            "description": "Recurring event instances",
            "items": {
              "type": "string"
            }
          },
          "ReminderSettings": {
            "type": "string",
            "example": "{\"email\": 15, \"push\": 30, \"sms\": 60}"
          },
          "RemindersSent": {
            "type": "boolean",
            "example": "false"
          },
          "RemindersSentAt": {
            "type": "string",
            "example": "2024-01-15T09:00:00Z",
            "nullable": true
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:00:00Z"
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "Tenant": {
            "type": "string",
            "description": "Event's associated tenant",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Timezone": {
            "type": "string",
            "example": "UTC"
          },
          "Title": {
            "type": "string",
            "example": "Team Meeting"
          },
          "Type": {
            "type": "string",
            "example": "meeting"
          }
        }
      },
      "ChangePasswordRequest": {
        "type": "object",
        "description": "ChangePasswordRequest model",
        "properties": {
          "CurrentPassword": {
            "type": "string",
            "example": "oldpassword123"
          },
          "NewPassword": {
            "type": "string",
            "example": "newpassword123"
          },
          "NewPasswordConfirmation": {
            "type": "string",
            "example": "newpassword123"
          }
        },
        "required": [
          "CurrentPassword",
          "NewPassword",
          "NewPasswordConfirmation"
        ]
      },
      "ChatInvitation": {
        "type": "object",
        "description": "ChatInvitation model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "InvitedUser": {
            "type": "string",
            "nullable": true
          },
          "InvitedUserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Inviter": {
            "type": "string",
            "nullable": true
          },
          "InviterID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Message": {
            "type": "string",
            "example": "Join our team discussion!"
          },
          "RespondedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "pending"
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "description": "ChatMessage model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "EditedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "EncryptedContent": {
            "type": "string",
            "example": "encrypted_message_data"
          },
          "EncryptionVersion": {
            "type": "integer",
            "example": "1"
          },
          "IsEdited": {
            "type": "boolean",
            "example": "false"
          },
          "Metadata": {
            "type": "string",
            "example": "{\"file_size\": 1024, \"file_name\": \"document.pdf\"}"
          },
          "OriginalContent": {
            "type": "string",
            "example": "original_encrypted_content"
          },
          "ReadBy": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ReplyTo": {
            "type": "string",
            "nullable": true
          },
          "ReplyToID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Sender": {
            "type": "string",
            "nullable": true
          },
          "SenderID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Status": {
            "type": "string",
            "example": "sent"
          },
          "Thread": {
            "type": "string",
            "nullable": true
          },
          "ThreadID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "example": "text"
          }
        }
      },
      "ChatNotificationSettings": {
        "type": "object",
        "description": "ChatNotificationSettings model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "CustomSettings": {
            "type": "string",
            "example": "{\"sound\": \"default\", \"vibration\": true}"
          },
          "DesktopNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "EmailNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "IsMuted": {
            "type": "boolean",
            "example": "false"
          },
          "MentionNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "MuteUntil": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "PushNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "ReactionNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "ThreadNotifications": {
            "type": "boolean",
            "example": "true"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "ChatRoom": {
        "type": "object",
        "description": "ChatRoom model",
        "properties": {
          "Avatar": {
            "type": "string",
            "example": "https://example.com/avatar.jpg"
          },
          "Description": {
            "type": "string",
            "example": "Main discussion channel for the team"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "LastActivityAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Members": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Name": {
            "type": "string",
            "example": "General Discussion"
          },
          "Tenant": {
            "type": "string",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "group"
          }
        }
      },
      "ChatRoomKey": {
        "type": "object",
        "description": "ChatRoomKey model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "EncryptedKey": {
            "type": "string",
            "example": "encrypted_key_data"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "KeyType": {
            "type": "string",
            "example": "room_key"
          },
          "RotatedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Version": {
            "type": "integer",
            "example": "1"
          }
        }
      },
      "ChatRoomMember": {
        "type": "object",
        "description": "ChatRoomMember model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "LastReadAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "PublicKey": {
            "type": "string",
            "example": "-----BEGIN PUBLIC KEY-----"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "CheckConflictsRequest": {
        "type": "object",
        "description": "CheckConflictsRequest model",
        "properties": {
          "EndTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T11:00:00Z"
          },
          "ExcludeEventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:00:00Z"
          },
          "UserIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "StartTime",
          "EndTime",
          "UserIDs"
        ]
      },
      "City": {
        "type": "object",
        "description": "City model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "LA"
          },
          "Districts": {
            "type": "array",
            "description": "City's districts",
            "items": {
              "type": "string"
            }
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Los Angeles"
          },
          "Province": {
            "type": "string",
            "description": "City's province"
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "Country": {
        "type": "object",
        "description": "Country model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "US"
          },
          "Code3": {
            "type": "string",
            "example": "USA"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "United States"
          },
          "NumericCode": {
            "type": "string",
            "example": "840"
          },
          "Provinces": {
            "type": "array",
            "description": "Country's provinces/states",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateActivityLogRequest": {
        "type": "object",
        "description": "CreateActivityLogRequest model",
        "properties": {
          "CauserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "CauserType": {
            "type": "string",
            "example": "*models.User"
          },
          "Description": {
            "type": "string",
            "example": "User created successfully"
          },
          "LogName": {
            "type": "string",
            "example": "user_management"
          },
          "Properties": {
            "type": "string",
            "example": "{\"ip_address\": \"192.168.1.1\", \"user_agent\": \"Mozilla/5.0...\"}"
          },
          "SubjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "SubjectType": {
            "type": "string",
            "example": "*models.User"
          }
        },
        "required": [
          "Description"
        ]
      },
      "CreateCalendarEventRequest": {
        "type": "object",
        "description": "CreateCalendarEventRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Weekly team sync to discuss project progress"
          },
          "EndTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T11:00:00Z"
          },
          "IsAllDay": {
            "type": "boolean",
            "example": "false"
          },
          "IsRecurring": {
            "type": "boolean",
            "example": "false"
          },
          "Location": {
            "type": "string",
            "example": "Conference Room A"
          },
          "Meeting": {
            "type": "string",
            "nullable": true
          },
          "ParticipantIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          },
          "RecurrenceRule": {
            "type": "string",
            "example": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO"
          },
          "RecurrenceUntil": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "ReminderSettings": {
            "type": "string",
            "example": "{\"email\": 15, \"push\": 30, \"sms\": 60}"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:00:00Z"
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Timezone": {
            "type": "string",
            "example": "UTC"
          },
          "Title": {
            "type": "string",
            "example": "Team Meeting"
          },
          "Type": {
            "type": "string",
            "example": "meeting"
          }
        },
        "required": [
          "Title",
          "StartTime",
          "EndTime",
          "TenantID"
        ]
      },
      "CreateChatRoomRequest": {
        "type": "object",
        "description": "CreateChatRoomRequest model",
        "properties": {
          "Avatar": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "MemberIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        }
      },
      "CreateCityRequest": {
        "type": "object",
        "description": "CreateCityRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "LA"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Los Angeles"
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        },
        "required": [
          "Name",
          "ProvinceID"
        ]
      },
      "CreateCountryRequest": {
        "type": "object",
        "description": "CreateCountryRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "US"
          },
          "Code3": {
            "type": "string",
            "example": "USA"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "United States"
          },
          "NumericCode": {
            "type": "string",
            "example": "840"
          }
        },
        "required": [
          "Name",
          "Code"
        ]
      },
      "CreateDistrictRequest": {
        "type": "object",
        "description": "CreateDistrictRequest model",
        "properties": {
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Code": {
            "type": "string",
            "example": "DT"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Downtown"
          }
        },
        "required": [
          "Name",
          "CityID"
        ]
      },
      "CreateInvitationRequest": {
        "type": "object",
        "description": "CreateInvitationRequest model",
        "properties": {
          "ExpiresAt": {
            "type": "string"
          },
          "InvitedUserID": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          }
        }
      },
      "CreateMeetingRequest": {
        "type": "object",
        "description": "CreateMeetingRequest model",
        "properties": {
          "AllowJoinBeforeHost": {
            "type": "boolean",
            "example": "true"
          },
          "AttendanceCount": {
            "type": "integer",
            "example": "5"
          },
          "MeetingID": {
            "type": "string",
            "example": "123456789"
          },
          "MeetingMinutes": {
            "type": "string",
            "example": "Key decisions: 1. Project timeline approved 2. Budget increased by 10%"
          },
          "MeetingNotes": {
            "type": "string",
            "example": "Agenda: 1. Project updates 2. Q\u0026A"
          },
          "MeetingType": {
            "type": "string",
            "example": "video"
          },
          "MeetingURL": {
            "type": "string",
            "example": "https://zoom.us/j/123456789"
          },
          "MuteParticipantsOnEntry": {
            "type": "boolean",
            "example": "false"
          },
          "Passcode": {
            "type": "string",
            "example": "123456"
          },
          "Platform": {
            "type": "string",
            "example": "zoom"
          },
          "RecordMeeting": {
            "type": "boolean",
            "example": "false"
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "WaitingRoom": {
            "type": "string",
            "example": "enabled"
          }
        }
      },
      "CreatePermissionRequest": {
        "type": "object",
        "description": "CreatePermissionRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Create new users"
          },
          "Guard": {
            "type": "string",
            "example": "api"
          },
          "Name": {
            "type": "string",
            "example": "users.create"
          }
        },
        "required": [
          "Name"
        ]
      },
      "CreateProvinceRequest": {
        "type": "object",
        "description": "CreateProvinceRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "CA"
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "California"
          }
        },
        "required": [
          "Name",
          "Code",
          "CountryID"
        ]
      },
      "CreateReminderRequest": {
        "type": "object",
        "description": "CreateReminderRequest model",
        "properties": {
          "MinutesBefore": {
            "type": "integer",
            "example": "15"
          },
          "Type": {
            "type": "string",
            "example": "email"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        },
        "required": [
          "UserID",
          "Type",
          "MinutesBefore"
        ]
      },
      "CreateRoleRequest": {
        "type": "object",
        "description": "CreateRoleRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Administrator role with full access"
          },
          "Guard": {
            "type": "string",
            "example": "api"
          },
          "Name": {
            "type": "string",
            "example": "admin"
          }
        },
        "required": [
          "Name"
        ]
      },
      "CreateTenantRequest": {
        "type": "object",
        "description": "CreateTenantRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "A leading technology company"
          },
          "Domain": {
            "type": "string",
            "example": "acme.example.com"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "Settings": {
            "type": "string",
            "example": "{\"theme\": \"dark\", \"timezone\": \"UTC\"}"
          },
          "Slug": {
            "type": "string",
            "example": "acme-corp"
          }
        },
        "required": [
          "Name",
          "Slug"
        ]
      },
      "CreateThreadRequest": {
        "type": "object",
        "description": "CreateThreadRequest model",
        "properties": {
          "Title": {
            "type": "string"
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "description": "CreateUserRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "John Doe"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          }
        },
        "required": [
          "Name",
          "Email",
          "Password"
        ]
      },
      "Department": {
        "type": "object",
        "description": "Department model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "ENG"
          },
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Software engineering and development"
          },
          "Icon": {
            "type": "string",
            "example": "engineering"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Level": {
            "type": "integer",
            "example": "0"
          },
          "Manager": {
            "type": "string",
            "description": "Department manager",
            "nullable": true
          },
          "ManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "Engineering"
          },
          "Organization": {
            "type": "string",
            "description": "Organization this department belongs to",
            "nullable": true
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ParentDepartment": {
            "type": "string",
            "description": "Parent department",
            "nullable": true
          },
          "ParentDepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Path": {
            "type": "string",
            "example": "/01HXYZ123456789ABCDEFGHIJK/01HXYZ123456789ABCDEFGHIJL"
          },
          "SubDepartments": {
            "type": "array",
            "description": "Sub-departments",
            "items": {
              "type": "string"
            }
          },
          "Teams": {
            "type": "array",
            "description": "Teams in this department",
            "items": {
              "type": "string"
            }
          },
          "Users": {
            "type": "array",
            "description": "Users in this department",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DepartmentRequest": {
        "type": "object",
        "description": "DepartmentRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "ENG"
          },
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Software engineering and development"
          },
          "Icon": {
            "type": "string",
            "example": "engineering"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "ManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "Engineering"
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ParentDepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          }
        }
      },
      "DepartmentUserRequest": {
        "type": "object",
        "description": "DepartmentUserRequest model",
        "properties": {
          "Role": {
            "type": "string",
            "example": "member"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "DisableMfaRequest": {
        "type": "object",
        "description": "DisableMfaRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "123456"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          }
        },
        "required": [
          "Password",
          "Code"
        ]
      },
      "District": {
        "type": "object",
        "description": "District model",
        "properties": {
          "City": {
            "type": "string",
            "description": "District's city"
          },
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Code": {
            "type": "string",
            "example": "DT"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Downtown"
          }
        }
      },
      "EditMessageRequest": {
        "type": "object",
        "description": "EditMessageRequest model",
        "properties": {
          "Content": {
            "type": "string"
          }
        }
      },
      "EnableMfaRequest": {
        "type": "object",
        "description": "EnableMfaRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "123456"
          },
          "QrCode": {
            "type": "string",
            "example": "otpauth://totp/Example:alice@google.com?secret=JBSWY3DPEHPK3PXP\u0026issuer=Example"
          },
          "Secret": {
            "type": "string",
            "example": "ABCDEFGHIJKLMNOP"
          }
        },
        "required": [
          "Code"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "description": "ErrorResponse model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "VALIDATION_ERROR"
          },
          "Details": {
            "type": "string"
          },
          "Message": {
            "type": "string",
            "example": "Something went wrong"
          },
          "Status": {
            "type": "string",
            "example": "error"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "EventFilterRequest": {
        "type": "object",
        "description": "EventFilterRequest model",
        "properties": {
          "CreatorID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "EndDate": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "IncludeRecurring": {
            "type": "boolean",
            "example": "true"
          },
          "ParticipantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "StartDate": {
            "type": "string",
            "example": "2024-01-01T00:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "Type": {
            "type": "string",
            "example": "meeting"
          }
        }
      },
      "EventParticipant": {
        "type": "object",
        "description": "EventParticipant model",
        "properties": {
          "Event": {
            "type": "string",
            "description": "Associated event",
            "nullable": true
          },
          "EventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsRequired": {
            "type": "boolean",
            "example": "true"
          },
          "ReminderSentAt": {
            "type": "string",
            "example": "2024-01-15T09:00:00Z",
            "nullable": true
          },
          "RespondedAt": {
            "type": "string",
            "example": "2024-01-15T09:30:00Z",
            "nullable": true
          },
          "ResponseComment": {
            "type": "string",
            "example": "I'll be 5 minutes late"
          },
          "ResponseStatus": {
            "type": "string",
            "example": "pending"
          },
          "Role": {
            "type": "string",
            "example": "attendee"
          },
          "SendReminder": {
            "type": "boolean",
            "example": "true"
          },
          "User": {
            "type": "string",
            "description": "Participant user",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "EventReminder": {
        "type": "object",
        "description": "EventReminder model",
        "properties": {
          "ErrorMessage": {
            "type": "string",
            "example": "Failed to send email"
          },
          "Event": {
            "type": "string",
            "description": "Associated calendar event",
            "nullable": true
          },
          "EventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "MinutesBefore": {
            "type": "integer",
            "example": "15"
          },
          "ScheduledAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T09:45:00Z"
          },
          "Sent": {
            "type": "boolean",
            "example": "false"
          },
          "SentAt": {
            "type": "string",
            "example": "2024-01-15T09:45:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "pending"
          },
          "Type": {
            "type": "string",
            "example": "email"
          },
          "User": {
            "type": "string",
            "description": "User to receive reminder",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "ExportCalendarRequest": {
        "type": "object",
        "description": "ExportCalendarRequest model",
        "properties": {
          "EndDate": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-31T23:59:59Z"
          },
          "EventTypes": {
            "type": "array",
            "example": "[\"meeting\", \"appointment\"]",
            "items": {
              "type": "string"
            }
          },
          "IncludeRecurring": {
            "type": "boolean",
            "example": "true"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        },
        "required": [
          "StartDate",
          "EndDate",
          "UserID"
        ]
      },
      "FilterCondition": {
        "type": "object",
        "description": "Individual filter condition for querybuilder",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name to filter on",
            "example": "name"
          },
          "operator": {
            "type": "string",
            "description": "Comparison operator",
            "example": "LIKE",
            "enum": [
              "=",
              "!=",
              "\u003e",
              "\u003e=",
              "\u003c",
              "\u003c=",
              "LIKE",
              "NOT LIKE",
              "IN",
              "NOT IN",
              "BETWEEN",
              "IS NULL",
              "IS NOT NULL"
            ]
          },
          "value": {
            "description": "Value to compare against",
            "example": "%john%"
          }
        },
        "required": [
          "field",
          "operator"
        ]
      },
      "FilterGroup": {
        "type": "object",
        "description": "Filter group for complex querybuilder filtering",
        "properties": {
          "conditions": {
            "type": "array",
            "description": "Array of filter conditions",
            "items": {
              "$ref": "#/components/schemas/FilterCondition"
            }
          },
          "groups": {
            "type": "array",
            "description": "Nested filter groups",
            "items": {
              "$ref": "#/components/schemas/FilterGroup"
            }
          },
          "operator": {
            "type": "string",
            "description": "Logical operator for combining conditions",
            "example": "AND",
            "enum": [
              "AND",
              "OR"
            ]
          }
        },
        "required": [
          "operator"
        ]
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "description": "ForgotPasswordRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          }
        },
        "required": [
          "Email"
        ]
      },
      "GenerateKeyPairRequest": {
        "type": "object",
        "description": "GenerateKeyPairRequest model",
        "properties": {
          "ExpiresAt": {
            "type": "string"
          },
          "KeyType": {
            "type": "string"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "description": "LoginRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "MfaCode": {
            "type": "string",
            "example": "123456"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          },
          "Remember": {
            "type": "boolean",
            "example": "false"
          },
          "WebauthnAssertion": {
            "type": "string",
            "example": "{\"id\":\"abc123\",\"response\":{\"authenticatorData\":\"...\",\"clientDataJSON\":\"...\",\"signature\":\"...\"}}"
          }
        },
        "required": [
          "Email",
          "Password"
        ]
      },
      "Meeting": {
        "type": "object",
        "description": "Meeting model",
        "properties": {
          "AllowJoinBeforeHost": {
            "type": "boolean",
            "example": "true"
          },
          "AttendanceCount": {
            "type": "integer",
            "example": "5"
          },
          "ConflictDetails": {
            "type": "string",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\", \"01HXYZ123456789ABCDEFGHIJL\"]"
          },
          "EndedAt": {
            "type": "string",
            "example": "2024-01-15T11:00:00Z",
            "nullable": true
          },
          "Event": {
            "type": "string",
            "description": "Associated calendar event",
            "nullable": true
          },
          "EventID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "HasConflicts": {
            "type": "boolean",
            "example": "false"
          },
          "MeetingID": {
            "type": "string",
            "example": "123456789"
          },
          "MeetingMinutes": {
            "type": "string",
            "example": "Key decisions: 1. Project timeline approved 2. Budget increased by 10%"
          },
          "MeetingNotes": {
            "type": "string",
            "example": "Agenda: 1. Project updates 2. Q\u0026A"
          },
          "MeetingType": {
            "type": "string",
            "example": "video"
          },
          "MeetingURL": {
            "type": "string",
            "example": "https://zoom.us/j/123456789"
          },
          "MuteParticipantsOnEntry": {
            "type": "boolean",
            "example": "false"
          },
          "Passcode": {
            "type": "string",
            "example": "123456"
          },
          "Platform": {
            "type": "string",
            "example": "zoom"
          },
          "RecordMeeting": {
            "type": "boolean",
            "example": "false"
          },
          "RecordingURL": {
            "type": "string",
            "example": "https://zoom.us/recording/123456789"
          },
          "StartedAt": {
            "type": "string",
            "example": "2024-01-15T10:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "WaitingRoom": {
            "type": "string",
            "example": "enabled"
          }
        }
      },
      "MessageReaction": {
        "type": "object",
        "description": "MessageReaction model",
        "properties": {
          "Emoji": {
            "type": "string",
            "example": "👍"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "MessageID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ReactedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "MessageRead": {
        "type": "object",
        "description": "MessageRead model",
        "properties": {
          "Message": {
            "type": "string",
            "nullable": true
          },
          "MessageID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ReadAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "MessageThread": {
        "type": "object",
        "description": "MessageThread model",
        "properties": {
          "ChatRoom": {
            "type": "string",
            "nullable": true
          },
          "ChatRoomID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsResolved": {
            "type": "boolean",
            "example": "false"
          },
          "LastActivityAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "MessageCount": {
            "type": "integer",
            "example": "5"
          },
          "Messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ResolvedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "ResolvedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "ResolvedByUser": {
            "type": "string",
            "nullable": true
          },
          "RootMessage": {
            "type": "string",
            "nullable": true
          },
          "RootMessageID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Title": {
            "type": "string",
            "example": "Bug Discussion"
          }
        }
      },
      "Milestone": {
        "type": "object",
        "description": "Milestone model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#10B981"
          },
          "CompletedAt": {
            "type": "string",
            "example": "2024-03-25T00:00:00Z",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "Major feature release with new UI"
          },
          "DueDate": {
            "type": "string",
            "example": "2024-03-31T00:00:00Z",
            "nullable": true
          },
          "Icon": {
            "type": "string",
            "example": "milestone"
          },
          "Progress": {
            "type": "number",
            "example": "75.0"
          },
          "Project": {
            "type": "string",
            "description": "Project this milestone belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Status": {
            "type": "string",
            "example": "open"
          },
          "Tasks": {
            "type": "array",
            "description": "Tasks in this milestone",
            "items": {
              "type": "string"
            }
          },
          "Title": {
            "type": "string",
            "example": "Version 2.0 Release"
          }
        }
      },
      "MilestoneRequest": {
        "type": "object",
        "description": "MilestoneRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#10B981"
          },
          "Description": {
            "type": "string",
            "example": "Major feature release with new UI"
          },
          "DueDate": {
            "type": "string",
            "example": "2024-03-31T00:00:00Z",
            "nullable": true
          },
          "Icon": {
            "type": "string",
            "example": "milestone"
          },
          "Progress": {
            "type": "number",
            "example": "75.0"
          },
          "Status": {
            "type": "string",
            "example": "open"
          },
          "Title": {
            "type": "string",
            "example": "Version 2.0 Release"
          }
        }
      },
      "Notification": {
        "type": "object",
        "description": "Notification model",
        "properties": {
          "Channel": {
            "type": "string"
          },
          "Data": {
            "type": "string"
          },
          "FailedAt": {
            "type": "string",
            "nullable": true
          },
          "FailureReason": {
            "type": "string",
            "nullable": true
          },
          "Notifiable": {
            "type": "string"
          },
          "NotifiableID": {
            "type": "string"
          },
          "NotifiableType": {
            "type": "string"
          },
          "ReadAt": {
            "type": "string",
            "nullable": true
          },
          "SentAt": {
            "type": "string",
            "nullable": true
          },
          "Type": {
            "type": "string"
          }
        }
      },
      "OAuthAccessToken": {
        "type": "object",
        "description": "OAuthAccessToken model",
        "properties": {
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "RefreshToken": {
            "type": "string",
            "nullable": true
          },
          "Revoked": {
            "type": "boolean"
          },
          "Scopes": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuthAuthCode": {
        "type": "object",
        "description": "OAuthAuthCode model",
        "properties": {
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CodeChallenge": {
            "type": "string",
            "nullable": true
          },
          "CodeChallengeMethod": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          },
          "Scopes": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "OAuthAuthorizationRequest": {
        "type": "object",
        "description": "OAuthAuthorizationRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "CodeChallenge": {
            "type": "string",
            "example": "abc123def456"
          },
          "CodeChallengeMethod": {
            "type": "string",
            "example": "S256"
          },
          "RedirectURI": {
            "type": "string",
            "example": "https://example.com/callback"
          },
          "ResponseType": {
            "type": "string",
            "example": "code"
          },
          "Scope": {
            "type": "string",
            "example": "read write"
          },
          "State": {
            "type": "string",
            "example": "abc123def456"
          }
        },
        "required": [
          "ResponseType",
          "ClientID",
          "RedirectURI"
        ]
      },
      "OAuthClient": {
        "type": "object",
        "description": "OAuthClient model",
        "properties": {
          "AccessTokens": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AuthCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "PasswordClient": {
            "type": "boolean"
          },
          "PersonalAccessClient": {
            "type": "boolean"
          },
          "Provider": {
            "type": "string",
            "nullable": true
          },
          "Redirect": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          },
          "Secret": {
            "type": "string",
            "nullable": true
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuthClientRequest": {
        "type": "object",
        "description": "OAuthClientRequest model",
        "properties": {
          "Name": {
            "type": "string",
            "example": "My OAuth Client"
          },
          "PasswordClient": {
            "type": "boolean",
            "example": "false"
          },
          "PersonalAccessClient": {
            "type": "boolean",
            "example": "false"
          },
          "RedirectURIs": {
            "type": "array",
            "example": "[\"https://example.com/callback\", \"https://app.example.com/callback\"]",
            "items": {
              "type": "string"
            }
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          }
        },
        "required": [
          "Name"
        ]
      },
      "OAuthClientUpdateRequest": {
        "type": "object",
        "description": "OAuthClientUpdateRequest model",
        "properties": {
          "Name": {
            "type": "string",
            "example": "Updated Client Name"
          },
          "RedirectURIs": {
            "type": "array",
            "example": "[\"https://example.com/callback\", \"https://app.example.com/callback\"]",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "Name"
        ]
      },
      "OAuthCompleteDeviceAuthorizationRequest": {
        "type": "object",
        "description": "OAuthCompleteDeviceAuthorizationRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "user@example.com"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          },
          "UserCode": {
            "type": "string",
            "example": "ABCD"
          }
        },
        "required": [
          "UserCode",
          "Email",
          "Password"
        ]
      },
      "OAuthConsent": {
        "type": "object",
        "description": "OAuthConsent model",
        "properties": {
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresAt": {
            "type": "string",
            "nullable": true
          },
          "Granted": {
            "type": "boolean"
          },
          "ID": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          },
          "Scopes": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "OAuthDeviceAuthorizationRequest": {
        "type": "object",
        "description": "OAuthDeviceAuthorizationRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Scope": {
            "type": "string",
            "example": "read write"
          }
        },
        "required": [
          "ClientID"
        ]
      },
      "OAuthDeviceCode": {
        "type": "object",
        "description": "OAuthDeviceCode model",
        "properties": {
          "Authorized": {
            "type": "boolean"
          },
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          },
          "Scopes": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserCode": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OAuthDeviceTokenRequest": {
        "type": "object",
        "description": "OAuthDeviceTokenRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "DeviceCode": {
            "type": "string",
            "example": "abc123def456"
          },
          "GrantType": {
            "type": "string",
            "example": "urn:ietf:params:oauth:grant-type:device_code"
          }
        },
        "required": [
          "GrantType",
          "DeviceCode",
          "ClientID"
        ]
      },
      "OAuthPersonalAccessClient": {
        "type": "object",
        "description": "OAuthPersonalAccessClient model",
        "properties": {
          "Client": {
            "type": "string",
            "nullable": true
          },
          "ClientID": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OAuthPersonalAccessTokenRequest": {
        "type": "object",
        "description": "OAuthPersonalAccessTokenRequest model",
        "properties": {
          "ExpiresAt": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "My Personal Token"
          },
          "Scope": {
            "type": "string",
            "example": "read write"
          }
        },
        "required": [
          "Name"
        ]
      },
      "OAuthRedirectURIRequest": {
        "type": "object",
        "description": "OAuthRedirectURIRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "RedirectURI": {
            "type": "string",
            "example": "https://example.com/callback"
          }
        },
        "required": [
          "RedirectURI",
          "ClientID"
        ]
      },
      "OAuthRefreshToken": {
        "type": "object",
        "description": "OAuthRefreshToken model",
        "properties": {
          "AccessToken": {
            "type": "string",
            "nullable": true
          },
          "AccessTokenID": {
            "type": "string"
          },
          "ExpiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "Revoked": {
            "type": "boolean"
          }
        }
      },
      "OAuthScopeRequest": {
        "type": "object",
        "description": "OAuthScopeRequest model",
        "properties": {
          "Scope": {
            "type": "string",
            "example": "read write delete"
          }
        },
        "required": [
          "Scope"
        ]
      },
      "OAuthTokenExchangeRequest": {
        "type": "object",
        "description": "OAuthTokenExchangeRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ClientSecret": {
            "type": "string",
            "example": "abc123def456"
          },
          "GrantType": {
            "type": "string",
            "example": "urn:ietf:params:oauth:grant-type:token-exchange"
          },
          "RequestedTokenType": {
            "type": "string",
            "example": "access_token"
          },
          "Scope": {
            "type": "string",
            "example": "read write"
          },
          "SubjectToken": {
            "type": "string",
            "example": "abc123def456"
          },
          "SubjectTokenType": {
            "type": "string",
            "example": "access_token"
          }
        },
        "required": [
          "GrantType",
          "SubjectToken",
          "SubjectTokenType",
          "RequestedTokenType",
          "ClientID"
        ]
      },
      "OAuthTokenIntrospectionRequest": {
        "type": "object",
        "description": "OAuthTokenIntrospectionRequest model",
        "properties": {
          "Token": {
            "type": "string",
            "example": "abc123def456"
          },
          "TokenTypeHint": {
            "type": "string",
            "example": "access_token"
          }
        },
        "required": [
          "Token"
        ]
      },
      "OAuthTokenRequest": {
        "type": "object",
        "description": "OAuthTokenRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ClientSecret": {
            "type": "string",
            "example": "abc123def456"
          },
          "Code": {
            "type": "string",
            "example": "abc123def456"
          },
          "CodeVerifier": {
            "type": "string",
            "example": "abc123def456"
          },
          "DeviceCode": {
            "type": "string",
            "example": "abc123def456"
          },
          "GrantType": {
            "type": "string",
            "example": "password"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          },
          "RedirectURI": {
            "type": "string",
            "example": "https://example.com/callback"
          },
          "RefreshToken": {
            "type": "string",
            "example": "abc123def456"
          },
          "RequestedTokenType": {
            "type": "string",
            "example": "access_token"
          },
          "Scope": {
            "type": "string",
            "example": "read write"
          },
          "State": {
            "type": "string",
            "example": "abc123def456"
          },
          "SubjectToken": {
            "type": "string",
            "example": "abc123def456"
          },
          "SubjectTokenType": {
            "type": "string",
            "example": "access_token"
          },
          "Username": {
            "type": "string",
            "example": "user@example.com"
          }
        },
        "required": [
          "GrantType",
          "ClientID"
        ]
      },
      "OAuthTokenRevocationRequest": {
        "type": "object",
        "description": "OAuthTokenRevocationRequest model",
        "properties": {
          "ClientID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ClientSecret": {
            "type": "string",
            "example": "abc123def456"
          },
          "Token": {
            "type": "string",
            "example": "abc123def456"
          },
          "TokenTypeHint": {
            "type": "string",
            "example": "access_token"
          }
        },
        "required": [
          "Token"
        ]
      },
      "Organization": {
        "type": "object",
        "description": "Organization model",
        "properties": {
          "Address": {
            "type": "string",
            "example": "123 Main St, City, State 12345"
          },
          "Banner": {
            "type": "string",
            "example": "https://acme.com/banner.png"
          },
          "City": {
            "type": "string",
            "description": "Organization's city",
            "nullable": true
          },
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "example": "contact@acme.com"
          },
          "ContactPhone": {
            "type": "string",
            "example": "+1-555-123-4567"
          },
          "Country": {
            "type": "string",
            "description": "Organization's country",
            "nullable": true
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Departments": {
            "type": "array",
            "description": "Organization's departments",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string",
            "example": "Leading technology solutions provider"
          },
          "District": {
            "type": "string",
            "description": "Organization's district",
            "nullable": true
          },
          "DistrictID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Domain": {
            "type": "string",
            "example": "acme.com"
          },
          "FoundedAt": {
            "type": "string",
            "example": "2020-01-15T00:00:00Z",
            "nullable": true
          },
          "Industry": {
            "type": "string",
            "example": "Technology"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsVerified": {
            "type": "boolean",
            "example": "false"
          },
          "Level": {
            "type": "integer",
            "example": "0"
          },
          "Logo": {
            "type": "string",
            "example": "https://acme.com/logo.png"
          },
          "Name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "ParentOrganization": {
            "type": "string",
            "description": "Parent organization",
            "nullable": true
          },
          "ParentOrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Path": {
            "type": "string",
            "example": "/01HXYZ123456789ABCDEFGHIJK/01HXYZ123456789ABCDEFGHIJL"
          },
          "PostalCode": {
            "type": "string",
            "example": "12345"
          },
          "Projects": {
            "type": "array",
            "description": "Organization's projects",
            "items": {
              "type": "string"
            }
          },
          "Province": {
            "type": "string",
            "description": "Organization's province/state",
            "nullable": true
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"theme\":\"dark\",\"timezone\":\"UTC\",\"features\":{\"api_access\":true,\"analytics\":true}}"
          },
          "Size": {
            "type": "string",
            "example": "medium"
          },
          "Slug": {
            "type": "string",
            "example": "acme-corp"
          },
          "Subsidiaries": {
            "type": "array",
            "description": "Subsidiary organizations",
            "items": {
              "type": "string"
            }
          },
          "Teams": {
            "type": "array",
            "description": "Organization's teams",
            "items": {
              "type": "string"
            }
          },
          "Tenant": {
            "type": "string",
            "description": "Tenant that this organization belongs to",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "company"
          },
          "Users": {
            "type": "array",
            "description": "Users associated with this organization",
            "items": {
              "type": "string"
            }
          },
          "VerifiedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Website": {
            "type": "string",
            "example": "https://acme.com"
          }
        }
      },
      "OrganizationRequest": {
        "type": "object",
        "description": "OrganizationRequest model",
        "properties": {
          "Address": {
            "type": "string",
            "example": "123 Main St, City, State 12345"
          },
          "Banner": {
            "type": "string",
            "example": "https://acme.com/banner.png"
          },
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "example": "contact@acme.com"
          },
          "ContactPhone": {
            "type": "string",
            "example": "+1-555-123-4567"
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "Leading technology solutions provider"
          },
          "DistrictID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Domain": {
            "type": "string",
            "example": "acme.com"
          },
          "FoundedAt": {
            "type": "string",
            "example": "2020-01-15T00:00:00Z",
            "nullable": true
          },
          "Industry": {
            "type": "string",
            "example": "Technology"
          },
          "Logo": {
            "type": "string",
            "example": "https://acme.com/logo.png"
          },
          "Name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "ParentOrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "PostalCode": {
            "type": "string",
            "example": "12345"
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"theme\":\"dark\",\"timezone\":\"UTC\",\"features\":{\"api_access\":true,\"analytics\":true}}"
          },
          "Size": {
            "type": "string",
            "example": "medium"
          },
          "Slug": {
            "type": "string",
            "example": "acme-corp"
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "company"
          },
          "Website": {
            "type": "string",
            "example": "https://acme.com"
          }
        }
      },
      "OrganizationUserRequest": {
        "type": "object",
        "description": "OrganizationUserRequest model",
        "properties": {
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "EmployeeID": {
            "type": "string",
            "example": "EMP001"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2025-01-15T10:30:00Z",
            "nullable": true
          },
          "HireDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "ManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Permissions": {
            "type": "string",
            "example": "[\"read:projects\",\"write:reports\"]"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "Status": {
            "type": "string",
            "example": "active"
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "description": "PaginatedResponse model",
        "properties": {
          "Data": {
            "type": "string"
          },
          "Message": {
            "type": "string",
            "example": "Data retrieved successfully"
          },
          "Pagination": {
            "type": "string"
          },
          "Status": {
            "type": "string",
            "example": "success"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "PaginationInfo": {
        "type": "object",
        "description": "Pagination metadata for querybuilder responses",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of items in current page",
            "example": 20
          },
          "current_page": {
            "type": "integer",
            "description": "Current page number (offset pagination only)",
            "example": 1,
            "nullable": true
          },
          "from": {
            "type": "integer",
            "description": "Starting item number (offset pagination only)",
            "example": 1,
            "nullable": true
          },
          "has_next": {
            "type": "boolean",
            "description": "Whether there are more items after current page",
            "example": true
          },
          "has_prev": {
            "type": "boolean",
            "description": "Whether there are items before current page",
            "example": false
          },
          "last_page": {
            "type": "integer",
            "description": "Last page number (offset pagination only)",
            "example": 5,
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "description": "Maximum items per page",
            "example": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "Cursor for next page (cursor pagination only)",
            "example": "eyJpZCI6MTIzfQ==",
            "nullable": true
          },
          "per_page": {
            "type": "integer",
            "description": "Items per page (offset pagination only)",
            "example": 20,
            "nullable": true
          },
          "prev_cursor": {
            "type": "string",
            "description": "Cursor for previous page (cursor pagination only)",
            "example": "eyJpZCI6MTAwfQ==",
            "nullable": true
          },
          "to": {
            "type": "integer",
            "description": "Ending item number (offset pagination only)",
            "example": 20,
            "nullable": true
          },
          "total": {
            "type": "integer",
            "description": "Total number of items (offset pagination only)",
            "example": 100,
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of pagination used",
            "example": "offset",
            "enum": [
              "offset",
              "cursor"
            ]
          }
        },
        "required": [
          "type",
          "count",
          "limit",
          "has_next",
          "has_prev"
        ]
      },
      "PasswordResetToken": {
        "type": "object",
        "description": "PasswordResetToken model",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "Token": {
            "type": "string",
            "example": "abc123def456"
          }
        }
      },
      "Permission": {
        "type": "object",
        "description": "Permission model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Create new users"
          },
          "Guard": {
            "type": "string",
            "example": "web"
          },
          "Name": {
            "type": "string",
            "example": "users.create"
          },
          "Roles": {
            "type": "array",
            "description": "Roles that have this permission",
            "items": {
              "type": "string"
            }
          },
          "Tenant": {
            "type": "string",
            "description": "Tenant this permission belongs to",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          }
        }
      },
      "Project": {
        "type": "object",
        "description": "Project model",
        "properties": {
          "Budget": {
            "type": "number",
            "example": "50000.00"
          },
          "Code": {
            "type": "string",
            "example": "CPR-2024"
          },
          "Color": {
            "type": "string",
            "example": "#F59E0B"
          },
          "Description": {
            "type": "string",
            "example": "Redesign and modernize the customer portal"
          },
          "EndDate": {
            "type": "string",
            "example": "2024-06-15T00:00:00Z",
            "nullable": true
          },
          "Icon": {
            "type": "string",
            "example": "project"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Milestones": {
            "type": "array",
            "description": "Project milestones",
            "items": {
              "type": "string"
            }
          },
          "Name": {
            "type": "string",
            "example": "Customer Portal Redesign"
          },
          "Organization": {
            "type": "string",
            "description": "Organization this project belongs to",
            "nullable": true
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Priority": {
            "type": "string",
            "example": "high"
          },
          "Progress": {
            "type": "number",
            "example": "65.5"
          },
          "ProjectManager": {
            "type": "string",
            "description": "Project manager",
            "nullable": true
          },
          "ProjectManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"timezone\":\"UTC\",\"working_hours\":{\"start\":\"09:00\",\"end\":\"17:00\"}}"
          },
          "StartDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "active"
          },
          "TaskBoards": {
            "type": "array",
            "description": "Project task boards",
            "items": {
              "type": "string"
            }
          },
          "TaskLabels": {
            "type": "array",
            "description": "Project task labels",
            "items": {
              "type": "string"
            }
          },
          "Tasks": {
            "type": "array",
            "description": "Project tasks",
            "items": {
              "type": "string"
            }
          },
          "Teams": {
            "type": "array",
            "description": "Teams working on this project",
            "items": {
              "type": "string"
            }
          },
          "Users": {
            "type": "array",
            "description": "Users assigned to this project",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProjectRequest": {
        "type": "object",
        "description": "ProjectRequest model",
        "properties": {
          "Budget": {
            "type": "number",
            "example": "50000.00"
          },
          "Code": {
            "type": "string",
            "example": "CPR-2024"
          },
          "Color": {
            "type": "string",
            "example": "#F59E0B"
          },
          "Description": {
            "type": "string",
            "example": "Redesign and modernize the customer portal"
          },
          "EndDate": {
            "type": "string",
            "example": "2024-06-15T00:00:00Z",
            "nullable": true
          },
          "Icon": {
            "type": "string",
            "example": "project"
          },
          "Name": {
            "type": "string",
            "example": "Customer Portal Redesign"
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Priority": {
            "type": "string",
            "example": "high"
          },
          "ProjectManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"timezone\":\"UTC\",\"working_hours\":{\"start\":\"09:00\",\"end\":\"17:00\"}}"
          },
          "StartDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "active"
          }
        }
      },
      "ProjectUserRequest": {
        "type": "object",
        "description": "ProjectUserRequest model",
        "properties": {
          "Allocation": {
            "type": "number",
            "example": "100.0"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "Province": {
        "type": "object",
        "description": "Province model",
        "properties": {
          "Cities": {
            "type": "array",
            "description": "Province's cities",
            "items": {
              "type": "string"
            }
          },
          "Code": {
            "type": "string",
            "example": "CA"
          },
          "Country": {
            "type": "string",
            "description": "Province's country"
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "California"
          },
          "NumericCode": {
            "type": "integer",
            "example": "32"
          }
        }
      },
      "PushSubscription": {
        "type": "object",
        "description": "PushSubscription model",
        "properties": {
          "AuthToken": {
            "type": "string"
          },
          "ContentEncoding": {
            "type": "string"
          },
          "Endpoint": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "P256dhKey": {
            "type": "string"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string"
          }
        }
      },
      "QueryBuilderResponse": {
        "type": "object",
        "description": "QueryBuilderResponse model",
        "properties": {
          "Data": {
            "type": "string"
          },
          "Message": {
            "type": "string",
            "example": "Data retrieved successfully"
          },
          "Pagination": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "success"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "description": "RefreshTokenRequest model",
        "properties": {
          "RefreshToken": {
            "type": "string",
            "example": "abc123def456"
          }
        },
        "required": [
          "RefreshToken"
        ]
      },
      "RegisterRequest": {
        "type": "object",
        "description": "RegisterRequest model",
        "properties": {
          "AcceptTerms": {
            "type": "boolean",
            "example": "true"
          },
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "Name": {
            "type": "string",
            "example": "John Doe"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          },
          "PasswordConfirmation": {
            "type": "string",
            "example": "password123"
          }
        },
        "required": [
          "Name",
          "Email",
          "Password",
          "PasswordConfirmation",
          "AcceptTerms"
        ]
      },
      "RemoveReactionRequest": {
        "type": "object",
        "description": "RemoveReactionRequest model",
        "properties": {
          "Emoji": {
            "type": "string",
            "example": "👍"
          }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "description": "ResetPasswordRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "Password": {
            "type": "string",
            "example": "newpassword123"
          },
          "PasswordConfirmation": {
            "type": "string",
            "example": "newpassword123"
          },
          "Token": {
            "type": "string",
            "example": "abc123def456"
          }
        },
        "required": [
          "Token",
          "Email",
          "Password",
          "PasswordConfirmation"
        ]
      },
      "ResolveThreadRequest": {
        "type": "object",
        "description": "ResolveThreadRequest model",
        "properties": {
          "Note": {
            "type": "string"
          }
        }
      },
      "RespondToInvitationRequest": {
        "type": "object",
        "description": "RespondToInvitationRequest model",
        "properties": {
          "Response": {
            "type": "string"
          }
        }
      },
      "Role": {
        "type": "object",
        "description": "Role model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Administrator role with full access"
          },
          "Guard": {
            "type": "string",
            "example": "web"
          },
          "Name": {
            "type": "string",
            "example": "admin"
          },
          "Permissions": {
            "type": "array",
            "description": "Permissions assigned to this role",
            "items": {
              "type": "string"
            }
          },
          "Tenant": {
            "type": "string",
            "description": "Tenant this role belongs to",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Users": {
            "type": "array",
            "description": "Users assigned this role",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RolePermission": {
        "type": "object",
        "description": "RolePermission model",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string"
          },
          "PermissionID": {
            "type": "string"
          },
          "RoleID": {
            "type": "string"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SendMessageRequest": {
        "type": "object",
        "description": "SendMessageRequest model",
        "properties": {
          "Content": {
            "type": "string"
          },
          "Metadata": {
            "type": "string"
          },
          "ReplyToID": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        }
      },
      "Task": {
        "type": "object",
        "description": "Task model",
        "properties": {
          "Activities": {
            "type": "array",
            "description": "Task activities",
            "items": {
              "type": "string"
            }
          },
          "ActualHours": {
            "type": "number",
            "example": "6.5"
          },
          "Assignee": {
            "type": "string",
            "description": "Task assignee",
            "nullable": true
          },
          "AssigneeID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Comments": {
            "type": "array",
            "description": "Task comments",
            "items": {
              "type": "string"
            }
          },
          "Dependencies": {
            "type": "array",
            "description": "Task dependencies (tasks that depend on this task)",
            "items": {
              "type": "string"
            }
          },
          "Dependents": {
            "type": "array",
            "description": "Tasks this task depends on",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string",
            "example": "Add JWT-based authentication with refresh tokens"
          },
          "DueDate": {
            "type": "string",
            "example": "2024-01-31T00:00:00Z",
            "nullable": true
          },
          "EstimatedHours": {
            "type": "number",
            "example": "8.0"
          },
          "Icon": {
            "type": "string",
            "example": "feature"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsArchived": {
            "type": "boolean",
            "example": "false"
          },
          "Labels": {
            "type": "array",
            "description": "Task labels",
            "items": {
              "type": "string"
            }
          },
          "Milestone": {
            "type": "string",
            "description": "Associated milestone",
            "nullable": true
          },
          "MilestoneID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Number": {
            "type": "integer",
            "example": "1"
          },
          "ParentTask": {
            "type": "string",
            "description": "Parent task",
            "nullable": true
          },
          "ParentTaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Position": {
            "type": "integer",
            "example": "1"
          },
          "Priority": {
            "type": "string",
            "example": "high"
          },
          "Progress": {
            "type": "number",
            "example": "75.0"
          },
          "Project": {
            "type": "string",
            "description": "Project this task belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Reviewer": {
            "type": "string",
            "description": "Task reviewer",
            "nullable": true
          },
          "ReviewerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"auto_assign\":true,\"require_review\":false}"
          },
          "StartDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "in_progress"
          },
          "Subtasks": {
            "type": "array",
            "description": "Subtasks",
            "items": {
              "type": "string"
            }
          },
          "TimeEntries": {
            "type": "array",
            "description": "Task time entries",
            "items": {
              "type": "string"
            }
          },
          "Title": {
            "type": "string",
            "example": "Implement user authentication"
          },
          "Type": {
            "type": "string",
            "example": "feature"
          }
        }
      },
      "TaskActivity": {
        "type": "object",
        "description": "TaskActivity model",
        "properties": {
          "Data": {
            "type": "string",
            "example": "{\"old_value\":\"todo\",\"new_value\":\"in_progress\"}"
          },
          "Description": {
            "type": "string",
            "example": "Task assigned to John Doe"
          },
          "Task": {
            "type": "string",
            "description": "Task this activity belongs to",
            "nullable": true
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "assigned"
          },
          "User": {
            "type": "string",
            "description": "User who performed the activity",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "TaskBoard": {
        "type": "object",
        "description": "TaskBoard model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Columns": {
            "type": "array",
            "description": "Board columns",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string",
            "example": "Main development workflow board"
          },
          "Icon": {
            "type": "string",
            "example": "board"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "IsDefault": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Development Board"
          },
          "Project": {
            "type": "string",
            "description": "Project this board belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Settings": {
            "type": "string",
            "example": "{\"columns\":[\"todo\",\"in_progress\",\"done\"],\"filters\":{\"assignee\":\"all\"}}"
          },
          "Type": {
            "type": "string",
            "example": "kanban"
          }
        }
      },
      "TaskBoardColumn": {
        "type": "object",
        "description": "TaskBoardColumn model",
        "properties": {
          "Board": {
            "type": "string",
            "description": "Board this column belongs to",
            "nullable": true
          },
          "BoardID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Color": {
            "type": "string",
            "example": "#F59E0B"
          },
          "Description": {
            "type": "string",
            "example": "Tasks currently being worked on"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "In Progress"
          },
          "Position": {
            "type": "integer",
            "example": "2"
          },
          "StatusFilter": {
            "type": "string",
            "example": "in_progress"
          },
          "TaskLimit": {
            "type": "integer",
            "example": "10"
          }
        }
      },
      "TaskBoardColumnRequest": {
        "type": "object",
        "description": "TaskBoardColumnRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#F59E0B"
          },
          "Description": {
            "type": "string",
            "example": "Tasks currently being worked on"
          },
          "Name": {
            "type": "string",
            "example": "In Progress"
          },
          "Position": {
            "type": "integer",
            "example": "2"
          },
          "StatusFilter": {
            "type": "string",
            "example": "in_progress"
          },
          "TaskLimit": {
            "type": "integer",
            "example": "10"
          }
        }
      },
      "TaskBoardRequest": {
        "type": "object",
        "description": "TaskBoardRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Main development workflow board"
          },
          "Icon": {
            "type": "string",
            "example": "board"
          },
          "IsDefault": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Development Board"
          },
          "Settings": {
            "type": "string",
            "example": "{\"columns\":[\"todo\",\"in_progress\",\"done\"],\"filters\":{\"assignee\":\"all\"}}"
          },
          "Type": {
            "type": "string",
            "example": "kanban"
          }
        }
      },
      "TaskComment": {
        "type": "object",
        "description": "TaskComment model",
        "properties": {
          "Author": {
            "type": "string",
            "description": "Comment author",
            "nullable": true
          },
          "AuthorID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Content": {
            "type": "string",
            "example": "This looks good! Ready for review."
          },
          "IsInternal": {
            "type": "boolean",
            "example": "false"
          },
          "ParentComment": {
            "type": "string",
            "description": "Parent comment",
            "nullable": true
          },
          "ParentCommentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Replies": {
            "type": "array",
            "description": "Reply comments",
            "items": {
              "type": "string"
            }
          },
          "Task": {
            "type": "string",
            "description": "Task this comment belongs to",
            "nullable": true
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "comment"
          }
        }
      },
      "TaskCommentRequest": {
        "type": "object",
        "description": "TaskCommentRequest model",
        "properties": {
          "Content": {
            "type": "string",
            "example": "This looks good! Ready for review."
          },
          "IsInternal": {
            "type": "boolean",
            "example": "false"
          },
          "ParentCommentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "example": "comment"
          }
        }
      },
      "TaskDependency": {
        "type": "object",
        "description": "TaskDependency model",
        "properties": {
          "DependentTask": {
            "type": "string",
            "description": "Task that is depended upon",
            "nullable": true
          },
          "DependentTaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Task": {
            "type": "string",
            "description": "Task that depends on another",
            "nullable": true
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "blocks"
          }
        }
      },
      "TaskDependencyRequest": {
        "type": "object",
        "description": "TaskDependencyRequest model",
        "properties": {
          "DependentTaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Type": {
            "type": "string",
            "example": "blocks"
          }
        }
      },
      "TaskFilterRequest": {
        "type": "object",
        "description": "TaskFilterRequest model",
        "properties": {
          "AssigneeID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "DueDateFrom": {
            "type": "string",
            "example": "2024-01-01T00:00:00Z",
            "nullable": true
          },
          "DueDateTo": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true",
            "nullable": true
          },
          "IsArchived": {
            "type": "boolean",
            "example": "false",
            "nullable": true
          },
          "LabelIDs": {
            "type": "array",
            "example": "[\"01HXYZ123456789ABCDEFGHIJK\",\"01HXYZ123456789ABCDEFGHIJL\"]",
            "items": {
              "type": "string"
            }
          },
          "MilestoneID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "ParentTaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Priority": {
            "type": "string",
            "example": "high"
          },
          "Search": {
            "type": "string",
            "example": "authentication"
          },
          "SortBy": {
            "type": "string",
            "example": "created_at"
          },
          "SortDirection": {
            "type": "string",
            "example": "desc"
          },
          "Status": {
            "type": "string",
            "example": "in_progress"
          },
          "Type": {
            "type": "string",
            "example": "feature"
          }
        }
      },
      "TaskLabel": {
        "type": "object",
        "description": "TaskLabel model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#EF4444"
          },
          "Description": {
            "type": "string",
            "example": "Issues that need to be fixed"
          },
          "Icon": {
            "type": "string",
            "example": "bug"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Bug"
          },
          "Project": {
            "type": "string",
            "description": "Project this label belongs to",
            "nullable": true
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Tasks": {
            "type": "array",
            "description": "Tasks with this label",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TaskLabelPivot": {
        "type": "object",
        "description": "TaskLabelPivot model",
        "properties": {
          "AddedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "AddedBy": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "LabelID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Task": {
            "type": "string"
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "TaskLabel": {
            "type": "string"
          },
          "User": {
            "type": "string"
          }
        }
      },
      "TaskLabelRequest": {
        "type": "object",
        "description": "TaskLabelRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#EF4444"
          },
          "Description": {
            "type": "string",
            "example": "Issues that need to be fixed"
          },
          "Icon": {
            "type": "string",
            "example": "bug"
          },
          "Name": {
            "type": "string",
            "example": "Bug"
          }
        }
      },
      "TaskRequest": {
        "type": "object",
        "description": "TaskRequest model",
        "properties": {
          "AssigneeID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Add JWT-based authentication with refresh tokens"
          },
          "DueDate": {
            "type": "string",
            "example": "2024-01-31T00:00:00Z",
            "nullable": true
          },
          "EstimatedHours": {
            "type": "number",
            "example": "8.0"
          },
          "Icon": {
            "type": "string",
            "example": "feature"
          },
          "MilestoneID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "ParentTaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Position": {
            "type": "integer",
            "example": "1"
          },
          "Priority": {
            "type": "string",
            "example": "high"
          },
          "Progress": {
            "type": "number",
            "example": "75.0"
          },
          "ReviewerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"auto_assign\":true,\"require_review\":false}"
          },
          "StartDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "in_progress"
          },
          "Title": {
            "type": "string",
            "example": "Implement user authentication"
          },
          "Type": {
            "type": "string",
            "example": "feature"
          }
        }
      },
      "TaskTimeEntry": {
        "type": "object",
        "description": "TaskTimeEntry model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Implemented user authentication"
          },
          "Duration": {
            "type": "number",
            "example": "8.0"
          },
          "EndTime": {
            "type": "string",
            "example": "2024-01-15T17:00:00Z",
            "nullable": true
          },
          "IsBillable": {
            "type": "boolean",
            "example": "true"
          },
          "Rate": {
            "type": "number",
            "example": "50.00"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T09:00:00Z"
          },
          "Task": {
            "type": "string",
            "description": "Task this time entry belongs to",
            "nullable": true
          },
          "TaskID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "User": {
            "type": "string",
            "description": "User who logged the time",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "TaskTimeEntryRequest": {
        "type": "object",
        "description": "TaskTimeEntryRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Implemented user authentication"
          },
          "Duration": {
            "type": "number",
            "example": "8.0"
          },
          "EndTime": {
            "type": "string",
            "example": "2024-01-15T17:00:00Z",
            "nullable": true
          },
          "IsBillable": {
            "type": "boolean",
            "example": "true"
          },
          "Rate": {
            "type": "number",
            "example": "50.00"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T09:00:00Z"
          }
        }
      },
      "Team": {
        "type": "object",
        "description": "Team model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "BE-DEV"
          },
          "Color": {
            "type": "string",
            "example": "#10B981"
          },
          "CurrentSize": {
            "type": "integer",
            "example": "8"
          },
          "Department": {
            "type": "string",
            "description": "Department this team belongs to",
            "nullable": true
          },
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "Backend development and API team"
          },
          "Icon": {
            "type": "string",
            "example": "backend"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "MaxSize": {
            "type": "integer",
            "example": "10"
          },
          "Name": {
            "type": "string",
            "example": "Backend Development"
          },
          "Organization": {
            "type": "string",
            "description": "Organization this team belongs to",
            "nullable": true
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Projects": {
            "type": "array",
            "description": "Projects this team works on",
            "items": {
              "type": "string"
            }
          },
          "TeamLead": {
            "type": "string",
            "description": "Team lead",
            "nullable": true
          },
          "TeamLeadID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "example": "functional"
          },
          "Users": {
            "type": "array",
            "description": "Users in this team",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TeamProject": {
        "type": "object",
        "description": "TeamProject model",
        "properties": {
          "Allocation": {
            "type": "number",
            "example": "100.0"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Project": {
            "type": "string"
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Role": {
            "type": "string",
            "example": "contributor"
          },
          "Team": {
            "type": "string"
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "TeamProjectRequest": {
        "type": "object",
        "description": "TeamProjectRequest model",
        "properties": {
          "Allocation": {
            "type": "number",
            "example": "100.0"
          },
          "Role": {
            "type": "string",
            "example": "contributor"
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "TeamRequest": {
        "type": "object",
        "description": "TeamRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "BE-DEV"
          },
          "Color": {
            "type": "string",
            "example": "#10B981"
          },
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "example": "Backend development and API team"
          },
          "Icon": {
            "type": "string",
            "example": "backend"
          },
          "MaxSize": {
            "type": "integer",
            "example": "10"
          },
          "Name": {
            "type": "string",
            "example": "Backend Development"
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "TeamLeadID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "example": "functional"
          }
        }
      },
      "TeamUserRequest": {
        "type": "object",
        "description": "TeamUserRequest model",
        "properties": {
          "Allocation": {
            "type": "number",
            "example": "100.0"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "Tenant": {
        "type": "object",
        "description": "Tenant model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Main tenant for Acme Corporation"
          },
          "Domain": {
            "type": "string",
            "example": "acme.com"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "Organization": {
            "type": "string",
            "description": "Organization associated with this tenant (one-to-one relationship)",
            "nullable": true
          },
          "Settings": {
            "type": "string",
            "example": "{\"theme\":\"dark\",\"timezone\":\"UTC\"}"
          },
          "Slug": {
            "type": "string",
            "example": "acme-corp"
          },
          "Users": {
            "type": "array",
            "description": "Users associated with this tenant",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateCalendarEventRequest": {
        "type": "object",
        "description": "UpdateCalendarEventRequest model",
        "properties": {
          "Color": {
            "type": "string",
            "example": "#3B82F6"
          },
          "Description": {
            "type": "string",
            "example": "Weekly team sync to discuss project progress"
          },
          "EndTime": {
            "type": "string",
            "example": "2024-01-15T11:00:00Z",
            "nullable": true
          },
          "IsAllDay": {
            "type": "boolean",
            "example": "false"
          },
          "IsRecurring": {
            "type": "boolean",
            "example": "false"
          },
          "Location": {
            "type": "string",
            "example": "Conference Room A"
          },
          "Meeting": {
            "type": "string",
            "nullable": true
          },
          "RecurrenceRule": {
            "type": "string",
            "example": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO"
          },
          "RecurrenceUntil": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z",
            "nullable": true
          },
          "ReminderSettings": {
            "type": "string",
            "example": "{\"email\": 15, \"push\": 30, \"sms\": 60}"
          },
          "StartTime": {
            "type": "string",
            "example": "2024-01-15T10:00:00Z",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "Timezone": {
            "type": "string",
            "example": "UTC"
          },
          "Title": {
            "type": "string",
            "example": "Team Meeting"
          },
          "Type": {
            "type": "string",
            "example": "meeting"
          }
        }
      },
      "UpdateChatRoomRequest": {
        "type": "object",
        "description": "UpdateChatRoomRequest model",
        "properties": {
          "Avatar": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "UpdateCityRequest": {
        "type": "object",
        "description": "UpdateCityRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "LA"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Los Angeles"
          },
          "ProvinceID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UpdateCountryRequest": {
        "type": "object",
        "description": "UpdateCountryRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "US"
          },
          "Code3": {
            "type": "string",
            "example": "USA"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "United States"
          },
          "NumericCode": {
            "type": "string",
            "example": "840"
          }
        }
      },
      "UpdateDistrictRequest": {
        "type": "object",
        "description": "UpdateDistrictRequest model",
        "properties": {
          "CityID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Code": {
            "type": "string",
            "example": "DT"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Downtown"
          }
        }
      },
      "UpdateMeetingRequest": {
        "type": "object",
        "description": "UpdateMeetingRequest model",
        "properties": {
          "AllowJoinBeforeHost": {
            "type": "boolean",
            "example": "true"
          },
          "AttendanceCount": {
            "type": "integer",
            "example": "5"
          },
          "MeetingID": {
            "type": "string",
            "example": "123456789"
          },
          "MeetingMinutes": {
            "type": "string",
            "example": "Key decisions: 1. Project timeline approved 2. Budget increased by 10%"
          },
          "MeetingNotes": {
            "type": "string",
            "example": "Agenda: 1. Project updates 2. Q\u0026A"
          },
          "MeetingType": {
            "type": "string",
            "example": "video"
          },
          "MeetingURL": {
            "type": "string",
            "example": "https://zoom.us/j/123456789"
          },
          "MuteParticipantsOnEntry": {
            "type": "boolean",
            "example": "false"
          },
          "Passcode": {
            "type": "string",
            "example": "123456"
          },
          "Platform": {
            "type": "string",
            "example": "zoom"
          },
          "RecordMeeting": {
            "type": "boolean",
            "example": "false"
          },
          "Status": {
            "type": "string",
            "example": "scheduled"
          },
          "WaitingRoom": {
            "type": "string",
            "example": "enabled"
          }
        }
      },
      "UpdateMeetingStatusRequest": {
        "type": "object",
        "description": "UpdateMeetingStatusRequest model",
        "properties": {
          "AttendanceCount": {
            "type": "integer",
            "example": "5"
          },
          "MeetingMinutes": {
            "type": "string",
            "example": "Key decisions: 1. Project timeline approved 2. Budget increased by 10%"
          },
          "RecordingURL": {
            "type": "string",
            "example": "https://zoom.us/recording/123456789"
          },
          "Status": {
            "type": "string",
            "example": "in-progress"
          }
        },
        "required": [
          "Status"
        ]
      },
      "UpdateNotificationSettingsRequest": {
        "type": "object",
        "description": "UpdateNotificationSettingsRequest model",
        "properties": {
          "CustomSettings": {
            "type": "string"
          },
          "DesktopNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "EmailNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "IsMuted": {
            "type": "boolean",
            "nullable": true
          },
          "MentionNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "MuteUntil": {
            "type": "string",
            "nullable": true
          },
          "PushNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "ReactionNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "ThreadNotifications": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "UpdateParticipantResponseRequest": {
        "type": "object",
        "description": "UpdateParticipantResponseRequest model",
        "properties": {
          "ResponseComment": {
            "type": "string",
            "example": "I'll be 5 minutes late"
          },
          "ResponseStatus": {
            "type": "string",
            "example": "accepted"
          }
        },
        "required": [
          "ResponseStatus"
        ]
      },
      "UpdatePermissionRequest": {
        "type": "object",
        "description": "UpdatePermissionRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Create new users"
          },
          "Guard": {
            "type": "string",
            "example": "api"
          },
          "Name": {
            "type": "string",
            "example": "users.create"
          }
        }
      },
      "UpdateProvinceRequest": {
        "type": "object",
        "description": "UpdateProvinceRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "CA"
          },
          "CountryID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "California"
          }
        }
      },
      "UpdateRoleRequest": {
        "type": "object",
        "description": "UpdateRoleRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Administrator role with full access"
          },
          "Guard": {
            "type": "string",
            "example": "api"
          },
          "Name": {
            "type": "string",
            "example": "admin"
          }
        }
      },
      "UpdateTenantRequest": {
        "type": "object",
        "description": "UpdateTenantRequest model",
        "properties": {
          "Description": {
            "type": "string",
            "example": "A leading technology company"
          },
          "Domain": {
            "type": "string",
            "example": "acme.example.com"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "Settings": {
            "type": "string",
            "example": "{\"theme\": \"dark\", \"timezone\": \"UTC\"}"
          },
          "Slug": {
            "type": "string",
            "example": "acme-corp"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "description": "UpdateUserRequest model",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "John Doe"
          },
          "Password": {
            "type": "string",
            "example": "newpassword123"
          }
        }
      },
      "User": {
        "type": "object",
        "description": "User model",
        "properties": {
          "Avatar": {
            "type": "string",
            "example": "https://example.com/avatar.jpg"
          },
          "DiscordWebhook": {
            "type": "string",
            "example": "https://discord.com/api/webhooks/..."
          },
          "Email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "EmailVerifiedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "FailedLoginAttempts": {
            "type": "integer",
            "example": "0"
          },
          "GoogleID": {
            "type": "string",
            "example": "123456789012345678901",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "LastLoginAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "LastLoginIp": {
            "type": "string",
            "example": "192.168.1.1"
          },
          "LastLoginUserAgent": {
            "type": "string",
            "example": "Mozilla/5.0..."
          },
          "LockedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "LockedUntil": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "MfaBackupCodes": {
            "type": "string",
            "example": "[{\"code\":\"1234-5678\",\"used\":false}]"
          },
          "MfaEnabled": {
            "type": "boolean",
            "example": "false"
          },
          "MfaEnabledAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "MfaSecret": {
            "type": "string",
            "example": "abc123def456"
          },
          "Name": {
            "type": "string",
            "example": "John Doe"
          },
          "Password": {
            "type": "string",
            "example": "password123"
          },
          "PasswordResetExpiresAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "PasswordResetToken": {
            "type": "string",
            "example": "abc123def456"
          },
          "Phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "PreferredNotificationChannels": {
            "type": "array",
            "description": "User's preferred notification channels",
            "items": {
              "type": "string"
            }
          },
          "PushSubscriptions": {
            "type": "array",
            "description": "User's push subscriptions",
            "items": {
              "type": "string"
            }
          },
          "RememberToken": {
            "type": "string",
            "example": "abc123def456"
          },
          "Roles": {
            "type": "array",
            "description": "User's roles across tenants",
            "items": {
              "type": "string"
            }
          },
          "SlackWebhook": {
            "type": "string",
            "example": "https://hooks.slack.com/services/..."
          },
          "TelegramChatID": {
            "type": "string",
            "example": "123456789"
          },
          "Tenants": {
            "type": "array",
            "description": "User's associated tenants",
            "items": {
              "type": "string"
            }
          },
          "WebauthnCredentials": {
            "type": "array",
            "description": "User's WebAuthn credentials",
            "items": {
              "type": "string"
            }
          },
          "WebauthnEnabled": {
            "type": "boolean",
            "example": "false"
          },
          "WebauthnEnabledAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "WebhookURL": {
            "type": "string",
            "example": "https://example.com/webhook"
          }
        }
      },
      "UserDepartment": {
        "type": "object",
        "description": "UserDepartment model",
        "properties": {
          "Department": {
            "type": "string"
          },
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserKey": {
        "type": "object",
        "description": "UserKey model",
        "properties": {
          "EncryptedPrivateKey": {
            "type": "string",
            "example": "encrypted_private_key_data"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "KeyType": {
            "type": "string",
            "example": "identity"
          },
          "PublicKey": {
            "type": "string",
            "example": "-----BEGIN PUBLIC KEY-----"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Version": {
            "type": "integer",
            "example": "1"
          }
        }
      },
      "UserOrganization": {
        "type": "object",
        "description": "UserOrganization model",
        "properties": {
          "Department": {
            "type": "string",
            "nullable": true
          },
          "DepartmentID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "EmployeeID": {
            "type": "string",
            "example": "EMP001"
          },
          "ExpiresAt": {
            "type": "string",
            "example": "2025-01-15T10:30:00Z",
            "nullable": true
          },
          "HireDate": {
            "type": "string",
            "example": "2024-01-15T00:00:00Z",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Manager": {
            "type": "string",
            "nullable": true
          },
          "ManagerID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "Organization": {
            "type": "string"
          },
          "OrganizationID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Permissions": {
            "type": "string",
            "example": "[\"read:projects\",\"write:reports\"]"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "Salary": {
            "type": "string",
            "example": "encrypted_salary_data"
          },
          "Status": {
            "type": "string",
            "example": "active"
          },
          "Team": {
            "type": "string",
            "nullable": true
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "TerminationDate": {
            "type": "string",
            "example": "2024-12-31T00:00:00Z",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserProject": {
        "type": "object",
        "description": "UserProject model",
        "properties": {
          "Allocation": {
            "type": "number",
            "example": "100.0"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Project": {
            "type": "string"
          },
          "ProjectID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserRole": {
        "type": "object",
        "description": "UserRole model",
        "properties": {
          "Role": {
            "type": "string"
          },
          "RoleID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "Tenant": {
            "type": "string",
            "nullable": true
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK",
            "nullable": true
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserTeam": {
        "type": "object",
        "description": "UserTeam model",
        "properties": {
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Role": {
            "type": "string",
            "example": "member"
          },
          "Team": {
            "type": "string"
          },
          "TeamID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "UserTenant": {
        "type": "object",
        "description": "UserTenant model",
        "properties": {
          "IsActive": {
            "type": "boolean",
            "example": "true"
          },
          "JoinedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "Tenant": {
            "type": "string"
          },
          "TenantID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          },
          "User": {
            "type": "string"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "VerifyMfaRequest": {
        "type": "object",
        "description": "VerifyMfaRequest model",
        "properties": {
          "Code": {
            "type": "string",
            "example": "123456"
          }
        },
        "required": [
          "Code"
        ]
      },
      "WebauthnAuthenticateRequest": {
        "type": "object",
        "description": "WebauthnAuthenticateRequest model",
        "properties": {
          "AssertionResponse": {
            "type": "string",
            "example": "{\"id\":\"abc123\",\"response\":{\"authenticatorData\":\"...\",\"clientDataJSON\":\"...\",\"signature\":\"...\"}}"
          }
        },
        "required": [
          "AssertionResponse"
        ]
      },
      "WebauthnCredential": {
        "type": "object",
        "description": "WebauthnCredential model",
        "properties": {
          "AttestationType": {
            "type": "string",
            "example": "direct"
          },
          "BackedUp": {
            "type": "boolean",
            "example": "false"
          },
          "BackupEligible": {
            "type": "boolean",
            "example": "true"
          },
          "CredentialID": {
            "type": "string",
            "example": "abc123def456"
          },
          "Flags": {
            "type": "string",
            "example": "backup_eligible,backed_up"
          },
          "LastUsedAt": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "example": "My Security Key"
          },
          "PublicKey": {
            "type": "string",
            "example": "AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f4CBgoOEhYaHiImKi4yNjo+QkZKTlJWWl5iZmpucnZ6foKGio6SlpqeoqaqrrK2ur7CxsrO0tba3uLm6u7y9vr/AwcLDxMXGx8jJysvMzc7P0NHS09TV1tfY2drb3N3e3+Dh4uPk5ebn6Onq6+zt7u/w8fLz9PX29/j5+vv8/f7/"
          },
          "SignCount": {
            "type": "string",
            "example": "42"
          },
          "Transports": {
            "type": "string",
            "example": "[\"usb\",\"nfc\",\"ble\"]"
          },
          "User": {
            "type": "string",
            "description": "User this credential belongs to"
          },
          "UserID": {
            "type": "string",
            "example": "01HXYZ123456789ABCDEFGHIJK"
          }
        }
      },
      "WebauthnRegisterRequest": {
        "type": "object",
        "description": "WebauthnRegisterRequest model",
        "properties": {
          "AttestationResponse": {
            "type": "string",
            "example": "{\"id\":\"abc123\",\"response\":{\"attestationObject\":\"...\",\"clientDataJSON\":\"...\"}}"
          },
          "Name": {
            "type": "string",
            "example": "My Security Key"
          }
        },
        "required": [
          "Name",
          "AttestationResponse"
        ]
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "description": "JWT token for API authentication",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apiKey": {
        "type": "apiKey",
        "description": "API key for authentication",
        "name": "X-API-Key",
        "in": "header"
      },
      "basicAuth": {
        "type": "http",
        "description": "Basic HTTP authentication",
        "scheme": "basic"
      },
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 authentication",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth/authorize",
            "tokenUrl": "/oauth/token",
            "scopes": {}
          },
          "clientCredentials": {
            "tokenUrl": "/oauth/token",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": ""
    },
    {
      "name": "permissions",
      "description": ""
    },
    {
      "name": "projects",
      "description": ""
    },
    {
      "name": "roles",
      "description": ""
    },
    {
      "name": "milestones",
      "description": ""
    },
    {
      "name": "activity-logs",
      "description": ""
    },
    {
      "name": "chat",
      "description": ""
    },
    {
      "name": "cities",
      "description": ""
    },
    {
      "name": "countries",
      "description": ""
    },
    {
      "name": "notifications",
      "description": ""
    },
    {
      "name": "task-labels",
      "description": ""
    },
    {
      "name": "teams",
      "description": ""
    },
    {
      "name": "tenants",
      "description": ""
    },
    {
      "name": "departments",
      "description": ""
    },
    {
      "name": "OAuth2",
      "description": ""
    },
    {
      "name": "task-boards",
      "description": ""
    },
    {
      "name": "calendar-events",
      "description": ""
    },
    {
      "name": "districts",
      "description": ""
    },
    {
      "name": "organizations",
      "description": ""
    },
    {
      "name": "provinces",
      "description": ""
    },
    {
      "name": "tasks",
      "description": ""
    },
    {
      "name": "users",
      "description": ""
    },
    {
      "name": "ws",
      "description": ""
    },
    {
      "name": "websocket",
      "description": ""
    },
    {
      "name": "oauth",
      "description": ""
    }
  ]
}