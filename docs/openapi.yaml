openapi: 3.0.3
info:
    title: Goravel API
    description: Multi-tenant API with role-based access control and activity logging
    version: 1.0.0
    contact:
        name: Goravel Team
        email: support@goravel.com
        url: https://goravel.com
servers:
    - url: http://localhost:3000
      description: Development server
    - url: https://api.goravel.com
      description: Production server
paths:
    /api/docs:
        get:
            tags:
                - docs
            summary: getApiDocs
            description: API endpoint
            operationId: getApiDocs
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
    /api/docs/openapi.json:
        get:
            tags:
                - openapi.json
            summary: getApiDocsOpenapi.Json
            description: API endpoint
            operationId: getApiDocsOpenapi.Json
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
    /api/docs/openapi.yaml:
        get:
            tags:
                - openapi.yaml
            summary: getApiDocsOpenapi.Yaml
            description: API endpoint
            operationId: getApiDocsOpenapi.Yaml
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
    /api/openapi.html:
        get:
            tags:
                - openapi.html
            summary: getApiOpenapi.Html
            description: API endpoint
            operationId: getApiOpenapi.Html
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
    /api/v1/activity-logs:
        get:
            tags:
                - activity-logs
            summary: Get all activity logs
            description: Retrieve a list of all activity logs with cursor-based pagination
            operationId: getApiV1Activity-Logs
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - activity-logs
            summary: postApiV1Activity-Logs
            description: API endpoint
            operationId: postApiV1Activity-Logs
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/activity-logs/{id}:
        get:
            tags:
                - activity-logs
            summary: getApiV1Activity-LogsbyId
            description: API endpoint
            operationId: getApiV1Activity-LogsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/activity-logs/causer:
        get:
            tags:
                - activity-logs
            summary: Get activities for causer
            description: Retrieve activities caused by a specific user with cursor-based pagination
            operationId: getApiV1Activity-LogsCauser
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/activity-logs/date-range:
        get:
            tags:
                - activity-logs
            summary: Get activities in date range
            description: Retrieve activities within a date range with cursor-based pagination
            operationId: getApiV1Activity-LogsDate-Range
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/activity-logs/log-name:
        get:
            tags:
                - activity-logs
            summary: Get activities by log name
            description: Retrieve activities by log name with cursor-based pagination
            operationId: getApiV1Activity-LogsLog-Name
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/activity-logs/subject:
        get:
            tags:
                - activity-logs
            summary: Get activities for subject
            description: Retrieve activities for a specific subject with cursor-based pagination
            operationId: getApiV1Activity-LogsSubject
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/auth/change-password:
        post:
            tags:
                - Authentication
            summary: Change password
            description: Change user password
            operationId: postApiV1AuthChange-Password
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ChangePasswordRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/auth/forgot-password:
        post:
            tags:
                - Authentication
            summary: Request password reset
            description: Send password reset email to user
            operationId: postApiV1AuthForgot-Password
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ForgotPasswordRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/auth/login:
        post:
            tags:
                - Authentication
            summary: Authenticate user
            description: Authenticate user with email and password, optionally with MFA or WebAuthn
            operationId: postApiV1AuthLogin
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/auth/logout:
        post:
            tags:
                - Authentication
            summary: Logout user
            description: Logout user and invalidate session
            operationId: postApiV1AuthLogout
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/auth/mfa/disable:
        post:
            tags:
                - Authentication
            summary: Disable MFA
            description: Disable two-factor authentication for user
            operationId: postApiV1AuthMfaDisable
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DisableMfaRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/auth/mfa/enable:
        post:
            tags:
                - Authentication
            summary: Enable MFA
            description: Enable two-factor authentication for user
            operationId: postApiV1AuthMfaEnable
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EnableMfaRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/auth/mfa/setup:
        get:
            tags:
                - Authentication
            summary: Generate MFA setup
            description: Generate MFA secret and QR code for setup
            operationId: getApiV1AuthMfaSetup
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/auth/mfa/verify:
        post:
            tags:
                - Authentication
            summary: Verify MFA code
            description: Verify MFA code for authentication
            operationId: postApiV1AuthMfaVerify
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VerifyMfaRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/auth/profile:
        get:
            tags:
                - Authentication
            summary: Get user profile
            description: Get current authenticated user profile
            operationId: getApiV1AuthProfile
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/auth/refresh:
        post:
            tags:
                - Authentication
            summary: Refresh token
            description: Refresh JWT authentication token
            operationId: postApiV1AuthRefresh
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RefreshTokenRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/auth/register:
        post:
            tags:
                - Authentication
            summary: Register new user
            description: Register a new user account
            operationId: postApiV1AuthRegister
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RegisterRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/auth/reset-password:
        post:
            tags:
                - Authentication
            summary: Reset password
            description: Reset password using reset token
            operationId: postApiV1AuthReset-Password
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ResetPasswordRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/auth/webauthn/authenticate:
        post:
            tags:
                - Authentication
            summary: Authenticate with WebAuthn
            description: Authenticate user using WebAuthn assertion
            operationId: postApiV1AuthWebauthnAuthenticate
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WebauthnAuthenticateRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/auth/webauthn/begin-authentication:
        get:
            tags:
                - Authentication
            summary: Begin WebAuthn authentication
            description: Start the WebAuthn authentication process for user
            operationId: getApiV1AuthWebauthnBegin-Authentication
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/auth/webauthn/begin-registration:
        get:
            tags:
                - Authentication
            summary: Begin WebAuthn registration
            description: Start the WebAuthn registration process for user
            operationId: getApiV1AuthWebauthnBegin-Registration
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/auth/webauthn/credentials:
        get:
            tags:
                - Authentication
            summary: Get WebAuthn credentials
            description: Get all WebAuthn credentials for the authenticated user
            operationId: getApiV1AuthWebauthnCredentials
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/auth/webauthn/credentials/{id}:
        delete:
            tags:
                - Authentication
            summary: Delete WebAuthn credential
            description: Delete a specific WebAuthn credential for the authenticated user
            operationId: deleteApiV1AuthWebauthnCredentialsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/auth/webauthn/register:
        post:
            tags:
                - Authentication
            summary: Register WebAuthn credential
            description: Register a new WebAuthn authenticator for user
            operationId: postApiV1AuthWebauthnRegister
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WebauthnRegisterRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/calendar-events:
        get:
            tags:
                - calendar-events
            summary: Get all calendar events
            description: Retrieve a list of calendar events with cursor-based pagination and filtering
            operationId: getApiV1Calendar-Events
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - calendar-events
            summary: Create calendar event
            description: Create a new calendar event with optional participants and meeting details
            operationId: postApiV1Calendar-Events
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/calendar-events/{id}:
        get:
            tags:
                - calendar-events
            summary: Get calendar event by ID
            description: Retrieve a specific calendar event by its ID
            operationId: getApiV1Calendar-EventsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - calendar-events
            summary: Update calendar event
            description: Update an existing calendar event
            operationId: putApiV1Calendar-EventsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - calendar-events
            summary: Delete calendar event
            description: Delete a calendar event and all its participants
            operationId: deleteApiV1Calendar-EventsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/calendar-events/{id}/meeting/status:
        put:
            tags:
                - calendar-events
            summary: Update meeting status
            description: Update the status and details of a meeting
            operationId: putApiV1Calendar-EventsbyIdMeetingStatus
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/calendar-events/{id}/participants:
        get:
            tags:
                - calendar-events
            summary: Get event participants
            description: Retrieve all participants for a specific calendar event
            operationId: getApiV1Calendar-EventsbyIdParticipants
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - calendar-events
            summary: Add participant to event
            description: Add a new participant to a calendar event
            operationId: postApiV1Calendar-EventsbyIdParticipants
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/calendar-events/{id}/participants/{user_id}:
        delete:
            tags:
                - calendar-events
            summary: Remove participant from event
            description: Remove a participant from a calendar event
            operationId: deleteApiV1Calendar-EventsbyIdParticipantsbyUser_id
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: user_id
                  in: path
                  description: user_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/calendar-events/{id}/participants/{user_id}/response:
        put:
            tags:
                - calendar-events
            summary: Update participant response
            description: Update a participant's response status for an event
            operationId: putApiV1Calendar-EventsbyIdParticipantsbyUser_idResponse
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: user_id
                  in: path
                  description: user_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/calendar-events/{id}/reminders:
        get:
            tags:
                - calendar-events
            summary: Get event reminders
            description: Retrieve all reminders for a specific calendar event
            operationId: getApiV1Calendar-EventsbyIdReminders
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - calendar-events
            summary: Create event reminder
            description: Create a reminder for a calendar event
            operationId: postApiV1Calendar-EventsbyIdReminders
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/calendar-events/check-conflicts:
        post:
            tags:
                - calendar-events
            summary: Check scheduling conflicts
            description: Check for scheduling conflicts with existing events
            operationId: postApiV1Calendar-EventsCheck-Conflicts
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/calendar-events/export:
        post:
            tags:
                - calendar-events
            summary: Export calendar to iCal
            description: Export calendar events to iCal format
            operationId: postApiV1Calendar-EventsExport
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/calendar-events/my:
        get:
            tags:
                - calendar-events
            summary: Get my events
            description: Retrieve calendar events for the authenticated user
            operationId: getApiV1Calendar-EventsMy
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/chat/keys:
        get:
            tags:
                - chat
            summary: Get user keys
            description: Retrieve all encryption keys for the current user
            operationId: getApiV1ChatKeys
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - chat
            summary: Generate encryption keys
            description: Generate new encryption keys for the current user
            operationId: postApiV1ChatKeys
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/chat/notifications/global:
        get:
            tags:
                - chat
            summary: Get global notification settings
            description: Retrieve global notification settings for the current user
            operationId: getApiV1ChatNotificationsGlobal
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - chat
            summary: Update global notification settings
            description: Update global notification settings for the current user
            operationId: putApiV1ChatNotificationsGlobal
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/chat/rooms:
        get:
            tags:
                - chat
            summary: Get user's chat rooms
            description: Retrieve all chat rooms where the current user is a member
            operationId: getApiV1ChatRooms
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - chat
            summary: Create a new chat room
            description: Create a new chat room with specified members
            operationId: postApiV1ChatRooms
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}:
        get:
            tags:
                - chat
            summary: Get chat room by ID
            description: Retrieve a specific chat room by its ID
            operationId: getApiV1ChatRoomsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - chat
            summary: Update chat room
            description: Update a chat room's information (admin only)
            operationId: putApiV1ChatRoomsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - chat
            summary: Delete chat room
            description: Delete a chat room (admin only)
            operationId: deleteApiV1ChatRoomsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/members:
        get:
            tags:
                - chat
            summary: Get room members
            description: Retrieve all members of a chat room
            operationId: getApiV1ChatRoomsbyIdMembers
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - chat
            summary: Add member to room
            description: Add a new member to a chat room (admin only)
            operationId: postApiV1ChatRoomsbyIdMembers
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/members/{user_id}:
        delete:
            tags:
                - chat
            summary: Remove member from room
            description: Remove a member from a chat room (admin only)
            operationId: deleteApiV1ChatRoomsbyIdMembersbyUser_id
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: user_id
                  in: path
                  description: user_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/messages:
        get:
            tags:
                - chat
            summary: Get messages
            description: Retrieve messages from a chat room with pagination
            operationId: getApiV1ChatRoomsbyIdMessages
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - chat
            summary: Send message
            description: Send a message to a chat room
            operationId: postApiV1ChatRoomsbyIdMessages
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/messages/{message_id}:
        put:
            tags:
                - chat
            summary: Edit message
            description: Edit a message (only sender can edit within 15 minutes)
            operationId: putApiV1ChatRoomsbyIdMessagesbyMessage_id
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: message_id
                  in: path
                  description: message_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - chat
            summary: Delete message
            description: Delete a message (sender or admin only)
            operationId: deleteApiV1ChatRoomsbyIdMessagesbyMessage_id
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: message_id
                  in: path
                  description: message_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/messages/{message_id}/reactions:
        get:
            tags:
                - chat
            summary: Get message reactions
            description: Retrieve all reactions for a specific message
            operationId: getApiV1ChatRoomsbyIdMessagesbyMessage_idReactions
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: message_id
                  in: path
                  description: message_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - chat
            summary: Add message reaction
            description: Add an emoji reaction to a message
            operationId: postApiV1ChatRoomsbyIdMessagesbyMessage_idReactions
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: message_id
                  in: path
                  description: message_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - chat
            summary: Remove message reaction
            description: Remove an emoji reaction from a message
            operationId: deleteApiV1ChatRoomsbyIdMessagesbyMessage_idReactions
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: message_id
                  in: path
                  description: message_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/messages/{message_id}/reactions/summary:
        get:
            tags:
                - chat
            summary: Get reaction summary
            description: Get a summary of reactions grouped by emoji
            operationId: getApiV1ChatRoomsbyIdMessagesbyMessage_idReactionsSummary
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: message_id
                  in: path
                  description: message_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/messages/{message_id}/threads:
        post:
            tags:
                - chat
            summary: Create thread
            description: Create a new message thread from a root message
            operationId: postApiV1ChatRoomsbyIdMessagesbyMessage_idThreads
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: message_id
                  in: path
                  description: message_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/notifications:
        get:
            tags:
                - chat
            summary: Get notification settings
            description: Retrieve notification settings for the current user in a specific room
            operationId: getApiV1ChatRoomsbyIdNotifications
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - chat
            summary: Update notification settings
            description: Update notification settings for the current user in a specific room
            operationId: putApiV1ChatRoomsbyIdNotifications
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/read:
        post:
            tags:
                - chat
            summary: Mark room as read
            description: Mark all messages in a chat room as read by the current user
            operationId: postApiV1ChatRoomsbyIdRead
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/rotate-key:
        post:
            tags:
                - chat
            summary: Rotate room key
            description: Rotate the encryption key for a chat room (admin only)
            operationId: postApiV1ChatRoomsbyIdRotate-Key
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/chat/rooms/{id}/threads:
        get:
            tags:
                - chat
            summary: Get room threads
            description: Retrieve all threads in a chat room
            operationId: getApiV1ChatRoomsbyIdThreads
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/chat/threads/{thread_id}:
        get:
            tags:
                - chat
            summary: Get thread
            description: Retrieve a thread with all its messages
            operationId: getApiV1ChatThreadsbyThread_id
            parameters:
                - name: thread_id
                  in: path
                  description: thread_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/chat/threads/{thread_id}/resolve:
        post:
            tags:
                - chat
            summary: Resolve thread
            description: Mark a thread as resolved
            operationId: postApiV1ChatThreadsbyThread_idResolve
            parameters:
                - name: thread_id
                  in: path
                  description: thread_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/cities:
        get:
            tags:
                - cities
            summary: Get all cities
            description: Retrieve a list of all cities with optional filtering and cursor-based pagination
            operationId: getApiV1Cities
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - cities
            summary: Create a new city
            description: Create a new city with the provided information
            operationId: postApiV1Cities
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateCityRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/cities/{id}:
        get:
            tags:
                - cities
            summary: Get city by ID
            description: Retrieve a specific city by their ID
            operationId: getApiV1CitiesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - cities
            summary: Update a city
            description: Update an existing city with the provided information
            operationId: putApiV1CitiesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateCityRequest'
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - cities
            summary: Delete a city
            description: Remove a city from the system
            operationId: deleteApiV1CitiesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/cities/{id}/districts:
        get:
            tags:
                - cities
            summary: Get districts by city
            description: Retrieve all districts for a specific city
            operationId: getApiV1CitiesbyIdDistricts
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/countries:
        get:
            tags:
                - countries
            summary: Get all countries
            description: Retrieve a list of all countries with optional filtering and cursor-based pagination
            operationId: getApiV1Countries
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - countries
            summary: Create a new country
            description: Create a new country with the provided information
            operationId: postApiV1Countries
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateCountryRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/countries/{id}:
        get:
            tags:
                - countries
            summary: Get country by ID
            description: Retrieve a specific country by their ID
            operationId: getApiV1CountriesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - countries
            summary: Update a country
            description: Update an existing country with the provided information
            operationId: putApiV1CountriesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateCountryRequest'
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - countries
            summary: Delete a country
            description: Remove a country from the system
            operationId: deleteApiV1CountriesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/countries/{id}/provinces:
        get:
            tags:
                - countries
            summary: Get provinces by country
            description: Retrieve all provinces for a specific country
            operationId: getApiV1CountriesbyIdProvinces
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/countries/{id}/toggle-active:
        patch:
            tags:
                - countries
            summary: Toggle country active status
            description: Toggle the active status of a country
            operationId: patchApiV1CountriesbyIdToggle-Active
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses: {}
            security:
                - bearerAuth: []
    /api/v1/countries/bulk-delete:
        post:
            tags:
                - countries
            summary: Delete multiple countries
            description: Remove multiple countries from the system
            operationId: postApiV1CountriesBulk-Delete
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateCountryRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/districts:
        get:
            tags:
                - districts
            summary: Get all districts
            description: Retrieve a list of all districts with optional filtering and cursor-based pagination
            operationId: getApiV1Districts
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - districts
            summary: Create a new district
            description: Create a new district with the provided information
            operationId: postApiV1Districts
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateDistrictRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/districts/{id}:
        get:
            tags:
                - districts
            summary: Get district by ID
            description: Retrieve a specific district by their ID
            operationId: getApiV1DistrictsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - districts
            summary: Update a district
            description: Update an existing district with the provided information
            operationId: putApiV1DistrictsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateDistrictRequest'
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - districts
            summary: Delete a district
            description: Remove a district from the system
            operationId: deleteApiV1DistrictsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/oauth/authorize:
        post:
            tags:
                - OAuth2
            summary: OAuth2 authorization endpoint
            description: Handle OAuth2 authorization requests
            operationId: postApiV1OauthAuthorize
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/oauth/clients:
        get:
            tags:
                - OAuth2
            summary: Get OAuth2 clients
            description: Get all OAuth2 clients for the authenticated user
            operationId: getApiV1OauthClients
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - OAuth2
            summary: Create OAuth2 client
            description: Create a new OAuth2 client
            operationId: postApiV1OauthClients
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/oauth/clients/{id}:
        get:
            tags:
                - OAuth2
            summary: Get OAuth2 client
            description: Get a specific OAuth2 client by ID
            operationId: getApiV1OauthClientsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - OAuth2
            summary: Update OAuth2 client
            description: Update an OAuth2 client
            operationId: putApiV1OauthClientsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - OAuth2
            summary: Delete OAuth2 client
            description: Delete an OAuth2 client
            operationId: deleteApiV1OauthClientsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/oauth/device:
        post:
            tags:
                - OAuth2
            summary: OAuth2 device authorization endpoint
            description: Handle OAuth2 device authorization requests
            operationId: postApiV1OauthDevice
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/oauth/device/complete:
        post:
            tags:
                - OAuth2
            summary: Complete device authorization
            description: Complete device authorization by providing user credentials
            operationId: postApiV1OauthDeviceComplete
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/oauth/device/token:
        post:
            tags:
                - OAuth2
            summary: OAuth2 device token endpoint
            description: Handle OAuth2 device token requests
            operationId: postApiV1OauthDeviceToken
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/oauth/introspect:
        post:
            tags:
                - OAuth2
            summary: OAuth2 token introspection
            description: Introspect an OAuth2 token
            operationId: postApiV1OauthIntrospect
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/oauth/personal-access-tokens:
        get:
            tags:
                - OAuth2
            summary: Get personal access tokens
            description: Get all personal access tokens for the authenticated user
            operationId: getApiV1OauthPersonal-Access-Tokens
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - OAuth2
            summary: Create personal access token
            description: Create a personal access token for the authenticated user
            operationId: postApiV1OauthPersonal-Access-Tokens
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/oauth/personal-access-tokens/{id}:
        delete:
            tags:
                - OAuth2
            summary: Revoke personal access token
            description: Revoke a personal access token
            operationId: deleteApiV1OauthPersonal-Access-TokensbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/oauth/revoke:
        post:
            tags:
                - OAuth2
            summary: OAuth2 token revocation
            description: Revoke an OAuth2 token
            operationId: postApiV1OauthRevoke
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/oauth/test:
        get:
            tags:
                - oauth
            summary: getApiV1OauthTest
            description: API endpoint
            operationId: getApiV1OauthTest
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/oauth/token:
        post:
            tags:
                - OAuth2
            summary: OAuth2 token endpoint
            description: Handle OAuth2 token requests (password, client_credentials, authorization_code, refresh_token grants)
            operationId: postApiV1OauthToken
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/oauth/token/exchange:
        post:
            tags:
                - OAuth2
            summary: OAuth2 token exchange endpoint
            description: Handle OAuth2 token exchange requests
            operationId: postApiV1OauthTokenExchange
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
    /api/v1/permissions:
        get:
            tags:
                - permissions
            summary: Get all permissions
            description: Retrieve a list of all permissions with cursor-based pagination
            operationId: getApiV1Permissions
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - permissions
            summary: postApiV1Permissions
            description: API endpoint
            operationId: postApiV1Permissions
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/permissions/{id}:
        get:
            tags:
                - permissions
            summary: getApiV1PermissionsbyId
            description: API endpoint
            operationId: getApiV1PermissionsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - permissions
            summary: putApiV1PermissionsbyId
            description: API endpoint
            operationId: putApiV1PermissionsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - permissions
            summary: deleteApiV1PermissionsbyId
            description: API endpoint
            operationId: deleteApiV1PermissionsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/provinces:
        get:
            tags:
                - provinces
            summary: Get all provinces
            description: Retrieve a list of all provinces with optional filtering and cursor-based pagination
            operationId: getApiV1Provinces
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - provinces
            summary: Create a new province
            description: Create a new province with the provided information
            operationId: postApiV1Provinces
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateProvinceRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/provinces/{id}:
        get:
            tags:
                - provinces
            summary: Get province by ID
            description: Retrieve a specific province by their ID
            operationId: getApiV1ProvincesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - provinces
            summary: Update a province
            description: Update an existing province with the provided information
            operationId: putApiV1ProvincesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateProvinceRequest'
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - provinces
            summary: Delete a province
            description: Remove a province from the system
            operationId: deleteApiV1ProvincesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/provinces/{id}/cities:
        get:
            tags:
                - provinces
            summary: Get cities by province
            description: Retrieve all cities for a specific province
            operationId: getApiV1ProvincesbyIdCities
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
    /api/v1/roles:
        get:
            tags:
                - roles
            summary: Get all roles
            description: Retrieve a list of all roles with cursor-based pagination
            operationId: getApiV1Roles
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - roles
            summary: postApiV1Roles
            description: API endpoint
            operationId: postApiV1Roles
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/roles/{id}:
        get:
            tags:
                - roles
            summary: getApiV1RolesbyId
            description: API endpoint
            operationId: getApiV1RolesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - roles
            summary: putApiV1RolesbyId
            description: API endpoint
            operationId: putApiV1RolesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - roles
            summary: deleteApiV1RolesbyId
            description: API endpoint
            operationId: deleteApiV1RolesbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/roles/{id}/permissions:
        get:
            tags:
                - roles
            summary: getApiV1RolesbyIdPermissions
            description: API endpoint
            operationId: getApiV1RolesbyIdPermissions
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - roles
            summary: postApiV1RolesbyIdPermissions
            description: API endpoint
            operationId: postApiV1RolesbyIdPermissions
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/roles/{id}/permissions/{permission_id}:
        delete:
            tags:
                - roles
            summary: deleteApiV1RolesbyIdPermissionsbyPermission_id
            description: API endpoint
            operationId: deleteApiV1RolesbyIdPermissionsbyPermission_id
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: permission_id
                  in: path
                  description: permission_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/tenants:
        get:
            tags:
                - tenants
            summary: Get all tenants
            description: Retrieve a list of all tenants with cursor-based pagination
            operationId: getApiV1Tenants
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - tenants
            summary: postApiV1Tenants
            description: API endpoint
            operationId: postApiV1Tenants
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateTenantRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/tenants/{id}:
        get:
            tags:
                - tenants
            summary: getApiV1TenantsbyId
            description: API endpoint
            operationId: getApiV1TenantsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - tenants
            summary: putApiV1TenantsbyId
            description: API endpoint
            operationId: putApiV1TenantsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - tenants
            summary: deleteApiV1TenantsbyId
            description: API endpoint
            operationId: deleteApiV1TenantsbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/tenants/{id}/users:
        get:
            tags:
                - tenants
            summary: getApiV1TenantsbyIdUsers
            description: API endpoint
            operationId: getApiV1TenantsbyIdUsers
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - tenants
            summary: postApiV1TenantsbyIdUsers
            description: API endpoint
            operationId: postApiV1TenantsbyIdUsers
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateUserRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/tenants/{id}/users/{user_id}:
        delete:
            tags:
                - tenants
            summary: deleteApiV1TenantsbyIdUsersbyUser_id
            description: API endpoint
            operationId: deleteApiV1TenantsbyIdUsersbyUser_id
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: user_id
                  in: path
                  description: user_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/users:
        get:
            tags:
                - users
            summary: Get all users
            description: Retrieve a list of all users with cursor-based pagination
            operationId: getApiV1Users
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - users
            summary: Create a new user
            description: Create a new user with the provided information
            operationId: postApiV1Users
            parameters:
                - name: cursor
                  in: query
                  description: Cursor for pagination
                  required: false
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: Items per page
                  required: false
                  schema:
                    type: integer
                    default: 10
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateUserRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/users/{id}:
        get:
            tags:
                - users
            summary: Get user by ID
            description: Retrieve a specific user by their ID
            operationId: getApiV1UsersbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        put:
            tags:
                - users
            summary: Update a user
            description: Update an existing user's information
            operationId: putApiV1UsersbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateUserRequest'
            responses:
                "200":
                    description: Updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "404":
                    description: Not found
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
        delete:
            tags:
                - users
            summary: Delete a user
            description: Delete a user by their ID
            operationId: deleteApiV1UsersbyId
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/users/{id}/roles:
        get:
            tags:
                - users
            summary: Get user's roles
            description: Retrieve all roles associated with a user in a specific tenant
            operationId: getApiV1UsersbyIdRoles
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
        post:
            tags:
                - users
            summary: Assign role to user
            description: Assign a specific role to a user in a tenant
            operationId: postApiV1UsersbyIdRoles
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            requestBody:
                description: Request data
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateUserRequest'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "400":
                    description: Bad request
                "422":
                    description: Validation error
            security:
                - bearerAuth: []
    /api/v1/users/{id}/roles/{role_id}:
        delete:
            tags:
                - users
            summary: Revoke role from user
            description: Remove a specific role from a user in a tenant
            operationId: deleteApiV1UsersbyIdRolesbyRole_id
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
                - name: role_id
                  in: path
                  description: role_id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "204":
                    description: Deleted
                "404":
                    description: Not found
            security:
                - bearerAuth: []
    /api/v1/users/{id}/tenants:
        get:
            tags:
                - users
            summary: Get user's tenants
            description: Retrieve all tenants associated with a user
            operationId: getApiV1UsersbyIdTenants
            parameters:
                - name: id
                  in: path
                  description: id identifier
                  required: true
                  schema:
                    type: string
                    format: ulid
            responses:
                "200":
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIResponse'
                "401":
                    description: Unauthorized
                "403":
                    description: Forbidden
            security:
                - bearerAuth: []
components:
    schemas:
        APIResponse:
            type: object
            description: APIResponse model
            properties:
                Data:
                    type: string
                Error:
                    type: string
                Message:
                    type: string
                    example: Operation completed successfully
                Status:
                    type: string
                    example: success
                Timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        ActivityLog:
            type: object
            description: ActivityLog model
            properties:
                CauserID:
                    type: string
                CauserType:
                    type: string
                Description:
                    type: string
                LogName:
                    type: string
                Properties:
                    type: string
                SubjectID:
                    type: string
                SubjectType:
                    type: string
                Tenant:
                    type: string
                    nullable: true
                TenantID:
                    type: string
        ActivityLogger:
            type: object
            description: ActivityLogger model
        AddMemberRequest:
            type: object
            description: AddMemberRequest model
            properties:
                Role:
                    type: string
                UserID:
                    type: string
        AddParticipantRequest:
            type: object
            description: AddParticipantRequest model
            properties:
                IsRequired:
                    type: boolean
                    example: "true"
                Role:
                    type: string
                    example: attendee
                SendReminder:
                    type: boolean
                    example: "true"
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
            required:
                - UserID
        AddReactionRequest:
            type: object
            description: AddReactionRequest model
            properties:
                Emoji:
                    type: string
                    example: "\U0001F44D"
        AssignPermissionRequest:
            type: object
            description: AssignPermissionRequest model
            properties:
                PermissionIDs:
                    type: array
                    example: '["01HXYZ123456789ABCDEFGHIJK", "01HXYZ123456789ABCDEFGHIJL"]'
                    items:
                        type: string
            required:
                - PermissionIDs
        AssignRoleRequest:
            type: object
            description: AssignRoleRequest model
            properties:
                RoleID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                TenantID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
            required:
                - RoleID
                - TenantID
        BaseModel:
            type: object
            description: BaseModel model
            properties:
                CreatedAt:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                DeletedAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                ID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                UpdatedAt:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        CalendarEvent:
            type: object
            description: CalendarEvent model
            properties:
                Color:
                    type: string
                    example: '#3B82F6'
                CreatedBy:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Creator:
                    type: string
                    description: Event creator
                    nullable: true
                Description:
                    type: string
                    example: Weekly team sync to discuss project progress
                EndTime:
                    type: string
                    format: date-time
                    example: "2024-01-15T11:00:00Z"
                IsAllDay:
                    type: boolean
                    example: "false"
                IsRecurring:
                    type: boolean
                    example: "false"
                Location:
                    type: string
                    example: Conference Room A
                Meeting:
                    type: string
                    description: Associated meeting details
                    nullable: true
                ParentEvent:
                    type: string
                    description: Parent event for recurring instances
                    nullable: true
                ParentEventID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                    nullable: true
                Participants:
                    type: array
                    description: Event participants
                    items:
                        type: string
                RecurrenceRule:
                    type: string
                    example: FREQ=WEEKLY;INTERVAL=1;BYDAY=MO
                RecurrenceUntil:
                    type: string
                    example: "2024-12-31T23:59:59Z"
                    nullable: true
                RecurringInstances:
                    type: array
                    description: Recurring event instances
                    items:
                        type: string
                ReminderSettings:
                    type: string
                    example: '{"email": 15, "push": 30, "sms": 60}'
                RemindersSent:
                    type: boolean
                    example: "false"
                RemindersSentAt:
                    type: string
                    example: "2024-01-15T09:00:00Z"
                    nullable: true
                StartTime:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:00:00Z"
                Status:
                    type: string
                    example: scheduled
                Tenant:
                    type: string
                    description: Event's associated tenant
                    nullable: true
                TenantID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Timezone:
                    type: string
                    example: UTC
                Title:
                    type: string
                    example: Team Meeting
                Type:
                    type: string
                    example: meeting
        ChangePasswordRequest:
            type: object
            description: ChangePasswordRequest model
            properties:
                CurrentPassword:
                    type: string
                    example: oldpassword123
                NewPassword:
                    type: string
                    example: newpassword123
                NewPasswordConfirmation:
                    type: string
                    example: newpassword123
            required:
                - CurrentPassword
                - NewPassword
                - NewPasswordConfirmation
        ChatInvitation:
            type: object
            description: ChatInvitation model
            properties:
                ChatRoom:
                    type: string
                    nullable: true
                ChatRoomID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                ExpiresAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                InvitedUser:
                    type: string
                    nullable: true
                InvitedUserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Inviter:
                    type: string
                    nullable: true
                InviterID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Message:
                    type: string
                    example: Join our team discussion!
                RespondedAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                Status:
                    type: string
                    example: pending
        ChatMessage:
            type: object
            description: ChatMessage model
            properties:
                ChatRoom:
                    type: string
                    nullable: true
                ChatRoomID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                EditedAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                EncryptedContent:
                    type: string
                    example: encrypted_message_data
                EncryptionVersion:
                    type: integer
                    example: "1"
                IsEdited:
                    type: boolean
                    example: "false"
                Metadata:
                    type: string
                    example: '{"file_size": 1024, "file_name": "document.pdf"}'
                OriginalContent:
                    type: string
                    example: original_encrypted_content
                ReadBy:
                    type: array
                    items:
                        type: string
                ReplyTo:
                    type: string
                    nullable: true
                ReplyToID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                    nullable: true
                Sender:
                    type: string
                    nullable: true
                SenderID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Status:
                    type: string
                    example: sent
                Thread:
                    type: string
                    nullable: true
                ThreadID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                    nullable: true
                Type:
                    type: string
                    example: text
        ChatNotificationSettings:
            type: object
            description: ChatNotificationSettings model
            properties:
                ChatRoom:
                    type: string
                    nullable: true
                ChatRoomID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                    nullable: true
                CustomSettings:
                    type: string
                    example: '{"sound": "default", "vibration": true}'
                DesktopNotifications:
                    type: boolean
                    example: "true"
                EmailNotifications:
                    type: boolean
                    example: "true"
                IsMuted:
                    type: boolean
                    example: "false"
                MentionNotifications:
                    type: boolean
                    example: "true"
                MuteUntil:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                PushNotifications:
                    type: boolean
                    example: "true"
                ReactionNotifications:
                    type: boolean
                    example: "true"
                ThreadNotifications:
                    type: boolean
                    example: "true"
                User:
                    type: string
                    nullable: true
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        ChatRoom:
            type: object
            description: ChatRoom model
            properties:
                Avatar:
                    type: string
                    example: https://example.com/avatar.jpg
                CreatedBy:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Creator:
                    type: string
                    nullable: true
                Description:
                    type: string
                    example: Main discussion channel for the team
                IsActive:
                    type: boolean
                    example: "true"
                Keys:
                    type: array
                    items:
                        type: string
                LastActivityAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                Members:
                    type: array
                    items:
                        type: string
                Messages:
                    type: array
                    items:
                        type: string
                Name:
                    type: string
                    example: General Discussion
                Tenant:
                    type: string
                    nullable: true
                TenantID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Type:
                    type: string
                    example: group
        ChatRoomKey:
            type: object
            description: ChatRoomKey model
            properties:
                ChatRoom:
                    type: string
                    nullable: true
                ChatRoomID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                EncryptedKey:
                    type: string
                    example: encrypted_key_data
                IsActive:
                    type: boolean
                    example: "true"
                KeyType:
                    type: string
                    example: room_key
                RotatedAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                Version:
                    type: integer
                    example: "1"
        ChatRoomMember:
            type: object
            description: ChatRoomMember model
            properties:
                ChatRoom:
                    type: string
                    nullable: true
                ChatRoomID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                IsActive:
                    type: boolean
                    example: "true"
                JoinedAt:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                LastReadAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                PublicKey:
                    type: string
                    example: '-----BEGIN PUBLIC KEY-----'
                Role:
                    type: string
                    example: member
                User:
                    type: string
                    nullable: true
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        CheckConflictsRequest:
            type: object
            description: CheckConflictsRequest model
            properties:
                EndTime:
                    type: string
                    format: date-time
                    example: "2024-01-15T11:00:00Z"
                ExcludeEventID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                StartTime:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:00:00Z"
                UserIDs:
                    type: array
                    example: '["01HXYZ123456789ABCDEFGHIJK", "01HXYZ123456789ABCDEFGHIJL"]'
                    items:
                        type: string
            required:
                - StartTime
                - EndTime
                - UserIDs
        City:
            type: object
            description: City model
            properties:
                Code:
                    type: string
                    example: LA
                Districts:
                    type: array
                    description: City's districts
                    items:
                        type: string
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: Los Angeles
                Province:
                    type: string
                    description: City's province
                ProvinceID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        Country:
            type: object
            description: Country model
            properties:
                Code:
                    type: string
                    example: US
                Code3:
                    type: string
                    example: USA
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: United States
                NumericCode:
                    type: string
                    example: "840"
                Provinces:
                    type: array
                    description: Country's provinces/states
                    items:
                        type: string
        CreateActivityLogRequest:
            type: object
            description: CreateActivityLogRequest model
            properties:
                CauserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                CauserType:
                    type: string
                    example: '*models.User'
                Description:
                    type: string
                    example: User created successfully
                LogName:
                    type: string
                    example: user_management
                Properties:
                    type: string
                    example: '{"ip_address": "192.168.1.1", "user_agent": "Mozilla/5.0..."}'
                SubjectID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                SubjectType:
                    type: string
                    example: '*models.User'
            required:
                - Description
        CreateCalendarEventRequest:
            type: object
            description: CreateCalendarEventRequest model
            properties:
                Color:
                    type: string
                    example: '#3B82F6'
                Description:
                    type: string
                    example: Weekly team sync to discuss project progress
                EndTime:
                    type: string
                    format: date-time
                    example: "2024-01-15T11:00:00Z"
                IsAllDay:
                    type: boolean
                    example: "false"
                IsRecurring:
                    type: boolean
                    example: "false"
                Location:
                    type: string
                    example: Conference Room A
                Meeting:
                    type: string
                    nullable: true
                ParticipantIDs:
                    type: array
                    example: '["01HXYZ123456789ABCDEFGHIJK", "01HXYZ123456789ABCDEFGHIJL"]'
                    items:
                        type: string
                RecurrenceRule:
                    type: string
                    example: FREQ=WEEKLY;INTERVAL=1;BYDAY=MO
                RecurrenceUntil:
                    type: string
                    example: "2024-12-31T23:59:59Z"
                    nullable: true
                ReminderSettings:
                    type: string
                    example: '{"email": 15, "push": 30, "sms": 60}'
                StartTime:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:00:00Z"
                Status:
                    type: string
                    example: scheduled
                TenantID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Timezone:
                    type: string
                    example: UTC
                Title:
                    type: string
                    example: Team Meeting
                Type:
                    type: string
                    example: meeting
            required:
                - Title
                - StartTime
                - EndTime
                - TenantID
        CreateChatRoomRequest:
            type: object
            description: CreateChatRoomRequest model
            properties:
                Avatar:
                    type: string
                Description:
                    type: string
                MemberIDs:
                    type: array
                    items:
                        type: string
                Name:
                    type: string
                Type:
                    type: string
        CreateCityRequest:
            type: object
            description: CreateCityRequest model
            properties:
                Code:
                    type: string
                    example: LA
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: Los Angeles
                ProvinceID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
            required:
                - Name
                - ProvinceID
        CreateCountryRequest:
            type: object
            description: CreateCountryRequest model
            properties:
                Code:
                    type: string
                    example: US
                Code3:
                    type: string
                    example: USA
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: United States
                NumericCode:
                    type: string
                    example: "840"
            required:
                - Name
                - Code
        CreateDistrictRequest:
            type: object
            description: CreateDistrictRequest model
            properties:
                CityID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Code:
                    type: string
                    example: DT
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: Downtown
            required:
                - Name
                - CityID
        CreateInvitationRequest:
            type: object
            description: CreateInvitationRequest model
            properties:
                ExpiresAt:
                    type: string
                InvitedUserID:
                    type: string
                Message:
                    type: string
        CreateMeetingRequest:
            type: object
            description: CreateMeetingRequest model
            properties:
                AllowJoinBeforeHost:
                    type: boolean
                    example: "true"
                AttendanceCount:
                    type: integer
                    example: "5"
                MeetingID:
                    type: string
                    example: "123456789"
                MeetingMinutes:
                    type: string
                    example: 'Key decisions: 1. Project timeline approved 2. Budget increased by 10%'
                MeetingNotes:
                    type: string
                    example: 'Agenda: 1. Project updates 2. Q&A'
                MeetingType:
                    type: string
                    example: video
                MeetingURL:
                    type: string
                    example: https://zoom.us/j/123456789
                MuteParticipantsOnEntry:
                    type: boolean
                    example: "false"
                Passcode:
                    type: string
                    example: "123456"
                Platform:
                    type: string
                    example: zoom
                RecordMeeting:
                    type: boolean
                    example: "false"
                Status:
                    type: string
                    example: scheduled
                WaitingRoom:
                    type: string
                    example: enabled
        CreatePermissionRequest:
            type: object
            description: CreatePermissionRequest model
            properties:
                Description:
                    type: string
                    example: Create new users
                Guard:
                    type: string
                    example: api
                Name:
                    type: string
                    example: users.create
            required:
                - Name
        CreateProvinceRequest:
            type: object
            description: CreateProvinceRequest model
            properties:
                Code:
                    type: string
                    example: CA
                CountryID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: California
            required:
                - Name
                - Code
                - CountryID
        CreateReminderRequest:
            type: object
            description: CreateReminderRequest model
            properties:
                MinutesBefore:
                    type: integer
                    example: "15"
                Type:
                    type: string
                    example: email
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
            required:
                - UserID
                - Type
                - MinutesBefore
        CreateRoleRequest:
            type: object
            description: CreateRoleRequest model
            properties:
                Description:
                    type: string
                    example: Administrator role with full access
                Guard:
                    type: string
                    example: api
                Name:
                    type: string
                    example: admin
            required:
                - Name
        CreateTenantRequest:
            type: object
            description: CreateTenantRequest model
            properties:
                Description:
                    type: string
                    example: A leading technology company
                Domain:
                    type: string
                    example: acme.example.com
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: Acme Corporation
                Settings:
                    type: string
                    example: '{"theme": "dark", "timezone": "UTC"}'
                Slug:
                    type: string
                    example: acme-corp
            required:
                - Name
                - Slug
        CreateThreadRequest:
            type: object
            description: CreateThreadRequest model
            properties:
                Title:
                    type: string
        CreateUserRequest:
            type: object
            description: CreateUserRequest model
            properties:
                Email:
                    type: string
                    example: john.doe@example.com
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: John Doe
                Password:
                    type: string
                    example: password123
            required:
                - Name
                - Email
                - Password
        DisableMfaRequest:
            type: object
            description: DisableMfaRequest model
            properties:
                Code:
                    type: string
                    example: "123456"
                Password:
                    type: string
                    example: password123
            required:
                - Password
                - Code
        District:
            type: object
            description: District model
            properties:
                City:
                    type: string
                    description: District's city
                CityID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Code:
                    type: string
                    example: DT
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: Downtown
        EditMessageRequest:
            type: object
            description: EditMessageRequest model
            properties:
                Content:
                    type: string
        EnableMfaRequest:
            type: object
            description: EnableMfaRequest model
            properties:
                Code:
                    type: string
                    example: "123456"
                QrCode:
                    type: string
                    example: otpauth://totp/Example:alice@google.com?secret=JBSWY3DPEHPK3PXP&issuer=Example
                Secret:
                    type: string
                    example: ABCDEFGHIJKLMNOP
            required:
                - Code
        ErrorResponse:
            type: object
            description: ErrorResponse model
            properties:
                Code:
                    type: string
                    example: VALIDATION_ERROR
                Details:
                    type: string
                Message:
                    type: string
                    example: Something went wrong
                Status:
                    type: string
                    example: error
                Timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        EventFilterRequest:
            type: object
            description: EventFilterRequest model
            properties:
                CreatorID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                EndDate:
                    type: string
                    example: "2024-12-31T23:59:59Z"
                    nullable: true
                IncludeRecurring:
                    type: boolean
                    example: "true"
                ParticipantID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                StartDate:
                    type: string
                    example: "2024-01-01T00:00:00Z"
                    nullable: true
                Status:
                    type: string
                    example: scheduled
                Type:
                    type: string
                    example: meeting
        EventParticipant:
            type: object
            description: EventParticipant model
            properties:
                Event:
                    type: string
                    description: Associated event
                    nullable: true
                EventID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                IsRequired:
                    type: boolean
                    example: "true"
                ReminderSentAt:
                    type: string
                    example: "2024-01-15T09:00:00Z"
                    nullable: true
                RespondedAt:
                    type: string
                    example: "2024-01-15T09:30:00Z"
                    nullable: true
                ResponseComment:
                    type: string
                    example: I'll be 5 minutes late
                ResponseStatus:
                    type: string
                    example: pending
                Role:
                    type: string
                    example: attendee
                SendReminder:
                    type: boolean
                    example: "true"
                User:
                    type: string
                    description: Participant user
                    nullable: true
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        EventReminder:
            type: object
            description: EventReminder model
            properties:
                ErrorMessage:
                    type: string
                    example: Failed to send email
                Event:
                    type: string
                    description: Associated calendar event
                    nullable: true
                EventID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                MinutesBefore:
                    type: integer
                    example: "15"
                ScheduledAt:
                    type: string
                    format: date-time
                    example: "2024-01-15T09:45:00Z"
                Sent:
                    type: boolean
                    example: "false"
                SentAt:
                    type: string
                    example: "2024-01-15T09:45:00Z"
                    nullable: true
                Status:
                    type: string
                    example: pending
                Type:
                    type: string
                    example: email
                User:
                    type: string
                    description: User to receive reminder
                    nullable: true
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        ExportCalendarRequest:
            type: object
            description: ExportCalendarRequest model
            properties:
                EndDate:
                    type: string
                    format: date-time
                    example: "2024-12-31T23:59:59Z"
                EventTypes:
                    type: array
                    example: '["meeting", "appointment"]'
                    items:
                        type: string
                IncludeRecurring:
                    type: boolean
                    example: "true"
                StartDate:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00Z"
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
            required:
                - StartDate
                - EndDate
                - UserID
        ForgotPasswordRequest:
            type: object
            description: ForgotPasswordRequest model
            properties:
                Email:
                    type: string
                    example: john.doe@example.com
            required:
                - Email
        GenerateKeyPairRequest:
            type: object
            description: GenerateKeyPairRequest model
            properties:
                ExpiresAt:
                    type: string
                KeyType:
                    type: string
        LoginRequest:
            type: object
            description: LoginRequest model
            properties:
                Email:
                    type: string
                    example: john.doe@example.com
                MfaCode:
                    type: string
                    example: "123456"
                Password:
                    type: string
                    example: password123
                Remember:
                    type: boolean
                    example: "false"
                WebauthnAssertion:
                    type: string
                    example: '{"id":"abc123","response":{"authenticatorData":"...","clientDataJSON":"...","signature":"..."}}'
            required:
                - Email
                - Password
        Meeting:
            type: object
            description: Meeting model
            properties:
                AllowJoinBeforeHost:
                    type: boolean
                    example: "true"
                AttendanceCount:
                    type: integer
                    example: "5"
                ConflictDetails:
                    type: string
                    example: '["01HXYZ123456789ABCDEFGHIJK", "01HXYZ123456789ABCDEFGHIJL"]'
                EndedAt:
                    type: string
                    example: "2024-01-15T11:00:00Z"
                    nullable: true
                Event:
                    type: string
                    description: Associated calendar event
                    nullable: true
                EventID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                HasConflicts:
                    type: boolean
                    example: "false"
                MeetingID:
                    type: string
                    example: "123456789"
                MeetingMinutes:
                    type: string
                    example: 'Key decisions: 1. Project timeline approved 2. Budget increased by 10%'
                MeetingNotes:
                    type: string
                    example: 'Agenda: 1. Project updates 2. Q&A'
                MeetingType:
                    type: string
                    example: video
                MeetingURL:
                    type: string
                    example: https://zoom.us/j/123456789
                MuteParticipantsOnEntry:
                    type: boolean
                    example: "false"
                Passcode:
                    type: string
                    example: "123456"
                Platform:
                    type: string
                    example: zoom
                RecordMeeting:
                    type: boolean
                    example: "false"
                RecordingURL:
                    type: string
                    example: https://zoom.us/recording/123456789
                StartedAt:
                    type: string
                    example: "2024-01-15T10:00:00Z"
                    nullable: true
                Status:
                    type: string
                    example: scheduled
                WaitingRoom:
                    type: string
                    example: enabled
        MessageReaction:
            type: object
            description: MessageReaction model
            properties:
                Emoji:
                    type: string
                    example: "\U0001F44D"
                Message:
                    type: string
                    nullable: true
                MessageID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                ReactedAt:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                User:
                    type: string
                    nullable: true
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        MessageRead:
            type: object
            description: MessageRead model
            properties:
                Message:
                    type: string
                    nullable: true
                MessageID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                ReadAt:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                User:
                    type: string
                    nullable: true
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        MessageThread:
            type: object
            description: MessageThread model
            properties:
                ChatRoom:
                    type: string
                    nullable: true
                ChatRoomID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                IsResolved:
                    type: boolean
                    example: "false"
                LastActivityAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                MessageCount:
                    type: integer
                    example: "5"
                Messages:
                    type: array
                    items:
                        type: string
                ResolvedAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                ResolvedBy:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                    nullable: true
                ResolvedByUser:
                    type: string
                    nullable: true
                RootMessage:
                    type: string
                    nullable: true
                RootMessageID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Title:
                    type: string
                    example: Bug Discussion
        Notification:
            type: object
            description: Notification model
            properties:
                Channel:
                    type: string
                CreatedAt:
                    type: string
                    format: date-time
                Data:
                    type: string
                DeletedAt:
                    type: string
                    nullable: true
                FailedAt:
                    type: string
                    nullable: true
                FailureReason:
                    type: string
                    nullable: true
                ID:
                    type: string
                Notifiable:
                    type: string
                NotifiableID:
                    type: string
                NotifiableType:
                    type: string
                ReadAt:
                    type: string
                    nullable: true
                SentAt:
                    type: string
                    nullable: true
                Type:
                    type: string
                UpdatedAt:
                    type: string
                    format: date-time
        OAuthAccessToken:
            type: object
            description: OAuthAccessToken model
            properties:
                Client:
                    type: string
                    nullable: true
                ClientID:
                    type: string
                CreatedAt:
                    type: string
                    format: date-time
                ID:
                    type: string
                Name:
                    type: string
                    nullable: true
                RefreshToken:
                    type: string
                    nullable: true
                Revoked:
                    type: boolean
                Scopes:
                    type: string
                    nullable: true
                UpdatedAt:
                    type: string
                    format: date-time
                User:
                    type: string
                    nullable: true
                UserID:
                    type: string
                    nullable: true
        OAuthAuthCode:
            type: object
            description: OAuthAuthCode model
            properties:
                Client:
                    type: string
                    nullable: true
                ClientID:
                    type: string
                CodeChallenge:
                    type: string
                    nullable: true
                CodeChallengeMethod:
                    type: string
                    nullable: true
                CreatedAt:
                    type: string
                    format: date-time
                ExpiresAt:
                    type: string
                    format: date-time
                ID:
                    type: string
                Revoked:
                    type: boolean
                Scopes:
                    type: string
                    nullable: true
                UpdatedAt:
                    type: string
                    format: date-time
                User:
                    type: string
                    nullable: true
                UserID:
                    type: string
        OAuthAuthorizationRequest:
            type: object
            description: OAuthAuthorizationRequest model
            properties:
                ClientID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                CodeChallenge:
                    type: string
                    example: abc123def456
                CodeChallengeMethod:
                    type: string
                    example: S256
                RedirectURI:
                    type: string
                    example: https://example.com/callback
                ResponseType:
                    type: string
                    example: code
                Scope:
                    type: string
                    example: read write
                State:
                    type: string
                    example: abc123def456
            required:
                - ResponseType
                - ClientID
                - RedirectURI
        OAuthClient:
            type: object
            description: OAuthClient model
            properties:
                AccessTokens:
                    type: array
                    items:
                        type: string
                AuthCodes:
                    type: array
                    items:
                        type: string
                CreatedAt:
                    type: string
                    format: date-time
                ID:
                    type: string
                Name:
                    type: string
                PasswordClient:
                    type: boolean
                PersonalAccessClient:
                    type: boolean
                Provider:
                    type: string
                    nullable: true
                Redirect:
                    type: string
                Revoked:
                    type: boolean
                Secret:
                    type: string
                    nullable: true
                UpdatedAt:
                    type: string
                    format: date-time
                User:
                    type: string
                    nullable: true
                UserID:
                    type: string
                    nullable: true
        OAuthClientRequest:
            type: object
            description: OAuthClientRequest model
            properties:
                Name:
                    type: string
                    example: My OAuth Client
                PasswordClient:
                    type: boolean
                    example: "false"
                PersonalAccessClient:
                    type: boolean
                    example: "false"
                RedirectURIs:
                    type: array
                    example: '["https://example.com/callback", "https://app.example.com/callback"]'
                    items:
                        type: string
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                    nullable: true
            required:
                - Name
        OAuthClientUpdateRequest:
            type: object
            description: OAuthClientUpdateRequest model
            properties:
                Name:
                    type: string
                    example: Updated Client Name
                RedirectURIs:
                    type: array
                    example: '["https://example.com/callback", "https://app.example.com/callback"]'
                    items:
                        type: string
            required:
                - Name
        OAuthCompleteDeviceAuthorizationRequest:
            type: object
            description: OAuthCompleteDeviceAuthorizationRequest model
            properties:
                Email:
                    type: string
                    example: user@example.com
                Password:
                    type: string
                    example: password123
                UserCode:
                    type: string
                    example: ABCD
            required:
                - UserCode
                - Email
                - Password
        OAuthDeviceAuthorizationRequest:
            type: object
            description: OAuthDeviceAuthorizationRequest model
            properties:
                ClientID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Scope:
                    type: string
                    example: read write
            required:
                - ClientID
        OAuthDeviceCode:
            type: object
            description: OAuthDeviceCode model
            properties:
                Authorized:
                    type: boolean
                Client:
                    type: string
                    nullable: true
                ClientID:
                    type: string
                CreatedAt:
                    type: string
                    format: date-time
                ExpiresAt:
                    type: string
                    format: date-time
                ID:
                    type: string
                Revoked:
                    type: boolean
                Scopes:
                    type: string
                    nullable: true
                UpdatedAt:
                    type: string
                    format: date-time
                User:
                    type: string
                    nullable: true
                UserCode:
                    type: string
                UserID:
                    type: string
                    nullable: true
        OAuthDeviceTokenRequest:
            type: object
            description: OAuthDeviceTokenRequest model
            properties:
                ClientID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                DeviceCode:
                    type: string
                    example: abc123def456
                GrantType:
                    type: string
                    example: urn:ietf:params:oauth:grant-type:device_code
            required:
                - GrantType
                - DeviceCode
                - ClientID
        OAuthPersonalAccessClient:
            type: object
            description: OAuthPersonalAccessClient model
            properties:
                Client:
                    type: string
                    nullable: true
                ClientID:
                    type: string
                CreatedAt:
                    type: string
                    format: date-time
                ID:
                    type: string
                UpdatedAt:
                    type: string
                    format: date-time
        OAuthPersonalAccessTokenRequest:
            type: object
            description: OAuthPersonalAccessTokenRequest model
            properties:
                ExpiresAt:
                    type: string
                    example: "2024-12-31T23:59:59Z"
                    nullable: true
                Name:
                    type: string
                    example: My Personal Token
                Scope:
                    type: string
                    example: read write
            required:
                - Name
        OAuthRedirectURIRequest:
            type: object
            description: OAuthRedirectURIRequest model
            properties:
                ClientID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                RedirectURI:
                    type: string
                    example: https://example.com/callback
            required:
                - RedirectURI
                - ClientID
        OAuthRefreshToken:
            type: object
            description: OAuthRefreshToken model
            properties:
                AccessToken:
                    type: string
                    nullable: true
                AccessTokenID:
                    type: string
                ExpiresAt:
                    type: string
                    format: date-time
                ID:
                    type: string
                Revoked:
                    type: boolean
        OAuthScopeRequest:
            type: object
            description: OAuthScopeRequest model
            properties:
                Scope:
                    type: string
                    example: read write delete
            required:
                - Scope
        OAuthTokenExchangeRequest:
            type: object
            description: OAuthTokenExchangeRequest model
            properties:
                ClientID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                ClientSecret:
                    type: string
                    example: abc123def456
                GrantType:
                    type: string
                    example: urn:ietf:params:oauth:grant-type:token-exchange
                RequestedTokenType:
                    type: string
                    example: access_token
                Scope:
                    type: string
                    example: read write
                SubjectToken:
                    type: string
                    example: abc123def456
                SubjectTokenType:
                    type: string
                    example: access_token
            required:
                - GrantType
                - SubjectToken
                - SubjectTokenType
                - RequestedTokenType
                - ClientID
        OAuthTokenIntrospectionRequest:
            type: object
            description: OAuthTokenIntrospectionRequest model
            properties:
                Token:
                    type: string
                    example: abc123def456
                TokenTypeHint:
                    type: string
                    example: access_token
            required:
                - Token
        OAuthTokenRequest:
            type: object
            description: OAuthTokenRequest model
            properties:
                ClientID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                ClientSecret:
                    type: string
                    example: abc123def456
                Code:
                    type: string
                    example: abc123def456
                CodeVerifier:
                    type: string
                    example: abc123def456
                DeviceCode:
                    type: string
                    example: abc123def456
                GrantType:
                    type: string
                    example: password
                Password:
                    type: string
                    example: password123
                RedirectURI:
                    type: string
                    example: https://example.com/callback
                RefreshToken:
                    type: string
                    example: abc123def456
                RequestedTokenType:
                    type: string
                    example: access_token
                Scope:
                    type: string
                    example: read write
                State:
                    type: string
                    example: abc123def456
                SubjectToken:
                    type: string
                    example: abc123def456
                SubjectTokenType:
                    type: string
                    example: access_token
                Username:
                    type: string
                    example: user@example.com
            required:
                - GrantType
                - ClientID
        OAuthTokenRevocationRequest:
            type: object
            description: OAuthTokenRevocationRequest model
            properties:
                ClientID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                ClientSecret:
                    type: string
                    example: abc123def456
                Token:
                    type: string
                    example: abc123def456
                TokenTypeHint:
                    type: string
                    example: access_token
            required:
                - Token
        PaginatedResponse:
            type: object
            description: PaginatedResponse model
            properties:
                Data:
                    type: string
                Message:
                    type: string
                    example: Data retrieved successfully
                Pagination:
                    type: string
                Status:
                    type: string
                    example: success
                Timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        PasswordResetToken:
            type: object
            description: PasswordResetToken model
            properties:
                CreatedAt:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                Email:
                    type: string
                    example: john.doe@example.com
                Token:
                    type: string
                    example: abc123def456
        Permission:
            type: object
            description: Permission model
            properties:
                Description:
                    type: string
                    example: Create new users
                Guard:
                    type: string
                    example: web
                Name:
                    type: string
                    example: users.create
                Roles:
                    type: array
                    description: Roles that have this permission
                    items:
                        type: string
                Tenant:
                    type: string
                    description: Tenant this permission belongs to
                    nullable: true
                TenantID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                    nullable: true
        Province:
            type: object
            description: Province model
            properties:
                Cities:
                    type: array
                    description: Province's cities
                    items:
                        type: string
                Code:
                    type: string
                    example: CA
                Country:
                    type: string
                    description: Province's country
                CountryID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: California
        PushSubscription:
            type: object
            description: PushSubscription model
            properties:
                AuthToken:
                    type: string
                ContentEncoding:
                    type: string
                CreatedAt:
                    type: string
                    format: date-time
                DeletedAt:
                    type: string
                    nullable: true
                Endpoint:
                    type: string
                ID:
                    type: string
                IsActive:
                    type: boolean
                P256dhKey:
                    type: string
                UpdatedAt:
                    type: string
                    format: date-time
                User:
                    type: string
                UserID:
                    type: string
        RefreshTokenRequest:
            type: object
            description: RefreshTokenRequest model
            properties:
                RefreshToken:
                    type: string
                    example: abc123def456
            required:
                - RefreshToken
        RegisterRequest:
            type: object
            description: RegisterRequest model
            properties:
                AcceptTerms:
                    type: boolean
                    example: "true"
                Email:
                    type: string
                    example: john.doe@example.com
                Name:
                    type: string
                    example: John Doe
                Password:
                    type: string
                    example: password123
                PasswordConfirmation:
                    type: string
                    example: password123
            required:
                - Name
                - Email
                - Password
                - PasswordConfirmation
                - AcceptTerms
        RemoveReactionRequest:
            type: object
            description: RemoveReactionRequest model
            properties:
                Emoji:
                    type: string
                    example: "\U0001F44D"
        ResetPasswordRequest:
            type: object
            description: ResetPasswordRequest model
            properties:
                Email:
                    type: string
                    example: john.doe@example.com
                Password:
                    type: string
                    example: newpassword123
                PasswordConfirmation:
                    type: string
                    example: newpassword123
                Token:
                    type: string
                    example: abc123def456
            required:
                - Token
                - Email
                - Password
                - PasswordConfirmation
        ResolveThreadRequest:
            type: object
            description: ResolveThreadRequest model
            properties:
                Note:
                    type: string
        RespondToInvitationRequest:
            type: object
            description: RespondToInvitationRequest model
            properties:
                Response:
                    type: string
        Role:
            type: object
            description: Role model
            properties:
                Description:
                    type: string
                    example: Administrator role with full access
                Guard:
                    type: string
                    example: web
                Name:
                    type: string
                    example: admin
                Permissions:
                    type: array
                    description: Permissions assigned to this role
                    items:
                        type: string
                Tenant:
                    type: string
                    description: Tenant this role belongs to
                    nullable: true
                TenantID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                    nullable: true
                Users:
                    type: array
                    description: Users assigned this role
                    items:
                        type: string
        SendMessageRequest:
            type: object
            description: SendMessageRequest model
            properties:
                Content:
                    type: string
                Metadata:
                    type: string
                ReplyToID:
                    type: string
                Type:
                    type: string
        Tenant:
            type: object
            description: Tenant model
            properties:
                Description:
                    type: string
                    example: Main tenant for Acme Corporation
                Domain:
                    type: string
                    example: acme.com
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: Acme Corporation
                Settings:
                    type: string
                    example: '{"theme":"dark","timezone":"UTC"}'
                Slug:
                    type: string
                    example: acme-corp
                Users:
                    type: array
                    description: Users associated with this tenant
                    items:
                        type: string
        UpdateCalendarEventRequest:
            type: object
            description: UpdateCalendarEventRequest model
            properties:
                Color:
                    type: string
                    example: '#3B82F6'
                Description:
                    type: string
                    example: Weekly team sync to discuss project progress
                EndTime:
                    type: string
                    example: "2024-01-15T11:00:00Z"
                    nullable: true
                IsAllDay:
                    type: boolean
                    example: "false"
                IsRecurring:
                    type: boolean
                    example: "false"
                Location:
                    type: string
                    example: Conference Room A
                Meeting:
                    type: string
                    nullable: true
                RecurrenceRule:
                    type: string
                    example: FREQ=WEEKLY;INTERVAL=1;BYDAY=MO
                RecurrenceUntil:
                    type: string
                    example: "2024-12-31T23:59:59Z"
                    nullable: true
                ReminderSettings:
                    type: string
                    example: '{"email": 15, "push": 30, "sms": 60}'
                StartTime:
                    type: string
                    example: "2024-01-15T10:00:00Z"
                    nullable: true
                Status:
                    type: string
                    example: scheduled
                Timezone:
                    type: string
                    example: UTC
                Title:
                    type: string
                    example: Team Meeting
                Type:
                    type: string
                    example: meeting
        UpdateChatRoomRequest:
            type: object
            description: UpdateChatRoomRequest model
            properties:
                Avatar:
                    type: string
                Description:
                    type: string
                Name:
                    type: string
        UpdateCityRequest:
            type: object
            description: UpdateCityRequest model
            properties:
                Code:
                    type: string
                    example: LA
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: Los Angeles
                ProvinceID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        UpdateCountryRequest:
            type: object
            description: UpdateCountryRequest model
            properties:
                Code:
                    type: string
                    example: US
                Code3:
                    type: string
                    example: USA
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: United States
                NumericCode:
                    type: string
                    example: "840"
        UpdateDistrictRequest:
            type: object
            description: UpdateDistrictRequest model
            properties:
                CityID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Code:
                    type: string
                    example: DT
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: Downtown
        UpdateMeetingRequest:
            type: object
            description: UpdateMeetingRequest model
            properties:
                AllowJoinBeforeHost:
                    type: boolean
                    example: "true"
                AttendanceCount:
                    type: integer
                    example: "5"
                MeetingID:
                    type: string
                    example: "123456789"
                MeetingMinutes:
                    type: string
                    example: 'Key decisions: 1. Project timeline approved 2. Budget increased by 10%'
                MeetingNotes:
                    type: string
                    example: 'Agenda: 1. Project updates 2. Q&A'
                MeetingType:
                    type: string
                    example: video
                MeetingURL:
                    type: string
                    example: https://zoom.us/j/123456789
                MuteParticipantsOnEntry:
                    type: boolean
                    example: "false"
                Passcode:
                    type: string
                    example: "123456"
                Platform:
                    type: string
                    example: zoom
                RecordMeeting:
                    type: boolean
                    example: "false"
                Status:
                    type: string
                    example: scheduled
                WaitingRoom:
                    type: string
                    example: enabled
        UpdateMeetingStatusRequest:
            type: object
            description: UpdateMeetingStatusRequest model
            properties:
                AttendanceCount:
                    type: integer
                    example: "5"
                MeetingMinutes:
                    type: string
                    example: 'Key decisions: 1. Project timeline approved 2. Budget increased by 10%'
                RecordingURL:
                    type: string
                    example: https://zoom.us/recording/123456789
                Status:
                    type: string
                    example: in-progress
            required:
                - Status
        UpdateNotificationSettingsRequest:
            type: object
            description: UpdateNotificationSettingsRequest model
            properties:
                CustomSettings:
                    type: string
                DesktopNotifications:
                    type: boolean
                    nullable: true
                EmailNotifications:
                    type: boolean
                    nullable: true
                IsMuted:
                    type: boolean
                    nullable: true
                MentionNotifications:
                    type: boolean
                    nullable: true
                MuteUntil:
                    type: string
                    nullable: true
                PushNotifications:
                    type: boolean
                    nullable: true
                ReactionNotifications:
                    type: boolean
                    nullable: true
                ThreadNotifications:
                    type: boolean
                    nullable: true
        UpdateParticipantResponseRequest:
            type: object
            description: UpdateParticipantResponseRequest model
            properties:
                ResponseComment:
                    type: string
                    example: I'll be 5 minutes late
                ResponseStatus:
                    type: string
                    example: accepted
            required:
                - ResponseStatus
        UpdatePermissionRequest:
            type: object
            description: UpdatePermissionRequest model
            properties:
                Description:
                    type: string
                    example: Create new users
                Guard:
                    type: string
                    example: api
                Name:
                    type: string
                    example: users.create
        UpdateProvinceRequest:
            type: object
            description: UpdateProvinceRequest model
            properties:
                Code:
                    type: string
                    example: CA
                CountryID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: California
        UpdateRoleRequest:
            type: object
            description: UpdateRoleRequest model
            properties:
                Description:
                    type: string
                    example: Administrator role with full access
                Guard:
                    type: string
                    example: api
                Name:
                    type: string
                    example: admin
        UpdateTenantRequest:
            type: object
            description: UpdateTenantRequest model
            properties:
                Description:
                    type: string
                    example: A leading technology company
                Domain:
                    type: string
                    example: acme.example.com
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: Acme Corporation
                Settings:
                    type: string
                    example: '{"theme": "dark", "timezone": "UTC"}'
                Slug:
                    type: string
                    example: acme-corp
        UpdateUserRequest:
            type: object
            description: UpdateUserRequest model
            properties:
                Email:
                    type: string
                    example: john.doe@example.com
                IsActive:
                    type: boolean
                    example: "true"
                Name:
                    type: string
                    example: John Doe
                Password:
                    type: string
                    example: newpassword123
        User:
            type: object
            description: User model
            properties:
                Email:
                    type: string
                    example: john.doe@example.com
                EmailVerifiedAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                FailedLoginAttempts:
                    type: integer
                    example: "0"
                IsActive:
                    type: boolean
                    example: "true"
                LastLoginAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                LastLoginIp:
                    type: string
                    example: 192.168.1.1
                LastLoginUserAgent:
                    type: string
                    example: Mozilla/5.0...
                LockedAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                LockedUntil:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                MfaEnabled:
                    type: boolean
                    example: "false"
                MfaEnabledAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                MfaSecret:
                    type: string
                    example: abc123def456
                Name:
                    type: string
                    example: John Doe
                Password:
                    type: string
                    example: password123
                PasswordResetExpiresAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                PasswordResetToken:
                    type: string
                    example: abc123def456
                PreferredNotificationChannels:
                    type: array
                    description: User's preferred notification channels
                    items:
                        type: string
                PushSubscriptions:
                    type: array
                    description: User's push subscriptions
                    items:
                        type: string
                RememberToken:
                    type: string
                    example: abc123def456
                Roles:
                    type: array
                    description: User's roles across tenants
                    items:
                        type: string
                Tenants:
                    type: array
                    description: User's associated tenants
                    items:
                        type: string
                WebauthnCredentials:
                    type: array
                    description: User's WebAuthn credentials
                    items:
                        type: string
                WebauthnEnabled:
                    type: boolean
                    example: "false"
                WebauthnEnabledAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
        UserKey:
            type: object
            description: UserKey model
            properties:
                CreatedAt:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                EncryptedPrivateKey:
                    type: string
                    example: encrypted_private_key_data
                ExpiresAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                IsActive:
                    type: boolean
                    example: "true"
                KeyType:
                    type: string
                    example: identity
                PublicKey:
                    type: string
                    example: '-----BEGIN PUBLIC KEY-----'
                User:
                    type: string
                    nullable: true
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Version:
                    type: integer
                    example: "1"
        UserRole:
            type: object
            description: UserRole model
            properties:
                Role:
                    type: string
                RoleID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                Tenant:
                    type: string
                    nullable: true
                TenantID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                    nullable: true
                User:
                    type: string
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        UserTenant:
            type: object
            description: UserTenant model
            properties:
                IsActive:
                    type: boolean
                    example: "true"
                JoinedAt:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                Tenant:
                    type: string
                TenantID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
                User:
                    type: string
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        VerifyMfaRequest:
            type: object
            description: VerifyMfaRequest model
            properties:
                Code:
                    type: string
                    example: "123456"
            required:
                - Code
        WebauthnAuthenticateRequest:
            type: object
            description: WebauthnAuthenticateRequest model
            properties:
                AssertionResponse:
                    type: string
                    example: '{"id":"abc123","response":{"authenticatorData":"...","clientDataJSON":"...","signature":"..."}}'
            required:
                - AssertionResponse
        WebauthnCredential:
            type: object
            description: WebauthnCredential model
            properties:
                AttestationType:
                    type: string
                    example: direct
                BackedUp:
                    type: boolean
                    example: "false"
                BackupEligible:
                    type: boolean
                    example: "true"
                CredentialID:
                    type: string
                    example: abc123def456
                Flags:
                    type: string
                    example: backup_eligible,backed_up
                LastUsedAt:
                    type: string
                    example: "2024-01-15T10:30:00Z"
                    nullable: true
                Name:
                    type: string
                    example: My Security Key
                PublicKey:
                    type: string
                    example: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f4CBgoOEhYaHiImKi4yNjo+QkZKTlJWWl5iZmpucnZ6foKGio6SlpqeoqaqrrK2ur7CxsrO0tba3uLm6u7y9vr/AwcLDxMXGx8jJysvMzc7P0NHS09TV1tfY2drb3N3e3+Dh4uPk5ebn6Onq6+zt7u/w8fLz9PX29/j5+vv8/f7/
                SignCount:
                    type: string
                    example: "42"
                Transports:
                    type: string
                    example: '["usb","nfc","ble"]'
                User:
                    type: string
                    description: User this credential belongs to
                UserID:
                    type: string
                    example: 01HXYZ123456789ABCDEFGHIJK
        WebauthnRegisterRequest:
            type: object
            description: WebauthnRegisterRequest model
            properties:
                AttestationResponse:
                    type: string
                    example: '{"id":"abc123","response":{"attestationObject":"...","clientDataJSON":"..."}}'
                Name:
                    type: string
                    example: My Security Key
            required:
                - Name
                - AttestationResponse
    securitySchemes:
        bearerAuth:
            type: http
            description: JWT token for API authentication
            scheme: bearer
            bearerFormat: JWT
security:
    - bearerAuth: []
tags:
    - name: roles
      description: ""
    - name: users
      description: ""
    - name: activity-logs
      description: ""
    - name: Authentication
      description: ""
    - name: calendar-events
      description: ""
    - name: chat
      description: ""
    - name: cities
      description: ""
    - name: districts
      description: ""
    - name: OAuth2
      description: ""
    - name: tenants
      description: ""
    - name: countries
      description: ""
    - name: permissions
      description: ""
    - name: provinces
      description: ""
    - name: docs
      description: ""
    - name: openapi.html
      description: ""
    - name: openapi.json
      description: ""
    - name: openapi.yaml
      description: ""
    - name: oauth
      description: ""
