{{define "notifications/index.tmpl"}}
    {{template "layouts/header.tmpl" .}}
    {{template "layouts/nav.tmpl" .}}

    <!-- Enhanced Notification Styles -->
    <style>
        .notification-container {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            min-height: 100vh;
            padding: 20px 0;
        }
        
        .notification-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            border: 1px solid rgba(255,255,255,0.1);
            margin-bottom: 12px;
            overflow: hidden;
        }
        
        .notification-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 30px rgba(0,0,0,0.12);
        }
        
        .notification-item {
            padding: 20px;
            border-left: 4px solid transparent;
            transition: all 0.2s ease;
            position: relative;
        }
        
        .notification-item.unread {
            background: linear-gradient(135deg, #f8f9ff 0%, #fff 100%);
            border-left-color: #007bff;
        }
        
        .notification-item.read {
            background: #f8f9fa;
            border-left-color: #dee2e6;
        }
        
        .notification-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
            margin-right: 16px;
        }
        
        .notification-content {
            flex: 1;
        }
        
        .notification-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 4px;
        }
        
        .notification-message {
            color: #718096;
            font-size: 0.9rem;
            margin-bottom: 8px;
            line-height: 1.4;
        }
        
        .notification-meta {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 0.8rem;
            color: #a0aec0;
        }
        
        .notification-actions {
            display: flex;
            gap: 8px;
            opacity: 0;
            transition: opacity 0.2s ease;
        }
        
        .notification-item:hover .notification-actions {
            opacity: 1;
        }
        
        .filter-tabs {
            background: white;
            border-radius: 12px;
            padding: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .filter-tab {
            padding: 8px 16px;
            border-radius: 8px;
            border: none;
            background: transparent;
            color: #718096;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        
        .filter-tab.active {
            background: #007bff;
            color: white;
            box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);
        }
        
        .search-box {
            background: white;
            border-radius: 12px;
            border: 2px solid #e2e8f0;
            padding: 12px 16px;
            transition: all 0.2s ease;
        }
        
        .search-box:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
        }
        
        .stats-badge {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .bulk-actions {
            background: white;
            border-radius: 12px;
            padding: 16px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            margin-bottom: 20px;
            display: none;
        }
        
        .bulk-actions.show {
            display: block;
            animation: slideDown 0.3s ease;
        }
        
        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .notification-type-info { background: linear-gradient(135deg, #17a2b8 0%, #138496 100%); }
        .notification-type-success { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); }
        .notification-type-warning { background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%); }
        .notification-type-error { background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); }
        .notification-type-default { background: linear-gradient(135deg, #6c757d 0%, #495057 100%); }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #718096;
        }
        
        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }
    </style>

    <!-- Page Content -->
    <main class="notification-container">
        <div class="container py-4">
            <!-- Header Section -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 fw-bold text-dark">Notifications</h1>
                    <p class="text-muted mb-0">Stay updated with your latest activities and alerts</p>
                </div>
                <div class="d-flex gap-2">
                    <div class="stats-badge">
                        <i class="fas fa-bell me-1"></i>
                        {{.stats.unread}} unread
                    </div>
                    <button class="btn btn-outline-primary" onclick="refreshNotifications()">
                        <i class="fas fa-sync-alt me-2"></i>Refresh
                    </button>
                    <button class="btn btn-primary" onclick="markAllAsRead()">
                        <i class="fas fa-check-double me-2"></i>Mark All Read
                    </button>
                </div>
            </div>

            <!-- Search and Filters -->
            <div class="row g-4 mb-4">
                <div class="col-md-8">
                    <div class="position-relative">
                        <i class="fas fa-search position-absolute" style="left: 16px; top: 50%; transform: translateY(-50%); color: #a0aec0;"></i>
                        <input type="text" class="form-control search-box ps-5" placeholder="Search notifications..." 
                               id="searchInput" onkeyup="searchNotifications()">
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="filter-tabs d-flex">
                        <button class="filter-tab active" data-filter="all" onclick="filterNotifications('all')">
                            All ({{.stats.total}})
                        </button>
                        <button class="filter-tab" data-filter="unread" onclick="filterNotifications('unread')">
                            Unread ({{.stats.unread}})
                        </button>
                        <button class="filter-tab" data-filter="read" onclick="filterNotifications('read')">
                            Read ({{.stats.read}})
                        </button>
                    </div>
                </div>
            </div>

            <!-- Bulk Actions Bar -->
            <div class="bulk-actions" id="bulkActions">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <span id="selectedCount">0</span> notification(s) selected
                    </div>
                    <div class="d-flex gap-2">
                        <button class="btn btn-sm btn-outline-success" onclick="bulkAction('mark_read')">
                            <i class="fas fa-check me-1"></i>Mark Read
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" onclick="bulkAction('mark_unread')">
                            <i class="fas fa-envelope me-1"></i>Mark Unread
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="bulkAction('delete')">
                            <i class="fas fa-trash me-1"></i>Delete
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" onclick="clearSelection()">
                            Cancel
                        </button>
                    </div>
                </div>
            </div>

            <!-- Notifications List -->
            <div id="notificationsContainer">
                {{if .notifications}}
                    {{range .notifications}}
                    <div class="notification-card">
                        <div class="notification-item {{if not .ReadAt}}unread{{else}}read{{end}}" data-id="{{.ID}}">
                            <div class="d-flex align-items-start">
                                <div class="form-check me-3">
                                    <input class="form-check-input notification-checkbox" type="checkbox" 
                                           value="{{.ID}}" onchange="updateSelection()">
                                </div>
                                
                                <div class="notification-icon notification-type-{{.Type | lower | default "default"}}">
                                    {{if eq .Type "info"}}
                                        <i class="fas fa-info-circle"></i>
                                    {{else if eq .Type "success"}}
                                        <i class="fas fa-check-circle"></i>
                                    {{else if eq .Type "warning"}}
                                        <i class="fas fa-exclamation-triangle"></i>
                                    {{else if eq .Type "error"}}
                                        <i class="fas fa-times-circle"></i>
                                    {{else}}
                                        <i class="fas fa-bell"></i>
                                    {{end}}
                                </div>
                                
                                <div class="notification-content">
                                    <div class="notification-title">{{.Type | title}}</div>
                                    <div class="notification-message">
                                        {{if .Data.title}}{{.Data.title}}{{else}}{{.Type}} notification{{end}}
                                    </div>
                                    <div class="notification-meta">
                                        <span><i class="fas fa-clock me-1"></i>{{.CreatedAt.Format "Jan 2, 2006 at 3:04 PM"}}</span>
                                        {{if not .ReadAt}}
                                            <span class="badge bg-primary">New</span>
                                        {{end}}
                                    </div>
                                </div>
                                
                                <div class="notification-actions">
                                    {{if not .ReadAt}}
                                        <button class="btn btn-sm btn-outline-primary" onclick="markAsRead('{{.ID}}')">
                                            <i class="fas fa-check"></i>
                                        </button>
                                    {{end}}
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteNotification('{{.ID}}')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    {{end}}
                {{else}}
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="fas fa-bell-slash"></i>
                        </div>
                        <h4>No notifications found</h4>
                        <p>You're all caught up! New notifications will appear here.</p>
                    </div>
                {{end}}
            </div>

            <!-- Pagination -->
            {{if gt .pagination.total_pages 1}}
            <div class="d-flex justify-content-center mt-4">
                <nav aria-label="Notifications pagination">
                    <ul class="pagination">
                        {{if .pagination.has_prev}}
                        <li class="page-item">
                            <a class="page-link" href="?page={{sub .pagination.current_page 1}}&filter={{.filters.current}}&search={{.filters.search}}">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>
                        {{end}}
                        
                        {{range $i := seq 1 .pagination.total_pages}}
                        <li class="page-item {{if eq $i $.pagination.current_page}}active{{end}}">
                            <a class="page-link" href="?page={{$i}}&filter={{$.filters.current}}&search={{$.filters.search}}">{{$i}}</a>
                        </li>
                        {{end}}
                        
                        {{if .pagination.has_next}}
                        <li class="page-item">
                            <a class="page-link" href="?page={{add .pagination.current_page 1}}&filter={{.filters.current}}&search={{.filters.search}}">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                        {{end}}
                    </ul>
                </nav>
            </div>
            {{end}}
        </div>
    </main>

    <!-- JavaScript -->
    <script>
        let selectedNotifications = new Set();
        let currentFilter = 'all';
        let searchTimeout;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            updateFilterFromURL();
            startRealTimeUpdates();
        });

        // Filter notifications
        function filterNotifications(filter) {
            currentFilter = filter;
            
            // Update active tab
            document.querySelectorAll('.filter-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelector(`[data-filter="${filter}"]`).classList.add('active');
            
            // Apply filter to notifications
            const notifications = document.querySelectorAll('.notification-item');
            notifications.forEach(item => {
                const isUnread = item.classList.contains('unread');
                const isRead = item.classList.contains('read');
                
                let show = false;
                switch(filter) {
                    case 'all':
                        show = true;
                        break;
                    case 'unread':
                        show = isUnread;
                        break;
                    case 'read':
                        show = isRead;
                        break;
                }
                
                item.closest('.notification-card').style.display = show ? 'block' : 'none';
            });
        }

        // Search notifications
        function searchNotifications() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                const query = document.getElementById('searchInput').value.toLowerCase();
                const notifications = document.querySelectorAll('.notification-item');
                
                notifications.forEach(item => {
                    const title = item.querySelector('.notification-title').textContent.toLowerCase();
                    const message = item.querySelector('.notification-message').textContent.toLowerCase();
                    const show = title.includes(query) || message.includes(query);
                    
                    item.closest('.notification-card').style.display = show ? 'block' : 'none';
                });
            }, 300);
        }

        // Update selection
        function updateSelection() {
            selectedNotifications.clear();
            document.querySelectorAll('.notification-checkbox:checked').forEach(checkbox => {
                selectedNotifications.add(checkbox.value);
            });
            
            const count = selectedNotifications.size;
            document.getElementById('selectedCount').textContent = count;
            document.getElementById('bulkActions').classList.toggle('show', count > 0);
        }

        // Clear selection
        function clearSelection() {
            document.querySelectorAll('.notification-checkbox').forEach(checkbox => {
                checkbox.checked = false;
            });
            updateSelection();
        }

        // Mark single notification as read
        async function markAsRead(id) {
            try {
                const response = await fetch(`/notifications/${id}/read`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    }
                });
                
                if (response.ok) {
                    const item = document.querySelector(`[data-id="${id}"]`);
                    item.classList.remove('unread');
                    item.classList.add('read');
                    
                    // Remove "New" badge and read button
                    const badge = item.querySelector('.badge');
                    if (badge) badge.remove();
                    
                    const readBtn = item.querySelector('.btn-outline-primary');
                    if (readBtn) readBtn.remove();
                    
                    showNotification('Notification marked as read', 'success');
                } else {
                    showNotification('Failed to mark notification as read', 'error');
                }
            } catch (error) {
                showNotification('An error occurred', 'error');
            }
        }

        // Mark all notifications as read
        async function markAllAsRead() {
            try {
                const response = await fetch('/notifications/mark-all-read', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    }
                });
                
                if (response.ok) {
                    location.reload();
                } else {
                    showNotification('Failed to mark all notifications as read', 'error');
                }
            } catch (error) {
                showNotification('An error occurred', 'error');
            }
        }

        // Delete single notification
        async function deleteNotification(id) {
            if (!confirm('Are you sure you want to delete this notification?')) return;
            
            try {
                const response = await fetch(`/notifications/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    }
                });
                
                if (response.ok) {
                    document.querySelector(`[data-id="${id}"]`).closest('.notification-card').remove();
                    showNotification('Notification deleted', 'success');
                } else {
                    showNotification('Failed to delete notification', 'error');
                }
            } catch (error) {
                showNotification('An error occurred', 'error');
            }
        }

        // Bulk actions
        async function bulkAction(action) {
            if (selectedNotifications.size === 0) return;
            
            const actionText = action === 'mark_read' ? 'mark as read' : 
                              action === 'mark_unread' ? 'mark as unread' : 'delete';
            
            if (!confirm(`Are you sure you want to ${actionText} ${selectedNotifications.size} notification(s)?`)) return;
            
            try {
                const response = await fetch('/notifications/bulk-action', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    },
                    body: JSON.stringify({
                        action: action,
                        notification_ids: Array.from(selectedNotifications).join(',')
                    })
                });
                
                if (response.ok) {
                    location.reload();
                } else {
                    showNotification(`Failed to ${actionText} notifications`, 'error');
                }
            } catch (error) {
                showNotification('An error occurred', 'error');
            }
        }

        // Refresh notifications
        function refreshNotifications() {
            location.reload();
        }

        // Real-time updates
        function startRealTimeUpdates() {
            setInterval(async () => {
                try {
                    const response = await fetch('/notifications/recent');
                    if (response.ok) {
                        const data = await response.json();
                        if (data.count > 0) {
                            // Update unread count badge
                            const badge = document.querySelector('.stats-badge');
                            if (badge) {
                                const countResponse = await fetch('/notifications/unread-count');
                                if (countResponse.ok) {
                                    const countData = await countResponse.json();
                                    badge.innerHTML = `<i class="fas fa-bell me-1"></i>${countData.count} unread`;
                                }
                            }
                        }
                    }
                } catch (error) {
                    console.log('Failed to check for new notifications');
                }
            }, 30000); // Check every 30 seconds
        }

        // Show notification
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        // Update filter from URL
        function updateFilterFromURL() {
            const urlParams = new URLSearchParams(window.location.search);
            const filter = urlParams.get('filter') || 'all';
            const search = urlParams.get('search') || '';
            
            if (search) {
                document.getElementById('searchInput').value = search;
            }
            
            filterNotifications(filter);
        }
    </script>

    {{template "layouts/footer.tmpl" .}}
{{end}} 