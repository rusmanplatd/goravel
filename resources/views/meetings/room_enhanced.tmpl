<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.title}} - Meeting Room</title>
    <script src="https://unpkg.com/livekit-client/dist/livekit-client.umd.min.js"></script>
    <script src="https://unpkg.com/fabric@5.3.0/dist/fabric.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: #1a1a1a;
            color: #ffffff;
            height: 100vh;
            overflow: hidden;
        }

        .meeting-container {
            display: flex;
            height: 100vh;
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .top-bar {
            background: #2d2d2d;
            padding: 10px 20px;
            display: flex;
            justify-content: between;
            align-items: center;
            border-bottom: 1px solid #333;
        }

        .meeting-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .meeting-title {
            font-size: 16px;
            font-weight: 600;
        }

        .recording-indicator {
            display: none;
            background: #ff4757;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            animation: pulse 2s infinite;
        }

        .recording-indicator.active {
            display: block;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .top-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .video-container {
            flex: 1;
            background: #2d2d2d;
            position: relative;
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            justify-content: center;
            padding: 20px;
            gap: 10px;
        }

        .participant-video {
            background: #1a1a1a;
            border-radius: 8px;
            position: relative;
            overflow: hidden;
            border: 2px solid transparent;
            transition: border-color 0.3s ease;
        }

        .participant-video.speaking {
            border-color: #00d4aa;
        }

        .participant-video.local {
            border-color: #0084ff;
        }

        .participant-video video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 6px;
        }

        .participant-info {
            position: absolute;
            bottom: 8px;
            left: 8px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .participant-info .muted-icon {
            color: #ff4757;
        }

        .controls {
            background: #1a1a1a;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 15px;
            border-top: 1px solid #333;
        }

        .control-btn {
            background: #333;
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            transition: all 0.3s ease;
        }

        .control-btn:hover {
            background: #444;
            transform: scale(1.05);
        }

        .control-btn.active {
            background: #00d4aa;
        }

        .control-btn.danger {
            background: #ff4757;
        }

        .control-btn.danger:hover {
            background: #ff3742;
        }

        .sidebar {
            width: 320px;
            background: #1a1a1a;
            border-left: 1px solid #333;
            display: flex;
            flex-direction: column;
        }

        .sidebar-tabs {
            display: flex;
            border-bottom: 1px solid #333;
            overflow-x: auto;
        }

        .sidebar-tab {
            flex: 1;
            background: none;
            border: none;
            color: #999;
            padding: 15px 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 12px;
            white-space: nowrap;
        }

        .sidebar-tab.active {
            color: #00d4aa;
            background: #2d2d2d;
        }

        .sidebar-content {
            flex: 1;
            overflow-y: auto;
        }

        /* Chat Styles */
        .chat-container {
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .chat-message {
            margin-bottom: 15px;
            padding: 10px;
            background: #2d2d2d;
            border-radius: 8px;
        }

        .chat-message .sender {
            font-weight: bold;
            color: #00d4aa;
            margin-bottom: 5px;
        }

        .chat-message .content {
            color: #ffffff;
        }

        .chat-message .timestamp {
            font-size: 11px;
            color: #999;
            margin-top: 5px;
        }

        .chat-input-container {
            padding: 20px;
            border-top: 1px solid #333;
        }

        .chat-input {
            width: 100%;
            background: #2d2d2d;
            border: 1px solid #444;
            border-radius: 6px;
            padding: 10px;
            color: white;
            resize: none;
        }

        .chat-input:focus {
            outline: none;
            border-color: #00d4aa;
        }

        /* Participants Styles */
        .participants-list {
            padding: 20px;
        }

        .participant-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            margin-bottom: 8px;
            background: #2d2d2d;
            border-radius: 6px;
        }

        .participant-name {
            color: #ffffff;
        }

        .participant-status {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .status-icon {
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }

        .status-icon.online {
            background: #00d4aa;
        }

        .status-icon.away {
            background: #ffa502;
        }

        /* Poll Styles */
        .poll-container {
            padding: 20px;
        }

        .poll-item {
            background: #2d2d2d;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .poll-question {
            font-weight: bold;
            margin-bottom: 10px;
        }

        .poll-option {
            display: flex;
            align-items: center;
            padding: 8px;
            margin: 5px 0;
            background: #333;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .poll-option:hover {
            background: #444;
        }

        .poll-option input {
            margin-right: 10px;
        }

        .poll-results {
            margin-top: 10px;
        }

        .poll-result-bar {
            background: #333;
            height: 20px;
            border-radius: 10px;
            margin: 5px 0;
            overflow: hidden;
        }

        .poll-result-fill {
            background: #00d4aa;
            height: 100%;
            transition: width 0.3s ease;
        }

        /* Whiteboard Styles */
        .whiteboard-container {
            padding: 20px;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .whiteboard-toolbar {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            padding: 10px;
            background: #2d2d2d;
            border-radius: 6px;
        }

        .tool-btn {
            background: #333;
            border: none;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .tool-btn:hover {
            background: #444;
        }

        .tool-btn.active {
            background: #00d4aa;
        }

        .whiteboard-canvas {
            flex: 1;
            background: white;
            border-radius: 6px;
            border: 2px solid #333;
        }

        /* Recording Styles */
        .recording-container {
            padding: 20px;
        }

        .recording-item {
            background: #2d2d2d;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .recording-title {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .recording-meta {
            font-size: 12px;
            color: #999;
            margin-bottom: 10px;
        }

        .recording-actions {
            display: flex;
            gap: 10px;
        }

        .recording-btn {
            background: #00d4aa;
            border: none;
            color: white;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
        }

        .recording-btn:hover {
            background: #00b894;
        }

        /* Transcription Styles */
        .transcription-container {
            padding: 20px;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .transcription-messages {
            flex: 1;
            overflow-y: auto;
        }

        .transcription-item {
            background: #2d2d2d;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 10px;
        }

        .transcription-speaker {
            font-weight: bold;
            color: #00d4aa;
            font-size: 12px;
        }

        .transcription-content {
            margin-top: 5px;
            line-height: 1.4;
        }

        .transcription-time {
            font-size: 10px;
            color: #999;
            margin-top: 5px;
        }

        /* Breakout Rooms Styles */
        .breakout-container {
            padding: 20px;
        }

        .breakout-room {
            background: #2d2d2d;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .breakout-room-title {
            font-weight: bold;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .breakout-participants {
            font-size: 12px;
            color: #999;
        }

        .breakout-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .breakout-btn {
            background: #00d4aa;
            border: none;
            color: white;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
        }

        .breakout-btn:hover {
            background: #00b894;
        }

        /* Modals */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: #2d2d2d;
            border-radius: 8px;
            padding: 20px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-title {
            font-size: 18px;
            font-weight: bold;
        }

        .modal-close {
            background: none;
            border: none;
            color: #999;
            font-size: 24px;
            cursor: pointer;
        }

        .modal-close:hover {
            color: white;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-input {
            width: 100%;
            background: #333;
            border: 1px solid #444;
            border-radius: 4px;
            padding: 10px;
            color: white;
        }

        .form-input:focus {
            outline: none;
            border-color: #00d4aa;
        }

        .form-textarea {
            width: 100%;
            background: #333;
            border: 1px solid #444;
            border-radius: 4px;
            padding: 10px;
            color: white;
            resize: vertical;
            min-height: 80px;
        }

        .form-textarea:focus {
            outline: none;
            border-color: #00d4aa;
        }

        .form-select {
            width: 100%;
            background: #333;
            border: 1px solid #444;
            border-radius: 4px;
            padding: 10px;
            color: white;
        }

        .form-checkbox {
            margin-right: 8px;
        }

        .btn {
            background: #00d4aa;
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s ease;
        }

        .btn:hover {
            background: #00b894;
        }

        .btn-secondary {
            background: #666;
        }

        .btn-secondary:hover {
            background: #777;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .meeting-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                height: 300px;
            }

            .participant-video {
                min-width: 150px;
                min-height: 100px;
            }

            .sidebar-tabs {
                justify-content: space-around;
            }

            .sidebar-tab {
                flex: none;
                padding: 10px 8px;
            }
        }

        /* Grid layouts for different participant counts */
        .video-container[data-participants="1"] .participant-video {
            width: 80%;
            height: 80%;
        }

        .video-container[data-participants="2"] .participant-video {
            width: 45%;
            height: 80%;
        }

        .video-container[data-participants="3"],
        .video-container[data-participants="4"] .participant-video {
            width: 45%;
            height: 45%;
        }

        .video-container[data-participants="5"],
        .video-container[data-participants="6"] .participant-video {
            width: 30%;
            height: 45%;
        }

        .video-container .participant-video {
            width: 23%;
            height: 30%;
            min-width: 200px;
            min-height: 150px;
        }

        .connection-status {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
        }

        .connection-status.connected {
            background: rgba(0, 212, 170, 0.8);
        }

        .connection-status.connecting {
            background: rgba(255, 165, 2, 0.8);
        }

        .connection-status.disconnected {
            background: rgba(255, 71, 87, 0.8);
        }
    </style>
</head>

<body>
    <div class="meeting-container">
        <div class="main-content">
            <div class="top-bar">
                <div class="meeting-info">
                    <div class="meeting-title">{{.meeting.Event.Title}}</div>
                    <div class="recording-indicator" id="recordingIndicator">
                        🔴 Recording
                    </div>
                </div>
                <div class="top-controls">
                    <button class="control-btn" id="settingsBtn" title="Settings">
                        ⚙️
                    </button>
                    <button class="control-btn" id="fullscreenBtn" title="Fullscreen">
                        ⛶
                    </button>
                </div>
            </div>

            <div class="connection-status" id="connectionStatus">Connecting...</div>
            
            <div class="video-container" id="videoContainer" data-participants="0">
                <!-- Participant videos will be dynamically added here -->
            </div>

            <div class="controls">
                <button class="control-btn" id="micBtn" title="Toggle Microphone">
                    🎤
                </button>
                <button class="control-btn" id="cameraBtn" title="Toggle Camera">
                    📹
                </button>
                <button class="control-btn" id="screenShareBtn" title="Share Screen">
                    🖥️
                </button>
                <button class="control-btn" id="handBtn" title="Raise Hand">
                    ✋
                </button>
                <button class="control-btn" id="recordBtn" title="Start Recording">
                    ⏺️
                </button>
                <button class="control-btn" id="breakoutBtn" title="Breakout Rooms">
                    🏠
                </button>
                <button class="control-btn" id="pollBtn" title="Create Poll">
                    📊
                </button>
                <button class="control-btn" id="whiteboardBtn" title="Whiteboard">
                    ✏️
                </button>
                <button class="control-btn danger" id="leaveBtn" title="Leave Meeting">
                    📞
                </button>
            </div>
        </div>

        <div class="sidebar">
            <div class="sidebar-tabs">
                <button class="sidebar-tab active" data-tab="chat">Chat</button>
                <button class="sidebar-tab" data-tab="participants">People</button>
                <button class="sidebar-tab" data-tab="polls">Polls</button>
                <button class="sidebar-tab" data-tab="whiteboard">Board</button>
                <button class="sidebar-tab" data-tab="recordings">Records</button>
                <button class="sidebar-tab" data-tab="transcription">Notes</button>
                <button class="sidebar-tab" data-tab="breakout">Rooms</button>
            </div>

            <div class="sidebar-content">
                <!-- Chat Tab -->
                <div class="chat-container" id="chatTab">
                    <div class="chat-messages" id="chatMessages">
                        <!-- Chat messages will be added here -->
                    </div>
                    <div class="chat-input-container">
                        <textarea class="chat-input" id="chatInput" placeholder="Type a message..." rows="2"></textarea>
                    </div>
                </div>

                <!-- Participants Tab -->
                <div class="participants-list" id="participantsTab" style="display: none;">
                    <!-- Participants will be listed here -->
                </div>

                <!-- Polls Tab -->
                <div class="poll-container" id="pollsTab" style="display: none;">
                    <button class="btn" id="createPollBtn" style="width: 100%; margin-bottom: 20px;">
                        Create New Poll
                    </button>
                    <div id="pollsList">
                        <!-- Polls will be listed here -->
                    </div>
                </div>

                <!-- Whiteboard Tab -->
                <div class="whiteboard-container" id="whiteboardTab" style="display: none;">
                    <div class="whiteboard-toolbar">
                        <button class="tool-btn active" data-tool="pen">✏️</button>
                        <button class="tool-btn" data-tool="brush">🖌️</button>
                        <button class="tool-btn" data-tool="line">📏</button>
                        <button class="tool-btn" data-tool="rectangle">⬜</button>
                        <button class="tool-btn" data-tool="circle">⭕</button>
                        <button class="tool-btn" data-tool="text">📝</button>
                        <button class="tool-btn" data-tool="eraser">🧽</button>
                        <button class="tool-btn" id="clearWhiteboardBtn">🗑️</button>
                    </div>
                    <canvas class="whiteboard-canvas" id="whiteboardCanvas"></canvas>
                </div>

                <!-- Recordings Tab -->
                <div class="recording-container" id="recordingsTab" style="display: none;">
                    <div id="recordingsList">
                        <!-- Recordings will be listed here -->
                    </div>
                </div>

                <!-- Transcription Tab -->
                <div class="transcription-container" id="transcriptionTab" style="display: none;">
                    <div class="transcription-messages" id="transcriptionMessages">
                        <!-- Transcription will appear here -->
                    </div>
                </div>

                <!-- Breakout Rooms Tab -->
                <div class="breakout-container" id="breakoutTab" style="display: none;">
                    <button class="btn" id="createBreakoutBtn" style="width: 100%; margin-bottom: 20px;">
                        Create Breakout Rooms
                    </button>
                    <div id="breakoutRoomsList">
                        <!-- Breakout rooms will be listed here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Create Poll Modal -->
    <div class="modal" id="createPollModal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Create Poll</div>
                <button class="modal-close" onclick="closePollModal()">&times;</button>
            </div>
            <form id="createPollForm">
                <div class="form-group">
                    <label class="form-label">Question</label>
                    <input type="text" class="form-input" id="pollQuestion" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Poll Type</label>
                    <select class="form-select" id="pollType">
                        <option value="single_choice">Single Choice</option>
                        <option value="multiple_choice">Multiple Choice</option>
                        <option value="rating">Rating (1-5)</option>
                        <option value="text">Open Text</option>
                    </select>
                </div>
                <div class="form-group" id="pollOptionsGroup">
                    <label class="form-label">Options</label>
                    <div id="pollOptions">
                        <input type="text" class="form-input poll-option-input" placeholder="Option 1" style="margin-bottom: 10px;">
                        <input type="text" class="form-input poll-option-input" placeholder="Option 2" style="margin-bottom: 10px;">
                    </div>
                    <button type="button" class="btn-secondary" onclick="addPollOption()">Add Option</button>
                </div>
                <div class="form-group">
                    <label>
                        <input type="checkbox" class="form-checkbox" id="pollAnonymous">
                        Anonymous responses
                    </label>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn">Create Poll</button>
                    <button type="button" class="btn-secondary" onclick="closePollModal()">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Create Breakout Rooms Modal -->
    <div class="modal" id="createBreakoutModal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Create Breakout Rooms</div>
                <button class="modal-close" onclick="closeBreakoutModal()">&times;</button>
            </div>
            <form id="createBreakoutForm">
                <div class="form-group">
                    <label class="form-label">Number of Rooms</label>
                    <select class="form-select" id="breakoutRoomCount">
                        <option value="2">2 Rooms</option>
                        <option value="3">3 Rooms</option>
                        <option value="4">4 Rooms</option>
                        <option value="5">5 Rooms</option>
                        <option value="6">6 Rooms</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Assignment</label>
                    <select class="form-select" id="breakoutAssignment">
                        <option value="automatic">Automatically</option>
                        <option value="manual">Let me assign</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Duration (minutes)</label>
                    <input type="number" class="form-input" id="breakoutDuration" value="10" min="1" max="60">
                </div>
                <div class="form-group">
                    <button type="submit" class="btn">Create Rooms</button>
                    <button type="button" class="btn-secondary" onclick="closeBreakoutModal()">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Meeting configuration
        const MEETING_CONFIG = {
            meetingId: '{{.meeting.ID}}',
            userId: '{{.user.ID}}',
            userName: '{{.user.Name}}',
            isHost: {{.isHost}},
            token: '{{.token}}',
            livekitUrl: '{{.livekitUrl}}'
        };

        // Global variables
        let room = null;
        let localParticipant = null;
        let participants = new Map();
        let isConnected = false;
        let isMicMuted = true;
        let isCameraOff = true;
        let isScreenSharing = false;
        let isHandRaised = false;
        let isRecording = false;
        let whiteboardCanvas = null;
        let activePolls = new Map();
        let transcriptionMessages = [];

        // UI elements
        const connectionStatus = document.getElementById('connectionStatus');
        const videoContainer = document.getElementById('videoContainer');
        const recordingIndicator = document.getElementById('recordingIndicator');
        
        // Control buttons
        const micBtn = document.getElementById('micBtn');
        const cameraBtn = document.getElementById('cameraBtn');
        const screenShareBtn = document.getElementById('screenShareBtn');
        const handBtn = document.getElementById('handBtn');
        const recordBtn = document.getElementById('recordBtn');
        const breakoutBtn = document.getElementById('breakoutBtn');
        const pollBtn = document.getElementById('pollBtn');
        const whiteboardBtn = document.getElementById('whiteboardBtn');
        const leaveBtn = document.getElementById('leaveBtn');

        // Sidebar elements
        const chatMessages = document.getElementById('chatMessages');
        const chatInput = document.getElementById('chatInput');
        const participantsTab = document.getElementById('participantsTab');

        // Initialize meeting when page loads
        document.addEventListener('DOMContentLoaded', () => {
            initializeMeeting();
            initializeWhiteboard();
            setupEventHandlers();
            setupSidebarTabs();
        });

        // Initialize LiveKit connection
        async function initializeMeeting() {
            try {
                updateConnectionStatus('connecting');
                
                room = new LivekitClient.Room({
                    adaptiveStream: true,
                    dynacast: true,
                    videoCaptureDefaults: {
                        resolution: LivekitClient.VideoPresets.h720.resolution,
                    },
                });

                setupRoomEventListeners();
                await room.connect(MEETING_CONFIG.livekitUrl, MEETING_CONFIG.token);
                
                localParticipant = room.localParticipant;
                updateConnectionStatus('connected');
                isConnected = true;

                await localParticipant.setCameraEnabled(false);
                await localParticipant.setMicrophoneEnabled(false);

                updateControlButtons();
                console.log('Connected to meeting:', MEETING_CONFIG.meetingId);

            } catch (error) {
                console.error('Failed to connect to meeting:', error);
                updateConnectionStatus('disconnected');
                showError('Failed to connect to meeting: ' + error.message);
            }
        }

        // Set up room event listeners
        function setupRoomEventListeners() {
            room.on(LivekitClient.RoomEvent.TrackSubscribed, handleTrackSubscribed);
            room.on(LivekitClient.RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);
            room.on(LivekitClient.RoomEvent.ParticipantConnected, handleParticipantConnected);
            room.on(LivekitClient.RoomEvent.ParticipantDisconnected, handleParticipantDisconnected);
            room.on(LivekitClient.RoomEvent.ActiveSpeakersChanged, handleActiveSpeakersChanged);
            room.on(LivekitClient.RoomEvent.DataReceived, handleDataReceived);
            room.on(LivekitClient.RoomEvent.Disconnected, handleDisconnected);
        }

        // Handle track subscription
        function handleTrackSubscribed(track, publication, participant) {
            console.log('Track subscribed:', track.kind, participant.identity);
            
            if (track.kind === LivekitClient.Track.Kind.Video || track.kind === LivekitClient.Track.Kind.Audio) {
                const element = track.attach();
                addParticipantVideo(participant, element, track.kind);
            }
        }

        // Handle track unsubscription
        function handleTrackUnsubscribed(track, publication, participant) {
            console.log('Track unsubscribed:', track.kind, participant.identity);
            track.detach();
            updateParticipantVideo(participant);
        }

        // Handle participant connection
        function handleParticipantConnected(participant) {
            console.log('Participant connected:', participant.identity);
            addChatMessage('System', `${participant.name || participant.identity} joined the meeting`, 'system');
            updateParticipantsList();
        }

        // Handle participant disconnection
        function handleParticipantDisconnected(participant) {
            console.log('Participant disconnected:', participant.identity);
            removeParticipantVideo(participant);
            addChatMessage('System', `${participant.name || participant.identity} left the meeting`, 'system');
            updateParticipantsList();
        }

        // Handle active speakers change
        function handleActiveSpeakersChanged(speakers) {
            document.querySelectorAll('.participant-video').forEach(video => {
                video.classList.remove('speaking');
            });

            speakers.forEach(speaker => {
                const videoElement = document.querySelector(`[data-participant="${speaker.identity}"]`);
                if (videoElement) {
                    videoElement.classList.add('speaking');
                }
            });
        }

        // Handle data received (enhanced for new features)
        function handleDataReceived(payload, participant) {
            try {
                const data = JSON.parse(new TextDecoder().decode(payload));
                
                switch (data.type) {
                    case 'chat':
                        addChatMessage(participant.name || participant.identity, data.message);
                        break;
                    case 'reaction':
                        showReaction(data.reaction, participant.identity);
                        break;
                    case 'hand_raised':
                        updateParticipantHandStatus(participant.identity, data.raised);
                        break;
                    case 'poll_created':
                        handlePollCreated(data.poll);
                        break;
                    case 'poll_vote':
                        handlePollVote(data.pollId, data.vote);
                        break;
                    case 'whiteboard_action':
                        handleWhiteboardAction(data.action);
                        break;
                    case 'recording_started':
                        handleRecordingStarted();
                        break;
                    case 'recording_stopped':
                        handleRecordingStopped();
                        break;
                    case 'transcription':
                        handleTranscription(data.transcription);
                        break;
                    case 'breakout_created':
                        handleBreakoutCreated(data.rooms);
                        break;
                }
            } catch (error) {
                console.error('Failed to parse data message:', error);
            }
        }

        // Handle disconnection
        function handleDisconnected() {
            console.log('Disconnected from meeting');
            updateConnectionStatus('disconnected');
            isConnected = false;
        }

        // Add participant video to grid
        function addParticipantVideo(participant, element, trackKind) {
            let videoDiv = document.querySelector(`[data-participant="${participant.identity}"]`);
            
            if (!videoDiv) {
                videoDiv = document.createElement('div');
                videoDiv.className = 'participant-video';
                videoDiv.setAttribute('data-participant', participant.identity);
                
                if (participant === localParticipant) {
                    videoDiv.classList.add('local');
                }

                const infoDiv = document.createElement('div');
                infoDiv.className = 'participant-info';
                infoDiv.innerHTML = `
                    <span class="participant-name">${participant.name || participant.identity}</span>
                    <span class="muted-icon" style="display: none;">🔇</span>
                `;
                
                videoDiv.appendChild(infoDiv);
                videoContainer.appendChild(videoDiv);
            }

            if (trackKind === LivekitClient.Track.Kind.Video) {
                const existingVideo = videoDiv.querySelector('video');
                if (existingVideo) {
                    existingVideo.remove();
                }
                videoDiv.insertBefore(element, videoDiv.firstChild);
            }

            updateVideoGrid();
        }

        // Update participant video
        function updateParticipantVideo(participant) {
            const videoDiv = document.querySelector(`[data-participant="${participant.identity}"]`);
            if (videoDiv) {
                const video = videoDiv.querySelector('video');
                if (!video) {
                    videoDiv.style.background = '#333';
                }
            }
        }

        // Remove participant video
        function removeParticipantVideo(participant) {
            const videoDiv = document.querySelector(`[data-participant="${participant.identity}"]`);
            if (videoDiv) {
                videoDiv.remove();
                updateVideoGrid();
            }
        }

        // Update video grid layout
        function updateVideoGrid() {
            const participantCount = videoContainer.children.length;
            videoContainer.setAttribute('data-participants', participantCount);
        }

        // Setup event handlers
        function setupEventHandlers() {
            // Control button handlers
            micBtn.addEventListener('click', toggleMicrophone);
            cameraBtn.addEventListener('click', toggleCamera);
            screenShareBtn.addEventListener('click', toggleScreenShare);
            handBtn.addEventListener('click', toggleHand);
            recordBtn.addEventListener('click', toggleRecording);
            breakoutBtn.addEventListener('click', openBreakoutModal);
            pollBtn.addEventListener('click', openPollModal);
            whiteboardBtn.addEventListener('click', () => switchTab('whiteboard'));
            leaveBtn.addEventListener('click', leaveMeeting);

            // Chat functionality
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendChatMessage();
                }
            });

            // Poll form handler
            document.getElementById('createPollForm').addEventListener('submit', createPoll);
            document.getElementById('createBreakoutForm').addEventListener('submit', createBreakoutRooms);

            // Poll type change handler
            document.getElementById('pollType').addEventListener('change', handlePollTypeChange);
        }

        // Setup sidebar tabs
        function setupSidebarTabs() {
            document.querySelectorAll('.sidebar-tab').forEach(tab => {
                tab.addEventListener('click', () => {
                    const tabName = tab.getAttribute('data-tab');
                    switchTab(tabName);
                });
            });
        }

        // Switch sidebar tab
        function switchTab(tabName) {
            // Update active tab
            document.querySelectorAll('.sidebar-tab').forEach(t => t.classList.remove('active'));
            document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
            
            // Hide all tab contents
            document.querySelectorAll('.sidebar-content > div').forEach(div => {
                div.style.display = 'none';
            });
            
            // Show selected tab content
            const tabContent = document.getElementById(tabName + 'Tab');
            if (tabContent) {
                tabContent.style.display = tabName === 'chat' ? 'flex' : 'block';
                
                if (tabName === 'participants') {
                    updateParticipantsList();
                } else if (tabName === 'whiteboard') {
                    initializeWhiteboard();
                }
            }
        }

        // Control button functions
        async function toggleMicrophone() {
            if (!localParticipant) return;
            
            try {
                isMicMuted = !isMicMuted;
                await localParticipant.setMicrophoneEnabled(!isMicMuted);
                updateControlButtons();
            } catch (error) {
                console.error('Failed to toggle microphone:', error);
            }
        }

        async function toggleCamera() {
            if (!localParticipant) return;
            
            try {
                isCameraOff = !isCameraOff;
                await localParticipant.setCameraEnabled(!isCameraOff);
                updateControlButtons();
            } catch (error) {
                console.error('Failed to toggle camera:', error);
            }
        }

        async function toggleScreenShare() {
            if (!localParticipant) return;
            
            try {
                isScreenSharing = !isScreenSharing;
                await localParticipant.setScreenShareEnabled(isScreenSharing);
                updateControlButtons();
            } catch (error) {
                console.error('Failed to toggle screen share:', error);
            }
        }

        function toggleHand() {
            isHandRaised = !isHandRaised;
            updateControlButtons();
            
            if (room && localParticipant) {
                const data = JSON.stringify({
                    type: 'hand_raised',
                    raised: isHandRaised
                });
                localParticipant.publishData(new TextEncoder().encode(data), LivekitClient.DataPacket_Kind.RELIABLE);
            }
        }

        async function toggleRecording() {
            if (!MEETING_CONFIG.isHost) {
                showError('Only hosts can control recording');
                return;
            }

            try {
                const response = await fetch(`/api/v1/meetings/${MEETING_CONFIG.meetingId}/recording`, {
                    method: isRecording ? 'DELETE' : 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({
                        type: 'video',
                        quality: 'medium'
                    })
                });

                if (response.ok) {
                    isRecording = !isRecording;
                    updateControlButtons();
                    recordingIndicator.classList.toggle('active', isRecording);
                } else {
                    throw new Error('Failed to toggle recording');
                }
            } catch (error) {
                console.error('Failed to toggle recording:', error);
                showError('Failed to toggle recording');
            }
        }

        // Chat functionality
        function sendChatMessage() {
            const message = chatInput.value.trim();
            if (!message || !room || !localParticipant) return;

            try {
                const data = JSON.stringify({
                    type: 'chat',
                    message: message
                });
                localParticipant.publishData(new TextEncoder().encode(data), LivekitClient.DataPacket_Kind.RELIABLE);
                
                addChatMessage('You', message);
                chatInput.value = '';
            } catch (error) {
                console.error('Failed to send chat message:', error);
            }
        }

        function addChatMessage(sender, message, type = 'user') {
            const messageDiv = document.createElement('div');
            messageDiv.className = `chat-message ${type}`;
            messageDiv.innerHTML = `
                <div class="sender">${sender}</div>
                <div class="content">${message}</div>
                <div class="timestamp">${new Date().toLocaleTimeString()}</div>
            `;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Participants list
        function updateParticipantsList() {
            if (!room) return;
            
            participantsTab.innerHTML = '';
            
            addParticipantToList(localParticipant, true);
            
            room.participants.forEach(participant => {
                addParticipantToList(participant, false);
            });
        }

        function addParticipantToList(participant, isLocal) {
            const participantDiv = document.createElement('div');
            participantDiv.className = 'participant-item';
            participantDiv.innerHTML = `
                <div class="participant-name">${participant.name || participant.identity} ${isLocal ? '(You)' : ''}</div>
                <div class="participant-status">
                    <div class="status-icon online"></div>
                    ${participant.isMicrophoneEnabled ? '🎤' : '🔇'}
                    ${participant.isCameraEnabled ? '📹' : '📷'}
                </div>
            `;
            participantsTab.appendChild(participantDiv);
        }

        // Poll functionality
        function openPollModal() {
            if (!MEETING_CONFIG.isHost) {
                showError('Only hosts can create polls');
                return;
            }
            document.getElementById('createPollModal').classList.add('active');
        }

        function closePollModal() {
            document.getElementById('createPollModal').classList.remove('active');
            document.getElementById('createPollForm').reset();
        }

        function handlePollTypeChange() {
            const pollType = document.getElementById('pollType').value;
            const optionsGroup = document.getElementById('pollOptionsGroup');
            
            if (pollType === 'text' || pollType === 'rating') {
                optionsGroup.style.display = 'none';
            } else {
                optionsGroup.style.display = 'block';
            }
        }

        function addPollOption() {
            const optionsContainer = document.getElementById('pollOptions');
            const optionCount = optionsContainer.children.length + 1;
            
            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'form-input poll-option-input';
            input.placeholder = `Option ${optionCount}`;
            input.style.marginBottom = '10px';
            
            optionsContainer.appendChild(input);
        }

        async function createPoll(e) {
            e.preventDefault();
            
            const question = document.getElementById('pollQuestion').value;
            const pollType = document.getElementById('pollType').value;
            const isAnonymous = document.getElementById('pollAnonymous').checked;
            
            const options = [];
            if (pollType === 'single_choice' || pollType === 'multiple_choice') {
                document.querySelectorAll('.poll-option-input').forEach(input => {
                    if (input.value.trim()) {
                        options.push({ text: input.value.trim() });
                    }
                });
            }

            try {
                const response = await fetch(`/api/v1/meetings/${MEETING_CONFIG.meetingId}/polls`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({
                        title: question,
                        poll_type: pollType,
                        is_anonymous: isAnonymous,
                        options: options
                    })
                });

                if (response.ok) {
                    const poll = await response.json();
                    closePollModal();
                    switchTab('polls');
                } else {
                    throw new Error('Failed to create poll');
                }
            } catch (error) {
                console.error('Failed to create poll:', error);
                showError('Failed to create poll');
            }
        }

        function handlePollCreated(poll) {
            activePolls.set(poll.id, poll);
            displayPoll(poll);
        }

        function displayPoll(poll) {
            const pollsContainer = document.getElementById('pollsList');
            
            const pollDiv = document.createElement('div');
            pollDiv.className = 'poll-item';
            pollDiv.id = `poll-${poll.id}`;
            
            let optionsHTML = '';
            if (poll.poll_type === 'single_choice' || poll.poll_type === 'multiple_choice') {
                poll.options.forEach(option => {
                    const inputType = poll.poll_type === 'single_choice' ? 'radio' : 'checkbox';
                    optionsHTML += `
                        <div class="poll-option" onclick="selectPollOption('${poll.id}', '${option.id}')">
                            <input type="${inputType}" name="poll-${poll.id}" value="${option.id}">
                            <span>${option.option_text}</span>
                        </div>
                    `;
                });
            } else if (poll.poll_type === 'rating') {
                optionsHTML = `
                    <div class="rating-container">
                        ${[1,2,3,4,5].map(rating => `
                            <button class="rating-btn" onclick="submitRating('${poll.id}', ${rating})">${rating}</button>
                        `).join('')}
                    </div>
                `;
            } else if (poll.poll_type === 'text') {
                optionsHTML = `
                    <textarea class="form-textarea" id="text-response-${poll.id}" placeholder="Type your response..."></textarea>
                    <button class="btn" onclick="submitTextResponse('${poll.id}')">Submit</button>
                `;
            }
            
            pollDiv.innerHTML = `
                <div class="poll-question">${poll.title}</div>
                ${optionsHTML}
                <div class="poll-results" id="poll-results-${poll.id}" style="display: none;">
                    <!-- Results will be shown here -->
                </div>
            `;
            
            pollsContainer.appendChild(pollDiv);
        }

        // Whiteboard functionality
        function initializeWhiteboard() {
            if (whiteboardCanvas) return;
            
            const canvasElement = document.getElementById('whiteboardCanvas');
            if (!canvasElement) return;
            
            whiteboardCanvas = new fabric.Canvas('whiteboardCanvas', {
                isDrawingMode: true,
                width: 280,
                height: 200
            });
            
            whiteboardCanvas.freeDrawingBrush.width = 2;
            whiteboardCanvas.freeDrawingBrush.color = '#000000';
            
            // Setup whiteboard tools
            document.querySelectorAll('.tool-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const tool = e.target.dataset.tool;
                    if (tool) {
                        selectWhiteboardTool(tool);
                    }
                });
            });
            
            document.getElementById('clearWhiteboardBtn').addEventListener('click', clearWhiteboard);
            
            // Send whiteboard actions to other participants
            whiteboardCanvas.on('path:created', (e) => {
                const pathData = e.path.toObject();
                sendWhiteboardAction('draw', pathData);
            });
        }

        function selectWhiteboardTool(tool) {
            document.querySelectorAll('.tool-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelector(`[data-tool="${tool}"]`).classList.add('active');
            
            switch (tool) {
                case 'pen':
                    whiteboardCanvas.isDrawingMode = true;
                    whiteboardCanvas.freeDrawingBrush.width = 2;
                    break;
                case 'brush':
                    whiteboardCanvas.isDrawingMode = true;
                    whiteboardCanvas.freeDrawingBrush.width = 10;
                    break;
                case 'eraser':
                    whiteboardCanvas.isDrawingMode = true;
                    whiteboardCanvas.freeDrawingBrush.width = 20;
                    whiteboardCanvas.freeDrawingBrush.color = '#ffffff';
                    break;
            }
        }

        function clearWhiteboard() {
            if (whiteboardCanvas) {
                whiteboardCanvas.clear();
                sendWhiteboardAction('clear', {});
            }
        }

        function sendWhiteboardAction(actionType, data) {
            if (room && localParticipant) {
                const actionData = JSON.stringify({
                    type: 'whiteboard_action',
                    action: {
                        action_type: actionType,
                        data: data,
                        timestamp: Date.now()
                    }
                });
                localParticipant.publishData(new TextEncoder().encode(actionData), LivekitClient.DataPacket_Kind.RELIABLE);
            }
        }

        function handleWhiteboardAction(action) {
            if (!whiteboardCanvas) return;
            
            switch (action.action_type) {
                case 'draw':
                    fabric.util.enlivenObjects([action.data], (objects) => {
                        whiteboardCanvas.add(objects[0]);
                        whiteboardCanvas.renderAll();
                    });
                    break;
                case 'clear':
                    whiteboardCanvas.clear();
                    break;
            }
        }

        // Breakout rooms functionality
        function openBreakoutModal() {
            if (!MEETING_CONFIG.isHost) {
                showError('Only hosts can create breakout rooms');
                return;
            }
            document.getElementById('createBreakoutModal').classList.add('active');
        }

        function closeBreakoutModal() {
            document.getElementById('createBreakoutModal').classList.remove('active');
        }

        async function createBreakoutRooms(e) {
            e.preventDefault();
            
            const roomCount = document.getElementById('breakoutRoomCount').value;
            const assignment = document.getElementById('breakoutAssignment').value;
            const duration = document.getElementById('breakoutDuration').value;
            
            try {
                const response = await fetch(`/api/v1/meetings/${MEETING_CONFIG.meetingId}/breakout-rooms`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({
                        room_count: parseInt(roomCount),
                        assignment: assignment,
                        duration: parseInt(duration)
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    closeBreakoutModal();
                    switchTab('breakout');
                } else {
                    throw new Error('Failed to create breakout rooms');
                }
            } catch (error) {
                console.error('Failed to create breakout rooms:', error);
                showError('Failed to create breakout rooms');
            }
        }

        // Transcription functionality
        function handleTranscription(transcription) {
            transcriptionMessages.push(transcription);
            displayTranscription(transcription);
        }

        function displayTranscription(transcription) {
            const transcriptionContainer = document.getElementById('transcriptionMessages');
            
            const transcriptionDiv = document.createElement('div');
            transcriptionDiv.className = 'transcription-item';
            transcriptionDiv.innerHTML = `
                <div class="transcription-speaker">${transcription.speaker_name}</div>
                <div class="transcription-content">${transcription.content}</div>
                <div class="transcription-time">${new Date(transcription.start_time).toLocaleTimeString()}</div>
            `;
            
            transcriptionContainer.appendChild(transcriptionDiv);
            transcriptionContainer.scrollTop = transcriptionContainer.scrollHeight;
        }

        // Recording functionality
        function handleRecordingStarted() {
            isRecording = true;
            recordingIndicator.classList.add('active');
            updateControlButtons();
            addChatMessage('System', 'Recording started', 'system');
        }

        function handleRecordingStopped() {
            isRecording = false;
            recordingIndicator.classList.remove('active');
            updateControlButtons();
            addChatMessage('System', 'Recording stopped', 'system');
        }

        // Utility functions
        function updateConnectionStatus(status) {
            connectionStatus.textContent = status.charAt(0).toUpperCase() + status.slice(1);
            connectionStatus.className = `connection-status ${status}`;
        }

        function updateControlButtons() {
            micBtn.classList.toggle('active', !isMicMuted);
            micBtn.textContent = isMicMuted ? '🔇' : '🎤';
            
            cameraBtn.classList.toggle('active', !isCameraOff);
            cameraBtn.textContent = isCameraOff ? '📷' : '📹';
            
            screenShareBtn.classList.toggle('active', isScreenSharing);
            handBtn.classList.toggle('active', isHandRaised);
            recordBtn.classList.toggle('active', isRecording);
            recordBtn.textContent = isRecording ? '⏹️' : '⏺️';
        }

        function showError(message) {
            // Create a simple toast notification
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #ff4757;
                color: white;
                padding: 15px 20px;
                border-radius: 6px;
                z-index: 10000;
                font-size: 14px;
                max-width: 300px;
            `;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                document.body.removeChild(toast);
            }, 5000);
        }

        async function leaveMeeting() {
            if (confirm('Are you sure you want to leave the meeting?')) {
                try {
                    if (room) {
                        room.disconnect();
                    }
                    window.location.href = '/dashboard';
                } catch (error) {
                    console.error('Error leaving meeting:', error);
                    window.location.href = '/dashboard';
                }
            }
        }

        // Handle page unload
        window.addEventListener('beforeunload', () => {
            if (room) {
                room.disconnect();
            }
        });
    </script>
</body>

</html> 