{{define "auth/account-switcher.tmpl"}}
    {{template "layouts/header.tmpl" .}}
    
    <style>
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
            50% { opacity: 1; transform: translate(-50%, -50%) scale(1.2); }
            100% { opacity: 0; transform: translate(-50%, -50%) scale(1); }
        }
        
        .account-item:focus {
            outline: 2px solid #0d6efd;
            outline-offset: 2px;
        }
        
        .account-item[aria-selected="true"]:not(.border-primary) {
            box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);
        }
        
        .quick-switch-hint {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 0.8rem;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .quick-switch-hint.show {
            opacity: 1;
        }
    </style>

    <!-- Page Content -->
    <main class="container-fluid" role="main">
        <div class="min-vh-100 d-flex align-items-center justify-content-center bg-light py-5">
            <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5">
                <div class="card shadow-sm border-0">
                    <div class="card-body p-4 p-md-5">
                        <!-- Keyboard shortcuts help -->
                        <div class="position-absolute top-0 end-0 mt-3 me-3">
                            <button class="btn btn-link btn-sm text-muted p-1" type="button" 
                                    data-bs-toggle="modal" data-bs-target="#shortcutsModal"
                                    title="Keyboard shortcuts" aria-label="Show keyboard shortcuts">
                                <i class="fas fa-keyboard"></i>
                            </button>
                        </div>

                        <div class="text-center mb-4">
                            <div class="mx-auto bg-primary bg-opacity-10 rounded-circle d-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-users text-primary fs-4" aria-hidden="true"></i>
                            </div>
                            <h1 class="h3 fw-bold text-dark mb-2">
                                Switch Account
                            </h1>
                            <p class="text-muted small mb-0">
                                Choose an account to continue with or add a new one. Use arrow keys to navigate, Enter to select.
                            </p>
                        </div>

                        <!-- Session Statistics (if available) -->
                        {{if .statistics}}
                        <div class="alert alert-info border-0 mb-4" style="background: rgba(13, 110, 253, 0.05);">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle text-info me-2"></i>
                                <small class="text-info mb-0">
                                    Session active for {{printf "%.1f" .statistics.session_age_hours}} hours • 
                                    {{.statistics.switch_count}} switches made
                                    {{if .statistics.active_session_expires}}
                                    • Active account expires {{.statistics.active_session_expires.Format "Jan 2, 15:04"}}
                                    {{end}}
                                </small>
                            </div>
                        </div>
                        {{end}}

                        <!-- Security Insights Panel -->
                        <div id="security-insights" class="d-none mb-4">
                            <div class="card border-0 bg-light">
                                <div class="card-body p-3">
                                    <div class="d-flex align-items-center justify-content-between mb-2">
                                        <h6 class="mb-0">
                                            <i class="fas fa-shield-alt text-success me-1"></i>
                                            Security Overview
                                        </h6>
                                        <button class="btn btn-link btn-sm p-0" onclick="toggleSecurityInsights()">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <div class="row g-2 text-sm" id="security-content">
                                        <!-- Security insights will be loaded here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Account List -->
                        <div class="mb-4" id="accounts-container" role="listbox" aria-label="Available accounts">
                            {{range $index, $account := .accounts}}
                            <div class="account-item border rounded-3 p-3 mb-3 position-relative {{if eq $account.UserID $.active_account.UserID}}bg-primary bg-opacity-10 border-primary{{else}}bg-white{{end}}" 
                                 data-user-id="{{$account.UserID}}" 
                                 data-account-index="{{$index}}"
                                 role="option" 
                                 aria-selected="{{if eq $account.UserID $.active_account.UserID}}true{{else}}false{{end}}"
                                 tabindex="{{if eq $index 0}}0{{else}}-1{{end}}"
                                 style="cursor: pointer; transition: all 0.3s ease; overflow: hidden;"
                                 aria-label="Account: {{$account.Name}} ({{$account.Email}}){{if eq $account.UserID $.active_account.UserID}} - Currently active{{end}}">
                                
                                <!-- Loading overlay -->
                                <div class="loading-overlay position-absolute top-0 start-0 w-100 h-100 d-none align-items-center justify-content-center" 
                                     style="background: rgba(255,255,255,0.9); z-index: 10;">
                                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>

                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0">
                                        {{if $account.Avatar}}
                                        <img src="{{$account.Avatar}}" alt="" 
                                             class="rounded-circle account-avatar" width="48" height="48"
                                             style="transition: transform 0.2s ease;"
                                             loading="lazy">
                                        {{else}}
                                        <div class="bg-secondary bg-opacity-25 rounded-circle d-flex align-items-center justify-content-center account-avatar" 
                                             style="width: 48px; height: 48px; transition: transform 0.2s ease;"
                                             aria-hidden="true">
                                            <i class="fas fa-user text-secondary"></i>
                                        </div>
                                        {{end}}
                                        
                                        <!-- Online indicator -->
                                        <div class="position-relative">
                                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-success" 
                                                  style="font-size: 0.5rem; margin-top: -35px; margin-left: -10px;">
                                                <span class="visually-hidden">Online</span>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="flex-grow-1 ms-3">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div>
                                                <h6 class="mb-1 fw-semibold account-name">{{$account.Name}}</h6>
                                                <p class="mb-0 text-muted small account-email">{{$account.Email}}</p>
                                            </div>
                                            <div class="text-end">
                                                {{if eq $account.UserID $.active_account.UserID}}
                                                <span class="badge bg-primary" aria-label="Currently active account">
                                                    <i class="fas fa-check me-1" aria-hidden="true"></i>Active
                                                </span>
                                                {{else}}
                                                <button class="btn btn-sm btn-outline-primary switch-account-btn" 
                                                        data-user-id="{{$account.UserID}}"
                                                        style="transition: all 0.2s ease;"
                                                        aria-label="Switch to {{$account.Name}}"
                                                        title="Switch to this account">
                                                    <i class="fas fa-exchange-alt me-1" aria-hidden="true"></i>Switch
                                                </button>
                                                {{end}}
                                            </div>
                                        </div>
                                        <div class="mt-2 d-flex align-items-center justify-content-between">
                                            <div>
                                                <small class="text-muted">
                                                    <i class="fas fa-sign-in-alt me-1"></i>
                                                    {{$account.LoginMethod}}
                                                    {{if $account.SecurityLevel}}
                                                    <span class="mx-1">•</span>
                                                    <span class="badge badge-sm {{if eq $account.SecurityLevel "high"}}bg-success{{else if eq $account.SecurityLevel "medium"}}bg-warning{{else}}bg-secondary{{end}}" 
                                                          title="Security level: {{$account.SecurityLevel}}">
                                                        <i class="fas fa-shield-alt"></i>
                                                    </span>
                                                    {{end}}
                                                    {{if $account.LastAccessed}}
                                                    <span class="mx-2">•</span>
                                                    <span class="last-accessed" data-timestamp="{{$account.LastAccessed.Unix}}">
                                                        {{$account.LastAccessed.Format "Jan 2, 15:04"}}
                                                    </span>
                                                    {{end}}
                                                    {{if $account.LastActivity}}
                                                    <span class="mx-2">•</span>
                                                    <span class="text-primary" title="Last activity">{{$account.LastActivity}}</span>
                                                    {{end}}
                                                </small>
                                            </div>
                                            {{if ne $account.UserID $.active_account.UserID}}
                                            <div class="dropdown">
                                                <button class="btn btn-link btn-sm p-0 text-muted" type="button" 
                                                        data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="fas fa-ellipsis-v"></i>
                                                </button>
                                                <ul class="dropdown-menu dropdown-menu-end">
                                                    <li>
                                                        <button class="dropdown-item refresh-account-btn" data-user-id="{{$account.UserID}}">
                                                            <i class="fas fa-sync me-2"></i>Refresh Data
                                                        </button>
                                                    </li>
                                                    <li>
                                                        <button class="dropdown-item extend-session-btn" data-user-id="{{$account.UserID}}">
                                                            <i class="fas fa-clock me-2"></i>Extend Session
                                                        </button>
                                                    </li>
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li>
                                                        <button class="dropdown-item text-danger remove-account-btn" data-user-id="{{$account.UserID}}">
                                                            <i class="fas fa-times me-2"></i>Remove
                                                        </button>
                                                    </li>
                                                </ul>
                                            </div>
                                            {{end}}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            {{end}}
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-grid gap-2">
                            <a href="/auth/add-account" class="btn btn-outline-primary" style="transition: all 0.2s ease;">
                                <i class="fas fa-plus me-2"></i>
                                Add Another Account
                            </a>
                            <button class="btn btn-outline-secondary refresh-all-btn" style="transition: all 0.2s ease;">
                                <i class="fas fa-sync me-2"></i>
                                Refresh All Accounts
                            </button>
                            <button class="btn btn-outline-info security-insights-btn" style="transition: all 0.2s ease;" onclick="loadSecurityInsights()">
                                <i class="fas fa-shield-alt me-2"></i>
                                Security Insights
                            </button>
                            
                            <!-- Bulk Operations Dropdown -->
                            <div class="dropdown">
                                <button class="btn btn-outline-warning dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-tasks me-2"></i>Bulk Operations
                                </button>
                                <ul class="dropdown-menu">
                                    <li>
                                        <button class="dropdown-item" onclick="accountSwitcher.handleBulkExtendSessions()">
                                            <i class="fas fa-clock me-2"></i>Extend All Sessions
                                        </button>
                                    </li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <button class="dropdown-item text-danger" onclick="showBulkRemoveModal()">
                                            <i class="fas fa-trash me-2"></i>Remove Multiple Accounts
                                        </button>
                                    </li>
                                </ul>
                            </div>
                            
                            <a href="/dashboard" class="btn btn-secondary" style="transition: all 0.2s ease;">
                                <i class="fas fa-arrow-left me-2"></i>
                                Back to Dashboard
                            </a>
                        </div>

                        <!-- Account Info -->
                        <div class="text-center mt-4">
                            <small class="text-muted">
                                <span id="account-count">{{.account_count}}</span> of 5 accounts • 
                                <a href="/logout?all=true" class="text-decoration-none text-danger">
                                    <i class="fas fa-sign-out-alt me-1"></i>Sign out of all accounts
                                </a>
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Keyboard Shortcuts Modal -->
    <div class="modal fade" id="shortcutsModal" tabindex="-1" aria-labelledby="shortcutsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="shortcutsModalLabel">
                        <i class="fas fa-keyboard me-2"></i>Keyboard Shortcuts
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-2 text-sm">
                        <div class="col-6"><kbd>↑/↓</kbd></div>
                        <div class="col-6">Navigate accounts</div>
                        <div class="col-6"><kbd>Enter</kbd></div>
                        <div class="col-6">Switch account</div>
                        <div class="col-6"><kbd>Ctrl+Tab</kbd></div>
                        <div class="col-6">Quick switch next</div>
                        <div class="col-6"><kbd>Ctrl+Shift+Tab</kbd></div>
                        <div class="col-6">Quick switch previous</div>
                        <div class="col-6"><kbd>Ctrl+A</kbd></div>
                        <div class="col-6">Add account</div>
                        <div class="col-6"><kbd>Ctrl+R</kbd></div>
                        <div class="col-6">Refresh all</div>
                        <div class="col-6"><kbd>Delete</kbd></div>
                        <div class="col-6">Remove account</div>
                        <div class="col-6"><kbd>Escape</kbd></div>
                        <div class="col-6">Back to dashboard</div>
                        <div class="col-6"><kbd>?</kbd></div>
                        <div class="col-6">Show shortcuts</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Session Timeout Warning Modal -->
    <div class="modal fade" id="sessionWarningModal" tabindex="-1" aria-labelledby="sessionWarningLabel" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title" id="sessionWarningLabel">
                        <i class="fas fa-exclamation-triangle me-2"></i>Session Expiring Soon
                    </h5>
                </div>
                <div class="modal-body">
                    <p>Your session will expire in <span id="countdown-timer" class="fw-bold">5:00</span> minutes.</p>
                    <p class="mb-0">Would you like to extend your session?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Let it expire</button>
                    <button type="button" class="btn btn-primary" id="extend-session-btn">Extend Session</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Remove Accounts Modal -->
    <div class="modal fade" id="bulkRemoveModal" tabindex="-1" aria-labelledby="bulkRemoveLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="bulkRemoveLabel">
                        <i class="fas fa-trash me-2"></i>Remove Multiple Accounts
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-3">Select the accounts you want to remove from your session:</p>
                    <div id="bulk-remove-accounts" class="mb-3">
                        <!-- Account checkboxes will be populated here -->
                    </div>
                    <div class="alert alert-warning" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> You cannot remove all accounts. At least one account must remain active.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirm-bulk-remove" disabled>
                        <i class="fas fa-trash me-2"></i>Remove Selected
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1100;">
        <div id="toast-template" class="toast align-items-center border-0 d-none" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    <!-- Toast message will be inserted here -->
                </div>
                <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

    <script>
        // Enhanced JavaScript with better error handling, animations, and accessibility
        class AccountSwitcher {
            constructor() {
                this.currentFocusIndex = 0;
                this.accounts = document.querySelectorAll('.account-item');
                this.sessionWarningTimer = null;
                this.countdownTimer = null;
                this.isSessionWarningShown = false;
                
                this.initializeEventListeners();
                this.initializeKeyboardNavigation();
                this.updateRelativeTimes();
                this.startPeriodicUpdates();
                this.initializeSessionTimeout();
                this.loadAccountSuggestions();
                
                // Set up global functions
                window.loadSecurityInsights = () => this.loadSecurityInsights();
                window.toggleSecurityInsights = () => this.toggleSecurityInsights();
                window.showBulkRemoveModal = () => this.showBulkRemoveModal();
                window.accountSwitcher = this;
            }

            initializeEventListeners() {
                // Handle account switching
                document.querySelectorAll('.switch-account-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => this.handleAccountSwitch(e));
                });

                // Handle account removal
                document.querySelectorAll('.remove-account-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => this.handleAccountRemoval(e));
                });

                // Handle account refresh
                document.querySelectorAll('.refresh-account-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => this.handleAccountRefresh(e));
                });

                // Handle session extension
                document.querySelectorAll('.extend-session-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => this.handleSessionExtension(e));
                });

                // Handle refresh all accounts
                document.querySelector('.refresh-all-btn')?.addEventListener('click', (e) => {
                    this.handleRefreshAll(e);
                });

                // Handle clicking on account items (for switching)
                document.querySelectorAll('.account-item').forEach(item => {
                    item.addEventListener('click', (e) => this.handleAccountItemClick(e));
                });

                // Add hover effects
                this.addHoverEffects();
            }

            initializeKeyboardNavigation() {
                // Global keyboard event listener
                document.addEventListener('keydown', (e) => this.handleGlobalKeydown(e));
                
                // Account item keyboard navigation
                this.accounts.forEach((account, index) => {
                    account.addEventListener('keydown', (e) => this.handleAccountKeydown(e, index));
                });
            }

            handleGlobalKeydown(e) {
                // Ignore if modal is open or input is focused
                if (document.querySelector('.modal.show') || 
                    ['INPUT', 'TEXTAREA', 'SELECT'].includes(e.target.tagName)) {
                    return;
                }

                switch(e.key) {
                    case 'ArrowUp':
                        e.preventDefault();
                        this.navigateAccounts(-1);
                        break;
                    case 'ArrowDown':
                        e.preventDefault();
                        this.navigateAccounts(1);
                        break;
                    case 'Enter':
                        e.preventDefault();
                        this.activateCurrentAccount();
                        break;
                    case 'Escape':
                        e.preventDefault();
                        window.location.href = '/dashboard';
                        break;
                    case '?':
                        e.preventDefault();
                        new bootstrap.Modal(document.getElementById('shortcutsModal')).show();
                        break;
                }

                // Handle Ctrl combinations
                if (e.ctrlKey) {
                    switch(e.key) {
                        case 'a':
                            e.preventDefault();
                            window.location.href = '/auth/add-account';
                            break;
                        case 'r':
                            e.preventDefault();
                            this.handleRefreshAll({target: document.querySelector('.refresh-all-btn')});
                            break;
                        case 'Tab':
                            e.preventDefault();
                            this.handleQuickSwitch(e.shiftKey ? 'previous' : 'next');
                            break;
                    }
                }
            }

            handleAccountKeydown(e, index) {
                switch(e.key) {
                    case ' ':
                    case 'Enter':
                        e.preventDefault();
                        if (index !== this.getActiveAccountIndex()) {
                            const switchBtn = this.accounts[index].querySelector('.switch-account-btn');
                            if (switchBtn) switchBtn.click();
                        }
                        break;
                    case 'Delete':
                        e.preventDefault();
                        const removeBtn = this.accounts[index].querySelector('.remove-account-btn');
                        if (removeBtn) removeBtn.click();
                        break;
                }
            }

            navigateAccounts(direction) {
                if (this.accounts.length === 0) return;
                
                // Remove focus from current item
                this.accounts[this.currentFocusIndex]?.setAttribute('tabindex', '-1');
                
                // Calculate new index
                this.currentFocusIndex = (this.currentFocusIndex + direction + this.accounts.length) % this.accounts.length;
                
                // Focus new item
                const newFocusItem = this.accounts[this.currentFocusIndex];
                newFocusItem.setAttribute('tabindex', '0');
                newFocusItem.focus();
                
                // Update aria-selected
                this.accounts.forEach((account, index) => {
                    account.setAttribute('aria-selected', index === this.currentFocusIndex ? 'true' : 'false');
                });
            }

            activateCurrentAccount() {
                const currentAccount = this.accounts[this.currentFocusIndex];
                if (!currentAccount) return;
                
                const switchBtn = currentAccount.querySelector('.switch-account-btn');
                if (switchBtn) {
                    switchBtn.click();
                }
            }

            async loadSecurityInsights() {
                try {
                    const response = await this.makeRequest('/auth/accounts/security-insights');
                    if (response.success) {
                        this.displaySecurityInsights(response.insights);
                        document.getElementById('security-insights').classList.remove('d-none');
                    }
                } catch (error) {
                    console.error('Failed to load security insights:', error);
                    this.handleError(error, 'Failed to load security insights');
                }
            }

            displaySecurityInsights(insights) {
                const content = document.getElementById('security-content');
                if (!content) return;

                const securityLevelColor = (count, level) => {
                    if (count === 0) return 'text-muted';
                    switch(level) {
                        case 'high': return 'text-success';
                        case 'medium': return 'text-warning';
                        case 'low': return 'text-danger';
                        default: return 'text-muted';
                    }
                };

                content.innerHTML = `
                    <div class="col-6">
                        <strong>Total Accounts:</strong>
                    </div>
                    <div class="col-6">${insights.total_accounts}</div>
                    
                    <div class="col-6">
                        <i class="fas fa-shield-alt ${securityLevelColor(insights.high_security_count, 'high')} me-1"></i>
                        High Security:
                    </div>
                    <div class="col-6 ${securityLevelColor(insights.high_security_count, 'high')}">${insights.high_security_count}</div>
                    
                    <div class="col-6">
                        <i class="fas fa-shield-alt ${securityLevelColor(insights.medium_security_count, 'medium')} me-1"></i>
                        Medium Security:
                    </div>
                    <div class="col-6 ${securityLevelColor(insights.medium_security_count, 'medium')}">${insights.medium_security_count}</div>
                    
                    <div class="col-6">
                        <i class="fas fa-shield-alt ${securityLevelColor(insights.low_security_count, 'low')} me-1"></i>
                        Low Security:
                    </div>
                    <div class="col-6 ${securityLevelColor(insights.low_security_count, 'low')}">${insights.low_security_count}</div>
                    
                    <div class="col-6">
                        <i class="fas fa-clock text-warning me-1"></i>
                        Expiring Soon:
                    </div>
                    <div class="col-6 ${insights.expired_soon_count > 0 ? 'text-warning' : 'text-muted'}">${insights.expired_soon_count}</div>
                    
                    <div class="col-6">
                        <i class="fas fa-network-wired text-info me-1"></i>
                        Unique IPs:
                    </div>
                    <div class="col-6 ${insights.unique_ips > 1 ? 'text-warning' : 'text-muted'}">${insights.unique_ips}</div>
                    
                    <div class="col-6">
                        <i class="fas fa-exchange-alt text-primary me-1"></i>
                        Switch Frequency:
                    </div>
                    <div class="col-6">${insights.switch_frequency.toFixed(1)}/hour</div>
                `;

                // Add warning if there are security concerns
                if (insights.expired_soon_count > 0 || insights.unique_ips > 2 || insights.low_security_count > 0) {
                    const warningDiv = document.createElement('div');
                    warningDiv.className = 'col-12 mt-2 alert alert-warning alert-sm p-2 mb-0';
                    warningDiv.innerHTML = `
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        <small>Security recommendations available. Consider using stronger authentication methods.</small>
                    `;
                    content.appendChild(warningDiv);
                }
            }

            toggleSecurityInsights() {
                const panel = document.getElementById('security-insights');
                if (panel) {
                    panel.classList.add('d-none');
                }
            }

            showBulkRemoveModal() {
                const modal = new bootstrap.Modal(document.getElementById('bulkRemoveModal'));
                const container = document.getElementById('bulk-remove-accounts');
                const confirmBtn = document.getElementById('confirm-bulk-remove');
                
                // Clear previous content
                container.innerHTML = '';
                
                // Get all accounts except the active one
                const accounts = document.querySelectorAll('.account-item');
                const activeAccountId = '{{.active_account.UserID}}';
                let removableAccounts = [];
                
                accounts.forEach(accountItem => {
                    const userId = accountItem.dataset.userId;
                    if (userId !== activeAccountId) {
                        const email = accountItem.querySelector('.account-email').textContent;
                        const name = accountItem.querySelector('.account-name').textContent;
                        removableAccounts.push({ userId, email, name });
                    }
                });
                
                if (removableAccounts.length === 0) {
                    container.innerHTML = '<p class="text-muted">No accounts available for removal.</p>';
                    modal.show();
                    return;
                }
                
                // Create checkboxes for each removable account
                removableAccounts.forEach(account => {
                    const checkboxDiv = document.createElement('div');
                    checkboxDiv.className = 'form-check mb-2';
                    checkboxDiv.innerHTML = `
                        <input class="form-check-input bulk-remove-checkbox" type="checkbox" 
                               value="${account.userId}" id="remove-${account.userId}">
                        <label class="form-check-label" for="remove-${account.userId}">
                            <strong>${account.name}</strong><br>
                            <small class="text-muted">${account.email}</small>
                        </label>
                    `;
                    container.appendChild(checkboxDiv);
                });
                
                // Add event listeners to checkboxes
                const checkboxes = container.querySelectorAll('.bulk-remove-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', () => {
                        const selectedCount = container.querySelectorAll('.bulk-remove-checkbox:checked').length;
                        confirmBtn.disabled = selectedCount === 0;
                        confirmBtn.innerHTML = selectedCount > 0 ? 
                            `<i class="fas fa-trash me-2"></i>Remove ${selectedCount} Account(s)` :
                            '<i class="fas fa-trash me-2"></i>Remove Selected';
                    });
                });
                
                // Set up confirm button handler
                confirmBtn.onclick = () => {
                    const selectedUserIds = Array.from(container.querySelectorAll('.bulk-remove-checkbox:checked'))
                        .map(cb => cb.value);
                    
                    if (selectedUserIds.length > 0) {
                        bootstrap.Modal.getInstance(document.getElementById('bulkRemoveModal')).hide();
                        this.handleBulkRemoveAccounts(selectedUserIds);
                    }
                };
                
                modal.show();
            }

            getActiveAccountIndex() {
                return Array.from(this.accounts).findIndex(account => 
                    account.classList.contains('border-primary')
                );
            }

            initializeSessionTimeout() {
                // Check for session expiration every minute
                setInterval(() => this.checkSessionExpiration(), 60000);
                
                // Setup session warning modal handlers
                document.getElementById('extend-session-btn')?.addEventListener('click', () => {
                    this.extendActiveSession();
                });
            }

            async checkSessionExpiration() {
                try {
                    const activeAccount = '{{.active_account.UserID}}';
                    if (!activeAccount) return;

                    const response = await this.makeRequest('/auth/accounts/validate', {
                        method: 'POST',
                        body: JSON.stringify({ user_id: activeAccount })
                    });

                    if (response.account && response.account.expires_at) {
                        const expiresAt = new Date(response.account.expires_at);
                        const now = new Date();
                        const minutesUntilExpiry = Math.floor((expiresAt - now) / (1000 * 60));

                        // Show warning if less than 5 minutes remaining
                        if (minutesUntilExpiry <= 5 && minutesUntilExpiry > 0 && !this.isSessionWarningShown) {
                            this.showSessionWarning(minutesUntilExpiry);
                        }
                    }
                } catch (error) {
                    console.warn('Session expiration check failed:', error);
                }
            }

            showSessionWarning(minutesRemaining) {
                this.isSessionWarningShown = true;
                const modal = new bootstrap.Modal(document.getElementById('sessionWarningModal'));
                modal.show();

                // Start countdown
                this.startCountdown(minutesRemaining * 60);
            }

            startCountdown(seconds) {
                const timerElement = document.getElementById('countdown-timer');
                
                this.countdownTimer = setInterval(() => {
                    const minutes = Math.floor(seconds / 60);
                    const secs = seconds % 60;
                    timerElement.textContent = `${minutes}:${secs.toString().padStart(2, '0')}`;
                    
                    if (seconds <= 0) {
                        clearInterval(this.countdownTimer);
                        this.showToast('Session expired. Redirecting to login...', 'warning');
                        setTimeout(() => window.location.href = '/login', 2000);
                    }
                    
                    seconds--;
                }, 1000);
            }

            async extendActiveSession() {
                try {
                    const response = await this.makeRequest('/auth/accounts/extend-session', {
                        method: 'POST',
                        body: JSON.stringify({})
                    });

                    if (response.success) {
                        this.isSessionWarningShown = false;
                        clearInterval(this.countdownTimer);
                        bootstrap.Modal.getInstance(document.getElementById('sessionWarningModal')).hide();
                        this.showToast('Session extended successfully', 'success');
                    }
                } catch (error) {
                    this.handleError(error, 'Failed to extend session');
                }
            }

            async handleQuickSwitch(direction) {
                try {
                    const response = await this.makeRequest('/auth/accounts/quick-switch', {
                        method: 'POST',
                        body: JSON.stringify({ direction: direction })
                    });

                    if (response.success) {
                        this.showToast(`Switched to ${response.to_account.name}`, 'success');
                        // Add visual feedback
                        const switchIcon = document.createElement('div');
                        switchIcon.innerHTML = `<i class="fas fa-exchange-alt text-primary"></i>`;
                        switchIcon.className = 'position-fixed top-50 start-50 translate-middle';
                        switchIcon.style.cssText = 'z-index: 9999; font-size: 2rem; animation: fadeInOut 1s ease-in-out;';
                        
                        document.body.appendChild(switchIcon);
                        setTimeout(() => switchIcon.remove(), 1000);
                        
                        // Redirect after short delay
                        setTimeout(() => {
                            window.location.href = '/dashboard?message=Account switched successfully';
                        }, 800);
                    } else {
                        throw new Error(response.message || 'Failed to quick switch');
                    }
                } catch (error) {
                    console.error('Quick switch error:', error);
                    this.handleError(error, 'Failed to switch account');
                }
            }

            async loadAccountSuggestions() {
                try {
                    const response = await this.makeRequest('/auth/accounts/suggestions');
                    if (response.success && response.suggestions.length > 0) {
                        this.displaySuggestions(response.suggestions);
                    }
                } catch (error) {
                    console.warn('Failed to load account suggestions:', error);
                }
            }

            displaySuggestions(suggestions) {
                const container = document.getElementById('accounts-container');
                if (!container) return;

                // Add suggestions header if we have suggestions
                const suggestionsHeader = document.createElement('div');
                suggestionsHeader.className = 'mb-3';
                suggestionsHeader.innerHTML = `
                    <h6 class="text-muted mb-2">
                        <i class="fas fa-star me-1"></i>Recently used accounts
                    </h6>
                `;
                
                // Add suggestions as quick access buttons
                const suggestionsRow = document.createElement('div');
                suggestionsRow.className = 'd-flex gap-2 mb-3';
                
                suggestions.forEach(account => {
                    const suggestionBtn = document.createElement('button');
                    suggestionBtn.className = 'btn btn-outline-secondary btn-sm';
                    suggestionBtn.innerHTML = `
                        ${account.avatar ? 
                            `<img src="${account.avatar}" alt="" class="rounded-circle me-1" width="20" height="20">` :
                            `<i class="fas fa-user me-1"></i>`
                        }
                        ${account.name}
                    `;
                    suggestionBtn.onclick = () => this.switchToAccount(account.user_id);
                    suggestionsRow.appendChild(suggestionBtn);
                });
                
                suggestionsHeader.appendChild(suggestionsRow);
                container.insertBefore(suggestionsHeader, container.firstChild);
            }

            async switchToAccount(userID) {
                const switchBtn = document.querySelector(`[data-user-id="${userID}"] .switch-account-btn`);
                if (switchBtn) {
                    switchBtn.click();
                }
            }

            async handleAccountSwitch(e) {
                e.stopPropagation();
                const btn = e.target.closest('.switch-account-btn');
                const userID = btn.dataset.userId;
                const accountItem = btn.closest('.account-item');
                
                try {
                    this.showLoading(accountItem, true);
                    this.setButtonLoading(btn, 'Switching...', 'fas fa-spinner fa-spin');
                    
                    const response = await this.makeRequest('/auth/switch-account', {
                        method: 'POST',
                        body: JSON.stringify({ user_id: userID })
                    });
                    
                    if (response.success) {
                        this.showToast('Account switched successfully!', 'success');
                        // Add success animation
                        accountItem.style.transform = 'scale(1.02)';
                        setTimeout(() => {
                            window.location.href = '/dashboard?message=Account switched successfully';
                        }, 500);
                    } else {
                        throw new Error(response.message || 'Failed to switch account');
                    }
                } catch (error) {
                    console.error('Switch account error:', error);
                    this.handleError(error, 'Failed to switch account');
                    this.setButtonLoading(btn, 'Switch', 'fas fa-exchange-alt', false);
                } finally {
                    this.showLoading(accountItem, false);
                }
            }

            async handleAccountRemoval(e) {
                e.stopPropagation();
                const btn = e.target.closest('.remove-account-btn');
                const userID = btn.dataset.userId;
                const accountItem = btn.closest('.account-item');
                
                if (!confirm('Are you sure you want to remove this account from your session?')) {
                    return;
                }
                
                try {
                    this.showLoading(accountItem, true);
                    
                    const response = await this.makeRequest('/auth/remove-account', {
                        method: 'POST',
                        body: JSON.stringify({ user_id: userID })
                    });
                    
                    if (response.success) {
                        // Animate removal
                        accountItem.style.transform = 'translateX(100%)';
                        accountItem.style.opacity = '0';
                        
                        setTimeout(() => {
                            accountItem.remove();
                            this.updateAccountCount(-1);
                            this.showToast('Account removed successfully', 'success');
                        }, 300);
                    } else {
                        throw new Error(response.message || 'Failed to remove account');
                    }
                } catch (error) {
                    console.error('Remove account error:', error);
                    this.handleError(error, 'Failed to remove account');
                    this.showLoading(accountItem, false);
                }
            }

            async handleAccountRefresh(e) {
                e.stopPropagation();
                const btn = e.target.closest('.refresh-account-btn');
                const userID = btn.dataset.userId;
                const accountItem = document.querySelector(`[data-user-id="${userID}"]`);
                
                try {
                    this.showLoading(accountItem, true);
                    
                    const response = await this.makeRequest('/auth/accounts/refresh', {
                        method: 'POST',
                        body: JSON.stringify({ user_id: userID })
                    });
                    
                    if (response.success) {
                        this.showToast('Account data refreshed', 'success');
                        // Optionally reload the page to show updated data
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        throw new Error(response.message || 'Failed to refresh account');
                    }
                } catch (error) {
                    console.error('Refresh account error:', error);
                    this.handleError(error, 'Failed to refresh account data');
                } finally {
                    this.showLoading(accountItem, false);
                }
            }

            async handleSessionExtension(e) {
                e.stopPropagation();
                const btn = e.target.closest('.extend-session-btn');
                const userID = btn.dataset.userId;
                const accountItem = document.querySelector(`[data-user-id="${userID}"]`);
                
                try {
                    this.showLoading(accountItem, true);
                    
                    const response = await this.makeRequest('/auth/accounts/extend-session', {
                        method: 'POST',
                        body: JSON.stringify({ user_id: userID })
                    });
                    
                    if (response.success) {
                        this.showToast('Session extended successfully', 'success');
                    } else {
                        throw new Error(response.message || 'Failed to extend session');
                    }
                } catch (error) {
                    console.error('Extend session error:', error);
                    this.handleError(error, 'Failed to extend session');
                } finally {
                    this.showLoading(accountItem, false);
                }
            }

            async handleRefreshAll(e) {
                const btn = e.target.closest('.refresh-all-btn');
                const originalText = btn.innerHTML;
                
                try {
                    btn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Refreshing...';
                    btn.disabled = true;
                    
                    // Use bulk refresh endpoint
                    const response = await this.makeRequest('/auth/accounts/bulk-refresh', {
                        method: 'POST'
                    });
                    
                    if (response.success) {
                        if (response.error_count > 0) {
                            this.showToast(`${response.message} (${response.error_count} errors)`, 'warning');
                        } else {
                            this.showToast(response.message, 'success');
                        }
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        throw new Error(response.message || 'Bulk refresh failed');
                    }
                    
                } catch (error) {
                    console.error('Refresh all error:', error);
                    this.handleError(error, 'Failed to refresh accounts');
                } finally {
                    btn.innerHTML = originalText;
                    btn.disabled = false;
                }
            }

            async handleBulkExtendSessions() {
                try {
                    const response = await this.makeRequest('/auth/accounts/bulk-extend-sessions', {
                        method: 'POST'
                    });
                    
                    if (response.success) {
                        if (response.error_count > 0) {
                            this.showToast(`${response.message} (${response.error_count} errors)`, 'warning');
                        } else {
                            this.showToast(response.message, 'success');
                        }
                    } else {
                        throw new Error(response.message || 'Bulk session extension failed');
                    }
                    
                } catch (error) {
                    console.error('Bulk extend sessions error:', error);
                    this.handleError(error, 'Failed to extend sessions');
                }
            }

            async handleBulkRemoveAccounts(userIDs) {
                if (!userIDs || userIDs.length === 0) {
                    this.showToast('No accounts selected for removal', 'warning');
                    return;
                }

                if (!confirm(`Are you sure you want to remove ${userIDs.length} account(s) from your session?`)) {
                    return;
                }
                
                try {
                    const response = await this.makeRequest('/auth/accounts/bulk-remove', {
                        method: 'POST',
                        body: JSON.stringify({ user_ids: userIDs })
                    });
                    
                    if (response.success) {
                        if (response.error_count > 0) {
                            this.showToast(`${response.message} (${response.error_count} errors)`, 'warning');
                        } else {
                            this.showToast(response.message, 'success');
                        }
                        
                        // Remove accounts from UI
                        userIDs.forEach(userID => {
                            const accountItem = document.querySelector(`[data-user-id="${userID}"]`);
                            if (accountItem) {
                                accountItem.style.transform = 'translateX(100%)';
                                accountItem.style.opacity = '0';
                                setTimeout(() => accountItem.remove(), 300);
                            }
                        });
                        
                        this.updateAccountCount(-response.success_count);
                    } else {
                        throw new Error(response.message || 'Bulk removal failed');
                    }
                    
                } catch (error) {
                    console.error('Bulk remove error:', error);
                    this.handleError(error, 'Failed to remove accounts');
                }
            }

            handleAccountItemClick(e) {
                if (e.target.closest('.dropdown, .btn, button')) {
                    return; // Don't trigger if clicking on buttons or dropdown
                }
                
                const accountItem = e.currentTarget;
                const userID = accountItem.dataset.userId;
                const activeUserID = '{{.active_account.UserID}}';
                
                if (userID !== activeUserID) {
                    const switchBtn = accountItem.querySelector('.switch-account-btn');
                    if (switchBtn) {
                        switchBtn.click();
                    }
                }
            }

            addHoverEffects() {
                document.querySelectorAll('.account-item').forEach(item => {
                    item.addEventListener('mouseenter', () => {
                        if (!item.classList.contains('border-primary')) {
                            item.style.transform = 'translateY(-2px)';
                            item.style.boxShadow = '0 8px 25px rgba(0,0,0,0.1)';
                            
                            const avatar = item.querySelector('.account-avatar');
                            if (avatar) {
                                avatar.style.transform = 'scale(1.1)';
                            }
                        }
                    });
                    
                    item.addEventListener('mouseleave', () => {
                        if (!item.classList.contains('border-primary')) {
                            item.style.transform = 'none';
                            item.style.boxShadow = 'none';
                            
                            const avatar = item.querySelector('.account-avatar');
                            if (avatar) {
                                avatar.style.transform = 'scale(1)';
                            }
                        }
                    });
                });
            }

            showLoading(element, show) {
                const overlay = element.querySelector('.loading-overlay');
                if (overlay) {
                    if (show) {
                        overlay.classList.remove('d-none');
                        overlay.classList.add('d-flex');
                    } else {
                        overlay.classList.add('d-none');
                        overlay.classList.remove('d-flex');
                    }
                }
            }

            setButtonLoading(btn, text, iconClass, loading = true) {
                if (loading) {
                    btn.innerHTML = `<i class="${iconClass} me-1"></i>${text}`;
                    btn.disabled = true;
                } else {
                    btn.disabled = false;
                }
            }

            async makeRequest(url, options = {}) {
                const defaultOptions = {
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    ...options
                };
                
                const response = await fetch(url, defaultOptions);
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.message || `HTTP error! status: ${response.status}`);
                }
                
                return data;
            }

            handleError(error, defaultMessage) {
                let message = defaultMessage;
                
                if (error.message) {
                    if (error.message.includes('rate limit')) {
                        message = 'You\'re switching accounts too frequently. Please wait a moment.';
                    } else if (error.message.includes('expired')) {
                        message = 'Your session has expired. Please log in again.';
                    } else {
                        message = error.message;
                    }
                }
                
                this.showToast(message, 'error');
            }

            showToast(message, type = 'info') {
                const template = document.getElementById('toast-template');
                const toast = template.cloneNode(true);
                toast.id = '';
                toast.classList.remove('d-none');
                
                // Set toast styling based on type
                const typeClasses = {
                    success: 'text-bg-success',
                    error: 'text-bg-danger',
                    warning: 'text-bg-warning',
                    info: 'text-bg-info'
                };
                
                toast.classList.add(typeClasses[type] || typeClasses.info);
                toast.querySelector('.toast-body').textContent = message;
                
                document.querySelector('.toast-container').appendChild(toast);
                
                const bsToast = new bootstrap.Toast(toast, {
                    autohide: true,
                    delay: type === 'error' ? 8000 : 5000
                });
                
                bsToast.show();
                
                // Remove toast element after it's hidden
                toast.addEventListener('hidden.bs.toast', () => {
                    toast.remove();
                });
            }

            updateAccountCount(delta) {
                const countElement = document.getElementById('account-count');
                if (countElement) {
                    const currentCount = parseInt(countElement.textContent);
                    countElement.textContent = currentCount + delta;
                }
            }

            updateRelativeTimes() {
                document.querySelectorAll('.last-accessed').forEach(element => {
                    const timestamp = parseInt(element.dataset.timestamp);
                    if (timestamp) {
                        const date = new Date(timestamp * 1000);
                        const now = new Date();
                        const diffMinutes = Math.floor((now - date) / (1000 * 60));
                        
                        let relativeTime;
                        if (diffMinutes < 1) {
                            relativeTime = 'Just now';
                        } else if (diffMinutes < 60) {
                            relativeTime = `${diffMinutes}m ago`;
                        } else if (diffMinutes < 1440) {
                            relativeTime = `${Math.floor(diffMinutes / 60)}h ago`;
                        } else {
                            relativeTime = date.toLocaleDateString();
                        }
                        
                        element.textContent = relativeTime;
                    }
                });
            }

            startPeriodicUpdates() {
                // Update relative times every minute
                setInterval(() => this.updateRelativeTimes(), 60000);
                
                // Validate active session every 5 minutes
                setInterval(() => this.validateActiveSession(), 300000);
            }

            async validateActiveSession() {
                try {
                    const response = await this.makeRequest('/auth/accounts/validate', {
                        method: 'POST',
                        body: JSON.stringify({ user_id: '{{.active_account.UserID}}' })
                    });
                    
                    if (!response.valid) {
                        this.showToast('Your session has expired. Please log in again.', 'warning');
                        setTimeout(() => {
                            window.location.href = '/login';
                        }, 3000);
                    }
                } catch (error) {
                    console.warn('Session validation failed:', error);
                }
            }
        }

        // Initialize the account switcher when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new AccountSwitcher();
        });
    </script>

    {{template "layouts/footer.tmpl" .}}
{{end}} 