{{define "calendar/index"}}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendar - {{.app_name}}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #1976d2;
            --secondary-color: #f5f5f5;
            --border-color: #e0e0e0;
            --text-color: #333;
            --hover-color: #f0f0f0;
            --event-blue: #1976d2;
            --event-green: #388e3c;
            --event-red: #d32f2f;
            --event-orange: #f57c00;
            --event-purple: #7b1fa2;
        }

        body {
            font-family: 'Roboto', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: #fff;
            margin: 0;
            overflow-x: hidden;
        }

        .calendar-container {
            display: flex;
            height: 100vh;
        }

        /* Sidebar */
        .calendar-sidebar {
            width: 280px;
            background: #fff;
            border-right: 1px solid var(--border-color);
            padding: 20px;
            overflow-y: auto;
        }

        .create-btn {
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 24px;
            padding: 12px 24px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            width: 100%;
            margin-bottom: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            transition: background-color 0.2s;
        }

        .create-btn:hover {
            background: #1565c0;
        }

        .mini-calendar {
            margin-bottom: 24px;
        }

        .mini-calendar h3 {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 16px;
            color: var(--text-color);
        }

        .mini-calendar-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 12px;
        }

        .mini-calendar-nav {
            background: none;
            border: none;
            color: var(--text-color);
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
        }

        .mini-calendar-nav:hover {
            background: var(--hover-color);
        }

        .mini-calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 2px;
            font-size: 12px;
        }

        .mini-calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border-radius: 4px;
            color: var(--text-color);
        }

        .mini-calendar-day:hover {
            background: var(--hover-color);
        }

        .mini-calendar-day.today {
            background: var(--primary-color);
            color: white;
        }

        .mini-calendar-day.selected {
            background: #e3f2fd;
            color: var(--primary-color);
        }

        .mini-calendar-day.other-month {
            color: #999;
        }

        .my-calendars {
            margin-bottom: 24px;
        }

        .my-calendars h3 {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 16px;
            color: var(--text-color);
        }

        .calendar-item {
            display: flex;
            align-items: center;
            padding: 8px 0;
            cursor: pointer;
            border-radius: 4px;
        }

        .calendar-item:hover {
            background: var(--hover-color);
        }

        .calendar-checkbox {
            width: 16px;
            height: 16px;
            border-radius: 3px;
            margin-right: 12px;
            cursor: pointer;
            position: relative;
        }

        .calendar-checkbox.checked::after {
            content: 'âœ“';
            position: absolute;
            color: white;
            font-size: 12px;
            top: -2px;
            left: 2px;
        }

        .calendar-name {
            flex: 1;
            font-size: 14px;
            color: var(--text-color);
        }

        .calendar-menu {
            opacity: 0;
            transition: opacity 0.2s;
        }

        .calendar-item:hover .calendar-menu {
            opacity: 1;
        }

        /* Main Calendar */
        .calendar-main {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .calendar-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 16px 24px;
            border-bottom: 1px solid var(--border-color);
            background: white;
        }

        .calendar-nav {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .nav-btn {
            background: none;
            border: none;
            color: var(--text-color);
            cursor: pointer;
            padding: 8px;
            border-radius: 4px;
            font-size: 18px;
        }

        .nav-btn:hover {
            background: var(--hover-color);
        }

        .calendar-title {
            font-size: 22px;
            font-weight: 400;
            color: var(--text-color);
            margin: 0 16px;
        }

        .view-selector {
            display: flex;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            overflow: hidden;
        }

        .view-btn {
            background: white;
            border: none;
            padding: 8px 16px;
            cursor: pointer;
            font-size: 14px;
            color: var(--text-color);
            border-right: 1px solid var(--border-color);
        }

        .view-btn:last-child {
            border-right: none;
        }

        .view-btn.active {
            background: var(--primary-color);
            color: white;
        }

        .view-btn:hover:not(.active) {
            background: var(--hover-color);
        }

        .calendar-content {
            flex: 1;
            overflow: auto;
            background: white;
        }

        /* Month View */
        .month-view {
            display: grid;
            grid-template-rows: auto 1fr;
            height: 100%;
        }

        .month-header {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            border-bottom: 1px solid var(--border-color);
        }

        .month-header-day {
            padding: 12px;
            text-align: center;
            font-weight: 500;
            font-size: 14px;
            color: var(--text-color);
            background: var(--secondary-color);
        }

        .month-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            grid-template-rows: repeat(6, 1fr);
            height: 100%;
        }

        .month-day {
            border-right: 1px solid var(--border-color);
            border-bottom: 1px solid var(--border-color);
            padding: 8px;
            min-height: 120px;
            cursor: pointer;
            position: relative;
        }

        .month-day:hover {
            background: #fafafa;
        }

        .month-day.other-month {
            color: #999;
            background: #fafafa;
        }

        .month-day.today {
            background: #e3f2fd;
        }

        .day-number {
            font-weight: 500;
            margin-bottom: 4px;
        }

        .day-events {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .event-item {
            background: var(--event-blue);
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 12px;
            cursor: pointer;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .event-item.green { background: var(--event-green); }
        .event-item.red { background: var(--event-red); }
        .event-item.orange { background: var(--event-orange); }
        .event-item.purple { background: var(--event-purple); }

        /* Week View */
        .week-view {
            display: grid;
            grid-template-rows: auto 1fr;
            height: 100%;
        }

        .week-header {
            display: grid;
            grid-template-columns: 60px repeat(7, 1fr);
            border-bottom: 1px solid var(--border-color);
            background: var(--secondary-color);
        }

        .week-time-header {
            border-right: 1px solid var(--border-color);
        }

        .week-day-header {
            padding: 12px;
            text-align: center;
            border-right: 1px solid var(--border-color);
            font-weight: 500;
        }

        .week-day-header.today {
            background: var(--primary-color);
            color: white;
        }

        .week-grid {
            display: grid;
            grid-template-columns: 60px repeat(7, 1fr);
            overflow-y: auto;
        }

        .week-times {
            border-right: 1px solid var(--border-color);
        }

        .time-slot {
            height: 60px;
            padding: 4px 8px;
            border-bottom: 1px solid #f0f0f0;
            font-size: 12px;
            color: #666;
            display: flex;
            align-items: flex-start;
        }

        .week-day-column {
            border-right: 1px solid var(--border-color);
            position: relative;
        }

        .week-hour-slot {
            height: 60px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            position: relative;
        }

        .week-hour-slot:hover {
            background: #fafafa;
        }

        .week-event {
            position: absolute;
            background: var(--event-blue);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            min-height: 20px;
            left: 2px;
            right: 2px;
            z-index: 10;
        }

        /* Day View */
        .day-view {
            display: grid;
            grid-template-columns: 60px 1fr;
            height: 100%;
        }

        .day-times {
            border-right: 1px solid var(--border-color);
        }

        .day-content {
            position: relative;
            overflow-y: auto;
        }

        .day-hour-slot {
            height: 60px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            position: relative;
        }

        .day-hour-slot:hover {
            background: #fafafa;
        }

        /* Event Modal */
        .event-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .event-modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .event-modal-content {
            background: white;
            border-radius: 8px;
            padding: 24px;
            width: 90%;
            max-width: 500px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 500;
            margin: 0;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #666;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-label {
            display: block;
            margin-bottom: 4px;
            font-weight: 500;
            color: var(--text-color);
        }

        .form-control {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 14px;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(25, 118, 210, 0.2);
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
        }

        .btn-primary:hover {
            background: #1565c0;
        }

        .btn-secondary {
            background: #f5f5f5;
            color: var(--text-color);
            border: 1px solid var(--border-color);
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            margin-right: 8px;
        }

        .btn-secondary:hover {
            background: #e0e0e0;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .calendar-sidebar {
                width: 0;
                overflow: hidden;
                transition: width 0.3s ease;
            }

            .calendar-sidebar.open {
                width: 280px;
            }

            .mobile-nav {
                display: block;
                padding: 16px;
                border-bottom: 1px solid var(--border-color);
            }

            .sidebar-toggle {
                background: none;
                border: none;
                font-size: 18px;
                cursor: pointer;
            }
        }

        @media (min-width: 769px) {
            .mobile-nav {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="calendar-container">
        <!-- Mobile Navigation -->
        <div class="mobile-nav d-md-none">
            <button class="sidebar-toggle" onclick="toggleSidebar()">
                <i class="fas fa-bars"></i>
            </button>
        </div>

        <!-- Sidebar -->
        <div class="calendar-sidebar" id="sidebar">
            <button class="create-btn" onclick="openEventModal()">
                <i class="fas fa-plus"></i>
                Create
            </button>

            <!-- Mini Calendar -->
            <div class="mini-calendar">
                <div class="mini-calendar-header">
                    <button class="mini-calendar-nav" onclick="previousMonth()">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <span id="miniCalendarTitle">January 2024</span>
                    <button class="mini-calendar-nav" onclick="nextMonth()">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
                <div class="mini-calendar-grid" id="miniCalendarGrid">
                    <!-- Mini calendar will be populated by JavaScript -->
                </div>
            </div>

            <!-- My Calendars -->
            <div class="my-calendars">
                <h3>My Calendars</h3>
                <div class="calendar-item">
                    <div class="calendar-checkbox checked" style="background: var(--event-blue);" onclick="toggleCalendar('personal')"></div>
                    <span class="calendar-name">Personal</span>
                    <button class="calendar-menu">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                </div>
                <div class="calendar-item">
                    <div class="calendar-checkbox checked" style="background: var(--event-green);" onclick="toggleCalendar('work')"></div>
                    <span class="calendar-name">Work</span>
                    <button class="calendar-menu">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                </div>
                <div class="calendar-item">
                    <div class="calendar-checkbox checked" style="background: var(--event-orange);" onclick="toggleCalendar('family')"></div>
                    <span class="calendar-name">Family</span>
                    <button class="calendar-menu">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Main Calendar -->
        <div class="calendar-main">
            <div class="calendar-header">
                <div class="calendar-nav">
                    <button class="nav-btn" onclick="previousPeriod()">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button class="nav-btn" onclick="nextPeriod()">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                    <button class="nav-btn" onclick="goToToday()">Today</button>
                    <h1 class="calendar-title" id="calendarTitle">January 2024</h1>
                </div>
                <div class="view-selector">
                    <button class="view-btn" onclick="switchView('day')">Day</button>
                    <button class="view-btn" onclick="switchView('week')">Week</button>
                    <button class="view-btn active" onclick="switchView('month')">Month</button>
                    <button class="view-btn" onclick="switchView('year')">Year</button>
                </div>
            </div>

            <div class="calendar-content" id="calendarContent">
                <!-- Calendar views will be rendered here -->
            </div>
        </div>
    </div>

    <!-- Event Modal -->
    <div class="event-modal" id="eventModal">
        <div class="event-modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">New Event</h2>
                <button class="close-btn" onclick="closeEventModal()">Ã—</button>
            </div>
            <form id="eventForm">
                <div class="form-group">
                    <label class="form-label" for="eventTitle">Title</label>
                    <input type="text" class="form-control" id="eventTitle" required>
                </div>
                <div class="form-group">
                    <label class="form-label" for="eventDate">Date</label>
                    <input type="date" class="form-control" id="eventDate" required>
                </div>
                <div class="form-group">
                    <label class="form-label" for="eventStartTime">Start Time</label>
                    <input type="time" class="form-control" id="eventStartTime">
                </div>
                <div class="form-group">
                    <label class="form-label" for="eventEndTime">End Time</label>
                    <input type="time" class="form-control" id="eventEndTime">
                </div>
                <div class="form-group">
                    <label class="form-label" for="eventDescription">Description</label>
                    <textarea class="form-control" id="eventDescription" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label" for="eventLocation">Location</label>
                    <input type="text" class="form-control" id="eventLocation">
                </div>
                <div class="form-group">
                    <label class="form-label" for="eventCalendar">Calendar</label>
                    <select class="form-control" id="eventCalendar">
                        <option value="personal">Personal</option>
                        <option value="work">Work</option>
                        <option value="family">Family</option>
                    </select>
                </div>
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn-secondary" onclick="closeEventModal()">Cancel</button>
                    <button type="submit" class="btn-primary">Save Event</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Calendar state
        let currentDate = new Date();
        let currentView = 'month';
        let events = [];
        let visibleCalendars = ['personal', 'work', 'family'];

        // Calendar colors
        const calendarColors = {
            personal: 'var(--event-blue)',
            work: 'var(--event-green)',
            family: 'var(--event-orange)'
        };

        // Initialize calendar
        document.addEventListener('DOMContentLoaded', function() {
            loadEvents();
            renderCalendar();
            renderMiniCalendar();
        });

        // Load events from API
        async function loadEvents() {
            try {
                const response = await fetch('/api/v1/calendar-events/view?view=month&date=' + currentDate.toISOString().split('T')[0]);
                const data = await response.json();
                if (data.status === 'success') {
                    events = data.data.daily_events || {};
                }
            } catch (error) {
                console.error('Error loading events:', error);
            }
        }

        // Render calendar based on current view
        function renderCalendar() {
            const content = document.getElementById('calendarContent');
            const title = document.getElementById('calendarTitle');
            
            switch (currentView) {
                case 'day':
                    renderDayView(content);
                    title.textContent = formatDate(currentDate, 'day');
                    break;
                case 'week':
                    renderWeekView(content);
                    title.textContent = formatDate(currentDate, 'week');
                    break;
                case 'month':
                    renderMonthView(content);
                    title.textContent = formatDate(currentDate, 'month');
                    break;
                case 'year':
                    renderYearView(content);
                    title.textContent = formatDate(currentDate, 'year');
                    break;
            }
        }

        // Render month view
        function renderMonthView(container) {
            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());

            let html = `
                <div class="month-view">
                    <div class="month-header">
                        <div class="month-header-day">Sun</div>
                        <div class="month-header-day">Mon</div>
                        <div class="month-header-day">Tue</div>
                        <div class="month-header-day">Wed</div>
                        <div class="month-header-day">Thu</div>
                        <div class="month-header-day">Fri</div>
                        <div class="month-header-day">Sat</div>
                    </div>
                    <div class="month-grid">
            `;

            for (let i = 0; i < 42; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                const dateStr = date.toISOString().split('T')[0];
                const isToday = date.toDateString() === new Date().toDateString();
                const isOtherMonth = date.getMonth() !== currentDate.getMonth();

                html += `
                    <div class="month-day ${isToday ? 'today' : ''} ${isOtherMonth ? 'other-month' : ''}" 
                         onclick="selectDate('${dateStr}')">
                        <div class="day-number">${date.getDate()}</div>
                        <div class="day-events">
                            ${renderDayEvents(dateStr)}
                        </div>
                    </div>
                `;
            }

            html += `</div></div>`;
            container.innerHTML = html;
        }

        // Render week view
        function renderWeekView(container) {
            const startOfWeek = new Date(currentDate);
            startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());

            let html = `
                <div class="week-view">
                    <div class="week-header">
                        <div class="week-time-header"></div>
            `;

            for (let i = 0; i < 7; i++) {
                const date = new Date(startOfWeek);
                date.setDate(startOfWeek.getDate() + i);
                const isToday = date.toDateString() === new Date().toDateString();
                
                html += `
                    <div class="week-day-header ${isToday ? 'today' : ''}">
                        <div>${['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][i]}</div>
                        <div>${date.getDate()}</div>
                    </div>
                `;
            }

            html += `
                    </div>
                    <div class="week-grid">
                        <div class="week-times">
            `;

            for (let hour = 0; hour < 24; hour++) {
                html += `<div class="time-slot">${hour.toString().padStart(2, '0')}:00</div>`;
            }

            html += `</div>`;

            for (let i = 0; i < 7; i++) {
                const date = new Date(startOfWeek);
                date.setDate(startOfWeek.getDate() + i);
                const dateStr = date.toISOString().split('T')[0];

                html += `<div class="week-day-column">`;
                for (let hour = 0; hour < 24; hour++) {
                    html += `<div class="week-hour-slot" onclick="createEventAt('${dateStr}', ${hour})"></div>`;
                }
                html += `</div>`;
            }

            html += `</div></div>`;
            container.innerHTML = html;
        }

        // Render day view
        function renderDayView(container) {
            const dateStr = currentDate.toISOString().split('T')[0];
            
            let html = `
                <div class="day-view">
                    <div class="day-times">
            `;

            for (let hour = 0; hour < 24; hour++) {
                html += `<div class="time-slot">${hour.toString().padStart(2, '0')}:00</div>`;
            }

            html += `
                    </div>
                    <div class="day-content">
            `;

            for (let hour = 0; hour < 24; hour++) {
                html += `<div class="day-hour-slot" onclick="createEventAt('${dateStr}', ${hour})"></div>`;
            }

            html += `</div></div>`;
            container.innerHTML = html;
        }

        // Render year view (simplified)
        function renderYearView(container) {
            let html = `<div class="year-view" style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px; padding: 20px;">`;
            
            for (let month = 0; month < 12; month++) {
                const monthDate = new Date(currentDate.getFullYear(), month, 1);
                html += `
                    <div class="year-month" style="border: 1px solid var(--border-color); border-radius: 8px; padding: 16px;">
                        <h3 style="text-align: center; margin-bottom: 12px;">${monthDate.toLocaleDateString('en-US', { month: 'long' })}</h3>
                        <div style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 2px; font-size: 12px;">
                            ${renderMiniMonthGrid(monthDate)}
                        </div>
                    </div>
                `;
            }
            
            html += `</div>`;
            container.innerHTML = html;
        }

        // Helper function to render mini month grid
        function renderMiniMonthGrid(monthDate) {
            const firstDay = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);
            const lastDay = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());

            let html = '';
            for (let i = 0; i < 42; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                const isOtherMonth = date.getMonth() !== monthDate.getMonth();
                
                html += `
                    <div style="aspect-ratio: 1; display: flex; align-items: center; justify-content: center; cursor: pointer; ${isOtherMonth ? 'color: #ccc;' : ''}"
                         onclick="goToDate('${date.toISOString().split('T')[0]}')">
                        ${date.getDate()}
                    </div>
                `;
            }
            return html;
        }

        // Render events for a specific day
        function renderDayEvents(dateStr) {
            const dayEvents = events[dateStr] || [];
            return dayEvents.slice(0, 3).map(event => {
                const calendar = event.calendar || 'personal';
                const colorClass = calendar === 'work' ? 'green' : calendar === 'family' ? 'orange' : '';
                return `<div class="event-item ${colorClass}" onclick="editEvent('${event.id}')">${event.title}</div>`;
            }).join('') + (dayEvents.length > 3 ? `<div class="event-item" style="background: #666;">+${dayEvents.length - 3} more</div>` : '');
        }

        // Render mini calendar
        function renderMiniCalendar() {
            const grid = document.getElementById('miniCalendarGrid');
            const title = document.getElementById('miniCalendarTitle');
            
            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            title.textContent = currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
            
            let html = '';
            for (let i = 0; i < 42; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                const isToday = date.toDateString() === new Date().toDateString();
                const isSelected = date.toDateString() === currentDate.toDateString();
                const isOtherMonth = date.getMonth() !== currentDate.getMonth();
                
                html += `
                    <div class="mini-calendar-day ${isToday ? 'today' : ''} ${isSelected ? 'selected' : ''} ${isOtherMonth ? 'other-month' : ''}"
                         onclick="goToDate('${date.toISOString().split('T')[0]}')">
                        ${date.getDate()}
                    </div>
                `;
            }
            
            grid.innerHTML = html;
        }

        // Navigation functions
        function previousPeriod() {
            switch (currentView) {
                case 'day':
                    currentDate.setDate(currentDate.getDate() - 1);
                    break;
                case 'week':
                    currentDate.setDate(currentDate.getDate() - 7);
                    break;
                case 'month':
                    currentDate.setMonth(currentDate.getMonth() - 1);
                    break;
                case 'year':
                    currentDate.setFullYear(currentDate.getFullYear() - 1);
                    break;
            }
            loadEvents();
            renderCalendar();
            renderMiniCalendar();
        }

        function nextPeriod() {
            switch (currentView) {
                case 'day':
                    currentDate.setDate(currentDate.getDate() + 1);
                    break;
                case 'week':
                    currentDate.setDate(currentDate.getDate() + 7);
                    break;
                case 'month':
                    currentDate.setMonth(currentDate.getMonth() + 1);
                    break;
                case 'year':
                    currentDate.setFullYear(currentDate.getFullYear() + 1);
                    break;
            }
            loadEvents();
            renderCalendar();
            renderMiniCalendar();
        }

        function goToToday() {
            currentDate = new Date();
            loadEvents();
            renderCalendar();
            renderMiniCalendar();
        }

        function goToDate(dateStr) {
            currentDate = new Date(dateStr);
            loadEvents();
            renderCalendar();
            renderMiniCalendar();
        }

        function previousMonth() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderMiniCalendar();
        }

        function nextMonth() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderMiniCalendar();
        }

        // View switching
        function switchView(view) {
            currentView = view;
            document.querySelectorAll('.view-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            renderCalendar();
        }

        // Event management
        function openEventModal(eventId = null) {
            const modal = document.getElementById('eventModal');
            const title = document.getElementById('modalTitle');
            const form = document.getElementById('eventForm');
            
            if (eventId) {
                title.textContent = 'Edit Event';
                // Load event data
            } else {
                title.textContent = 'New Event';
                form.reset();
                document.getElementById('eventDate').value = currentDate.toISOString().split('T')[0];
            }
            
            modal.classList.add('show');
        }

        function closeEventModal() {
            document.getElementById('eventModal').classList.remove('show');
        }

        function createEventAt(dateStr, hour) {
            document.getElementById('eventDate').value = dateStr;
            document.getElementById('eventStartTime').value = hour.toString().padStart(2, '0') + ':00';
            document.getElementById('eventEndTime').value = (hour + 1).toString().padStart(2, '0') + ':00';
            openEventModal();
        }

        function selectDate(dateStr) {
            document.getElementById('eventDate').value = dateStr;
            openEventModal();
        }

        function editEvent(eventId) {
            openEventModal(eventId);
        }

        // Calendar management
        function toggleCalendar(calendarId) {
            const index = visibleCalendars.indexOf(calendarId);
            if (index > -1) {
                visibleCalendars.splice(index, 1);
            } else {
                visibleCalendars.push(calendarId);
            }
            renderCalendar();
        }

        // Mobile sidebar
        function toggleSidebar() {
            document.getElementById('sidebar').classList.toggle('open');
        }

        // Utility functions
        function formatDate(date, view) {
            switch (view) {
                case 'day':
                    return date.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
                case 'week':
                    const startOfWeek = new Date(date);
                    startOfWeek.setDate(date.getDate() - date.getDay());
                    const endOfWeek = new Date(startOfWeek);
                    endOfWeek.setDate(startOfWeek.getDate() + 6);
                    return `${startOfWeek.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${endOfWeek.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
                case 'month':
                    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long' });
                case 'year':
                    return date.getFullYear().toString();
                default:
                    return date.toLocaleDateString();
            }
        }

        // Event form submission
        document.getElementById('eventForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const eventData = {
                title: document.getElementById('eventTitle').value,
                start_time: document.getElementById('eventDate').value + 'T' + (document.getElementById('eventStartTime').value || '00:00') + ':00',
                end_time: document.getElementById('eventDate').value + 'T' + (document.getElementById('eventEndTime').value || '23:59') + ':00',
                description: document.getElementById('eventDescription').value,
                location: document.getElementById('eventLocation').value,
                calendar: document.getElementById('eventCalendar').value
            };
            
            try {
                const response = await fetch('/api/v1/calendar-events', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(eventData)
                });
                
                if (response.ok) {
                    closeEventModal();
                    loadEvents();
                    renderCalendar();
                } else {
                    alert('Error creating event');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error creating event');
            }
        });
    </script>
</body>
</html>
{{end}} 