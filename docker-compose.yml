services:
  goravel:
    build:
      context: .
    ports:
      - "3000:3000"
    restart: always
    env_file:
      - .env
    environment:
      # Observability
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_SERVICE_NAME=goravel-app
      - OTEL_SERVICE_VERSION=1.0.0
      - LOKI_ENDPOINT=http://loki:3100
      - MIMIR_ENDPOINT=http://mimir:9009
      # Override .env with Docker service names
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=goravel
      - DB_PASSWORD=goravel_password
      - DB_DATABASE=goravel
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAIL_HOST=mailpit
      - MAIL_PORT=1025
      - APP_HOST=0.0.0.0
      # Vault configuration
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=myroot
      - VAULT_DEV_MODE=true
      - VAULT_FALLBACK_TO_ENV=true
      - VAULT_CACHE_ENABLED=true
      - VAULT_LOGGING_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailpit:
        condition: service_started
      loki:
        condition: service_started
      tempo:
        condition: service_started
      mimir:
        condition: service_started
      grafana:
        condition: service_started
      vault:
        condition: service_healthy

  # Redis for caching and session storage
  redis:
    image: redis:8-alpine
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ""
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:17-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: goravel
      POSTGRES_USER: goravel
      POSTGRES_PASSWORD: goravel_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U goravel"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mailpit for email testing
  mailpit:
    image: axllent/mailpit:v1.27
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    restart: unless-stopped

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:9.6.0
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@goravel.dev
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ./storage/pgadmin:/var/lib/pgadmin
    restart: unless-stopped
    depends_on:
      - postgres

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    restart: unless-stopped
    depends_on:
      - redis

  # Loki for log aggregation
  loki:
    image: grafana/loki:3.5.3
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
      - ./observability/loki/local-config.yaml:/etc/loki/local-config.yaml:ro
    restart: unless-stopped

  # Tempo for distributed tracing
  tempo:
    image: grafana/tempo:2.8.1
    command: [ "-config.file=/etc/tempo.yaml" ]
    user: "0:0"  # Run as root to avoid permission issues
    volumes:
      - ./observability/tempo/tempo.yaml:/etc/tempo.yaml:ro
      - tempo-data:/tmp/tempo
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"    # tempo
      - "4317:4317"    # otlp grpc
      - "4318:4318"    # otlp http
      - "9411:9411"    # zipkin
    restart: unless-stopped

  # Mimir for metrics storage
  mimir:
    image: grafana/mimir:2.16.1
    command: ["-config.file=/etc/mimir.yaml"]
    ports:
      - "9009:9009"
    volumes:
      - ./observability/mimir/mimir.yaml:/etc/mimir.yaml:ro
      - mimir-data:/data
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:12.1.0
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    depends_on:
      - loki
      - tempo
      - mimir

  # MinIO for S3-compatible object storage
  minio:
    image: "minio/minio:RELEASE.2023-10-16T04-13-43Z"
    command: 'server /data --console-address ":9001"'
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      # mc alias set local http://127.0.0.1:9000 miniouserroot miniouserrootpassword
      MINIO_ROOT_USER: miniouserroot
      MINIO_ROOT_PASSWORD: miniouserrootpassword
      MINIO_BUCKETS: goravelstorage
      MINIO_DEFAULT_BUCKETS: goravelstorage
      MINIO_REGION_NAME: ap-southeast-1
    restart: unless-stopped

  # Promtail for log collection (optional, for file-based logs)
  promtail:
    image: grafana/promtail:3.5
    volumes:
      - ./observability/promtail/config.yml:/etc/promtail/config.yml:ro
      - ./storage/logs:/var/log/goravel:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    depends_on:
      - loki

  # HashiCorp Vault for secret management
  vault:
    image: hashicorp/vault:1.20.1
    ports:
      - "8200:8200"
    volumes:
      - vault-data:/vault/data
      - vault-logs:/vault/logs
      - ./vault/config:/vault/config:ro
      - ./vault/policies:/vault/policies:ro
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_API_ADDR: "http://0.0.0.0:8200"
      VAULT_ADDRESS: "http://0.0.0.0:8200"
      VAULT_UI: "true"
      VAULT_LOG_LEVEL: "info"
      VAULT_DEV_MODE: "true"
      VAULT_DEV_ROOT_TOKEN_ID: "myroot"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    command: >
      sh -c "
      if [ \"$$VAULT_DEV_MODE\" = \"true\" ]; then
        echo 'Starting Vault in development mode...'
        vault server -dev -dev-root-token-id=myroot -dev-listen-address=0.0.0.0:8200
      else
        echo 'Starting Vault in production mode...'
        vault server -config=/vault/config/vault.hcl
      fi
      "
    cap_add:
      - IPC_LOCK
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "vault status || exit 0"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  grafana-storage:
  loki-data:
  tempo-data:
  mimir-data:
  minio-data:
  redis-data:
  postgres-data:
  vault-data:
  vault-logs: